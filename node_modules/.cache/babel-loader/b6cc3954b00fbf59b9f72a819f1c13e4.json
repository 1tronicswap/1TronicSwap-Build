{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\widgets\\\\Menu\\\\components\\\\PanelBody.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport * as IconModule from \"../icons\";\nimport Accordion from \"./Accordion\";\nimport { MenuEntry, LinkLabel, LinkStatus } from \"./MenuEntry\";\nimport MenuLink from \"./MenuLink\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Icons = IconModule;\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  overflow-x: hidden;\n  height: 100%;\n`;\n_c = Container;\n\nconst PanelBody = _ref => {\n  _s();\n\n  let {\n    isPushed,\n    pushNav,\n    isMobile,\n    links\n  } = _ref;\n  const location = useLocation(); // Close the menu when a user clicks a link on mobile\n\n  const handleClick = isMobile ? () => pushNav(false) : undefined;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onMouseEnter: () => {\n      pushNav(true);\n    },\n    onMouseLeave: () => {\n      pushNav(false);\n    },\n    children: links.map(entry => {\n      const Icon = Icons[entry.icon];\n\n      const iconElement = /*#__PURE__*/_jsxDEV(Icon, {\n        width: \"24px\",\n        mr: \"8px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }, this);\n\n      const calloutClass = entry.calloutClass ? entry.calloutClass : undefined;\n\n      if (entry.items) {\n        const itemsMatchIndex = entry.items.findIndex(item => item.href === location.pathname);\n        const initialOpenState = entry.initialOpenState === true ? entry.initialOpenState : itemsMatchIndex >= 0;\n        return /*#__PURE__*/_jsxDEV(Accordion, {\n          isPushed: isPushed,\n          pushNav: pushNav,\n          icon: iconElement,\n          label: entry.label,\n          status: entry.status,\n          initialOpenState: initialOpenState,\n          className: calloutClass,\n          isActive: entry.items.some(item => item.href === location.pathname),\n          children: isPushed && entry.items.map(item => /*#__PURE__*/_jsxDEV(MenuEntry, {\n            secondary: true,\n            isActive: item.href === location.pathname,\n            onClick: handleClick,\n            children: /*#__PURE__*/_jsxDEV(MenuLink, {\n              href: item.href,\n              children: [/*#__PURE__*/_jsxDEV(LinkLabel, {\n                isPushed: isPushed,\n                children: item.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 23\n              }, this), item.status && /*#__PURE__*/_jsxDEV(LinkStatus, {\n                color: item.status.color,\n                fontSize: \"14px\",\n                children: item.status.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this)\n          }, item.href, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 19\n          }, this))\n        }, entry.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(MenuEntry, {\n        isActive: entry.href === location.pathname,\n        className: calloutClass,\n        children: /*#__PURE__*/_jsxDEV(MenuLink, {\n          href: entry.href,\n          onClick: handleClick,\n          children: [iconElement, /*#__PURE__*/_jsxDEV(LinkLabel, {\n            isPushed: isPushed,\n            children: entry.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), entry.status && /*#__PURE__*/_jsxDEV(LinkStatus, {\n            color: entry.status.color,\n            fontSize: \"14px\",\n            children: entry.status.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, entry.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PanelBody, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c2 = PanelBody;\nexport default PanelBody;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"PanelBody\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/widgets/Menu/components/PanelBody.tsx"],"names":["React","styled","useLocation","IconModule","Accordion","MenuEntry","LinkLabel","LinkStatus","MenuLink","Icons","Container","div","PanelBody","isPushed","pushNav","isMobile","links","location","handleClick","undefined","map","entry","Icon","icon","iconElement","calloutClass","items","itemsMatchIndex","findIndex","item","href","pathname","initialOpenState","label","status","some","color","text"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { SvgProps } from \"../../../components/Svg\";\r\nimport * as IconModule from \"../icons\";\r\nimport Accordion from \"./Accordion\";\r\nimport { MenuEntry, LinkLabel, LinkStatus } from \"./MenuEntry\";\r\nimport MenuLink from \"./MenuLink\";\r\nimport { PanelProps, PushedProps } from \"../types\";\r\n\r\ninterface Props extends PanelProps, PushedProps {\r\n  isMobile: boolean;\r\n}\r\n\r\nconst Icons = IconModule as unknown as { [key: string]: React.FC<SvgProps> };\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  height: 100%;\r\n`;\r\n\r\nconst PanelBody: React.FC<Props> = ({ isPushed, pushNav, isMobile, links }) => {\r\n  const location = useLocation();\r\n\r\n  // Close the menu when a user clicks a link on mobile\r\n  const handleClick = isMobile ? () => pushNav(false) : undefined;\r\n\r\n  return (\r\n    <Container onMouseEnter={() => {pushNav(true);}} onMouseLeave ={() => {pushNav(false);}}>\r\n      {links.map((entry) => {\r\n        const Icon = Icons[entry.icon];\r\n        const iconElement = <Icon width=\"24px\" mr=\"8px\" />;\r\n        const calloutClass = entry.calloutClass ? entry.calloutClass : undefined;\r\n\r\n        if (entry.items) {\r\n          const itemsMatchIndex = entry.items.findIndex((item) => item.href === location.pathname);\r\n          const initialOpenState = entry.initialOpenState === true ? entry.initialOpenState : itemsMatchIndex >= 0;\r\n\r\n          return (\r\n            <Accordion\r\n              key={entry.label}\r\n              isPushed={isPushed}\r\n              pushNav={pushNav}\r\n              icon={iconElement}\r\n              label={entry.label}\r\n              status={entry.status}\r\n              initialOpenState={initialOpenState}\r\n              className={calloutClass}\r\n              isActive={entry.items.some((item) => item.href === location.pathname)}\r\n            >\r\n              {isPushed &&\r\n                entry.items.map((item) => (\r\n                  <MenuEntry key={item.href} secondary isActive={item.href === location.pathname} onClick={handleClick}>\r\n                    <MenuLink href={item.href}>\r\n                      <LinkLabel isPushed={isPushed}>{item.label}</LinkLabel>\r\n                      {item.status && (\r\n                        <LinkStatus color={item.status.color} fontSize=\"14px\">\r\n                          {item.status.text}\r\n                        </LinkStatus>\r\n                      )}\r\n                    </MenuLink>\r\n                  </MenuEntry>\r\n                ))}\r\n            </Accordion>\r\n          );\r\n        }\r\n        return (\r\n          <MenuEntry key={entry.label} isActive={entry.href === location.pathname} className={calloutClass}>\r\n            <MenuLink href={entry.href} onClick={handleClick}>\r\n              {iconElement}\r\n              <LinkLabel isPushed={isPushed}>{entry.label}</LinkLabel>\r\n              {entry.status && (\r\n                <LinkStatus color={entry.status.color} fontSize=\"14px\">\r\n                  {entry.status.text}\r\n                </LinkStatus>\r\n              )}\r\n            </MenuLink>\r\n          </MenuEntry>\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PanelBody;\r\n"]},"metadata":{},"sourceType":"module"}