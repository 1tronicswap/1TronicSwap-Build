{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { parseUnits } from '@ethersproject/units';\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from 'utils/@sdk';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useENS from 'hooks/ENS/useENS';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useCurrency } from 'hooks/Tokens';\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades';\nimport useParsedQueryString from 'hooks/useParsedQueryString';\nimport { isAddress } from 'utils';\nimport { computeSlippageAdjustedAmounts } from 'utils/prices';\nimport useRefresh from 'hooks/useRefresh';\nimport { useAppDispatch } from '../index';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceLaunchpadState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { fetchLaunchpadsUserDataAsync } from '.';\nexport function useLaunchpadState() {\n  _s();\n\n  return useSelector(state => state.launchpad);\n}\n\n_s(useLaunchpadState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useLaunchpadActionHandlers() {\n  _s2();\n\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n} // try to parse a user entered amount for a given token\n\n_s2(useLaunchpadActionHandlers, \"oIW3xZhV8GZLW5UVB2t9AN9x/ck=\", false, function () {\n  return [useDispatch];\n});\n\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  } // necessary for all paths to return a value\n\n\n  return undefined;\n}\nconst BAD_RECIPIENT_ADDRESSES = ['0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n'0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n'0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D' // v2 router 02\n];\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\n\nfunction involvesAddress(trade, checksummedAddress) {\n  return trade.route.path.some(token => token.address === checksummedAddress) || trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress);\n} // from the current launchpad inputs, compute the best trade and return it.\n\n\nexport function useDerivedLaunchpadInfo() {\n  _s3();\n\n  var _ref, _ref2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useLaunchpadState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  };\n  let inputError;\n\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    var _inputError;\n\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n\n  const formattedTo = isAddress(to);\n\n  if (!to || !formattedTo) {\n    var _inputError3;\n\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : 'Enter a recipient';\n  } else if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 || bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo) || bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo)) {\n    var _inputError4;\n\n    inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : 'Invalid recipient';\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage); // compare input balance to max input based on version\n\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`;\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError\n  };\n}\n\n_s3(useDerivedLaunchpadInfo, \"9/PBVVU9zu09Koz9NYSrkKwWq6w=\", false, function () {\n  return [useActiveWeb3React, useLaunchpadState, useCurrency, useCurrency, useENS, useCurrencyBalances, useTradeExactIn, useTradeExactOut, useUserSlippageTolerance];\n});\n\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _BNB;\n\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB';\n    if (valid === false) return 'BNB';\n  }\n\n  return (_BNB = 'BNB') !== null && _BNB !== void 0 ? _BNB : '';\n}\n\nfunction parseTokenAmountURLParameter(urlParam) {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\n\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\n\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToLaunchpadState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n} // updates the launchpad state to use the defaults for a given network\n\nexport function useDefaultsFromURLSearch() {\n  _s4();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToLaunchpadState(parsedQs);\n    dispatch(replaceLaunchpadState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: null\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}\n\n_s4(useDefaultsFromURLSearch, \"2CnDlZ82rqfhhBu4OPGgJbxv0gQ=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useParsedQueryString];\n});\n\nexport const useLaunchpads = account => {\n  _s5();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchLaunchpadsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const {\n    launchpads,\n    userDataLoaded\n  } = useSelector(state => ({\n    launchpads: state.launchpad.data,\n    userDataLoaded: state.launchpad.userDataLoaded\n  }));\n  return {\n    launchpads,\n    userDataLoaded\n  };\n};\n\n_s5(useLaunchpads, \"CqyytkeyWROD8PUkzdiCvoibFK4=\", false, function () {\n  return [useRefresh, useAppDispatch, useSelector];\n});","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/state/launchpad/hooks.ts"],"names":["parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useENS","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","computeSlippageAdjustedAmounts","useRefresh","useAppDispatch","useCurrencyBalances","Field","replaceLaunchpadState","selectCurrency","setRecipient","switchCurrencies","typeInput","useUserSlippageTolerance","fetchLaunchpadsUserDataAsync","useLaunchpadState","state","launchpad","useLaunchpadActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedLaunchpadInfo","account","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","inputError","formattedTo","indexOf","allowedSlippage","slippageAdjustedAmounts","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToLaunchpadState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","result","setResult","parsed","useLaunchpads","fastRefresh","launchpads","userDataLoaded","data"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAAmBC,cAAnB,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,KAAhD,EAAuDC,WAAvD,QAAiF,YAAjF;AAEA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,cAAlD;AACA,OAAOC,oBAAP,MAAiC,4BAAjC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,8BAAT,QAA+C,cAA/C;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAgCC,cAAhC,QAAsD,UAAtD;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA,SAASC,KAAT,EAAgBC,qBAAhB,EAAuCC,cAAvC,EAAuDC,YAAvD,EAAqEC,gBAArE,EAAuFC,SAAvF,QAAwG,WAAxG;AAEA,SAASC,wBAAT,QAAyC,eAAzC;AACA,SAASC,4BAAT,QAA6C,GAA7C;AAEA,OAAO,SAASC,iBAAT,GAAoD;AAAA;;AACzD,SAAOpB,WAAW,CAAmCqB,KAAD,IAAWA,KAAK,CAACC,SAAnD,CAAlB;AACD;;GAFeF,iB;UACPpB,W;;;AAGT,OAAO,SAASuB,0BAAT,GAKL;AAAA;;AACA,QAAMC,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAM0B,mBAAmB,GAAG7B,WAAW,CACrC,CAAC8B,KAAD,EAAeC,QAAf,KAAsC;AACpCH,IAAAA,QAAQ,CACNV,cAAc,CAAC;AACbY,MAAAA,KADa;AAEbE,MAAAA,UAAU,EAAED,QAAQ,YAAYjC,KAApB,GAA4BiC,QAAQ,CAACE,OAArC,GAA+CF,QAAQ,KAAKnC,KAAb,GAAqB,KAArB,GAA6B;AAF3E,KAAD,CADR,CAAR;AAMD,GARoC,EASrC,CAACgC,QAAD,CATqC,CAAvC;AAYA,QAAMM,cAAc,GAAGlC,WAAW,CAAC,MAAM;AACvC4B,IAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACD,GAFiC,EAE/B,CAACQ,QAAD,CAF+B,CAAlC;AAIA,QAAMO,WAAW,GAAGnC,WAAW,CAC7B,CAAC8B,KAAD,EAAeM,UAAf,KAAsC;AACpCR,IAAAA,QAAQ,CAACP,SAAS,CAAC;AAAES,MAAAA,KAAF;AAASM,MAAAA;AAAT,KAAD,CAAV,CAAR;AACD,GAH4B,EAI7B,CAACR,QAAD,CAJ6B,CAA/B;AAOA,QAAMS,iBAAiB,GAAGrC,WAAW,CAClCsC,SAAD,IAA8B;AAC5BV,IAAAA,QAAQ,CAACT,YAAY,CAAC;AAAEmB,MAAAA;AAAF,KAAD,CAAb,CAAR;AACD,GAHkC,EAInC,CAACV,QAAD,CAJmC,CAArC;AAOA,SAAO;AACLM,IAAAA,cADK;AAELL,IAAAA,mBAFK;AAGLM,IAAAA,WAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,C,CAED;;IA7CgBV,0B;UAMGxB,W;;;AAwCnB,OAAO,SAASoC,cAAT,CAAwBC,KAAxB,EAAwCT,QAAxC,EAAyF;AAC9F,MAAI,CAACS,KAAD,IAAU,CAACT,QAAf,EAAyB;AACvB,WAAOU,SAAP;AACD;;AACD,MAAI;AACF,UAAMC,gBAAgB,GAAGhD,UAAU,CAAC8C,KAAD,EAAQT,QAAQ,CAACY,QAAjB,CAAV,CAAqCC,QAArC,EAAzB;;AACA,QAAIF,gBAAgB,KAAK,GAAzB,EAA8B;AAC5B,aAAOX,QAAQ,YAAYjC,KAApB,GACH,IAAIC,WAAJ,CAAgBgC,QAAhB,EAA0BlC,IAAI,CAACgD,MAAL,CAAYH,gBAAZ,CAA1B,CADG,GAEH/C,cAAc,CAACmD,KAAf,CAAqBjD,IAAI,CAACgD,MAAL,CAAYH,gBAAZ,CAArB,CAFJ;AAGD;AACF,GAPD,CAOE,OAAOK,KAAP,EAAc;AACd;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAe,kCAAiCT,KAAM,GAAtD,EAA0DO,KAA1D;AACD,GAd6F,CAe9F;;;AACA,SAAON,SAAP;AACD;AAED,MAAMS,uBAAiC,GAAG,CACxC,4CADwC,EACM;AAC9C,4CAFwC,EAEM;AAC9C,4CAHwC,CAGM;AAHN,CAA1C;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAuCC,kBAAvC,EAA4E;AAC1E,SACED,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBC,IAAjB,CAAuBC,KAAD,IAAWA,KAAK,CAACxB,OAAN,KAAkBoB,kBAAnD,KACAD,KAAK,CAACE,KAAN,CAAYI,KAAZ,CAAkBF,IAAlB,CAAwBG,IAAD,IAAUA,IAAI,CAACC,cAAL,CAAoB3B,OAApB,KAAgCoB,kBAAjE,CAFF;AAID,C,CAED;;;AACA,OAAO,SAASQ,uBAAT,GAML;AAAA;;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcxD,kBAAkB,EAAtC;AAEA,QAAM;AACJyD,IAAAA,gBADI;AAEJ3B,IAAAA,UAFI;AAGJ,KAACpB,KAAK,CAACgD,KAAP,GAAe;AAAEhC,MAAAA,UAAU,EAAEiC;AAAd,KAHX;AAIJ,KAACjD,KAAK,CAACkD,MAAP,GAAgB;AAAElC,MAAAA,UAAU,EAAEmC;AAAd,KAJZ;AAKJ7B,IAAAA;AALI,MAMFd,iBAAiB,EANrB;AAQA,QAAM4C,aAAa,GAAG7D,WAAW,CAAC0D,eAAD,CAAjC;AACA,QAAMI,cAAc,GAAG9D,WAAW,CAAC4D,gBAAD,CAAlC;AACA,QAAMG,eAAe,GAAGjE,MAAM,CAACiC,SAAD,aAACA,SAAD,cAACA,SAAD,GAAcG,SAAd,CAA9B;AACA,QAAM8B,EAAiB,WAAIjC,SAAS,KAAK,IAAd,GAAqBwB,OAArB,GAA+BQ,eAAe,CAACrC,OAAnD,uCAA+D,IAAtF;AAEA,QAAMuC,qBAAqB,GAAGzD,mBAAmB,CAAC+C,OAAD,aAACA,OAAD,cAACA,OAAD,GAAYrB,SAAZ,EAAuB,CACtE2B,aADsE,aACtEA,aADsE,cACtEA,aADsE,GACrD3B,SADqD,EAEtE4B,cAFsE,aAEtEA,cAFsE,cAEtEA,cAFsE,GAEpD5B,SAFoD,CAAvB,CAAjD;AAKA,QAAMgC,SAAkB,GAAGV,gBAAgB,KAAK/C,KAAK,CAACgD,KAAtD;AACA,QAAMU,YAAY,GAAGnC,cAAc,CAACH,UAAD,WAAcqC,SAAS,GAAGL,aAAH,GAAmBC,cAA1C,yCAA6D5B,SAA7D,CAAnC;AAEA,QAAMkC,gBAAgB,GAAGnE,eAAe,CAACiE,SAAS,GAAGC,YAAH,GAAkBjC,SAA5B,EAAuC4B,cAAvC,aAAuCA,cAAvC,cAAuCA,cAAvC,GAAyD5B,SAAzD,CAAxC;AACA,QAAMmC,iBAAiB,GAAGnE,gBAAgB,CAAC2D,aAAD,aAACA,aAAD,cAACA,aAAD,GAAkB3B,SAAlB,EAA6B,CAACgC,SAAD,GAAaC,YAAb,GAA4BjC,SAAzD,CAA1C;AAEA,QAAMoC,OAAO,GAAGJ,SAAS,GAAGE,gBAAH,GAAsBC,iBAA/C;AAEA,QAAME,gBAAgB,GAAG;AACvB,KAAC9D,KAAK,CAACgD,KAAP,GAAeQ,qBAAqB,CAAC,CAAD,CADb;AAEvB,KAACxD,KAAK,CAACkD,MAAP,GAAgBM,qBAAqB,CAAC,CAAD;AAFd,GAAzB;AAKA,QAAMO,UAA2C,GAAG;AAClD,KAAC/D,KAAK,CAACgD,KAAP,GAAeI,aAAf,aAAeA,aAAf,cAAeA,aAAf,GAAgC3B,SADkB;AAElD,KAACzB,KAAK,CAACkD,MAAP,GAAgBG,cAAhB,aAAgBA,cAAhB,cAAgBA,cAAhB,GAAkC5B;AAFgB,GAApD;AAKA,MAAIuC,UAAJ;;AACA,MAAI,CAAClB,OAAL,EAAc;AACZkB,IAAAA,UAAU,GAAG,gBAAb;AACD;;AAED,MAAI,CAACN,YAAL,EAAmB;AAAA;;AACjBM,IAAAA,UAAU,kBAAGA,UAAH,qDAAiB,iBAA3B;AACD;;AAED,MAAI,CAACD,UAAU,CAAC/D,KAAK,CAACgD,KAAP,CAAX,IAA4B,CAACe,UAAU,CAAC/D,KAAK,CAACkD,MAAP,CAA3C,EAA2D;AAAA;;AACzDc,IAAAA,UAAU,mBAAGA,UAAH,uDAAiB,gBAA3B;AACD;;AAED,QAAMC,WAAW,GAAGtE,SAAS,CAAC4D,EAAD,CAA7B;;AACA,MAAI,CAACA,EAAD,IAAO,CAACU,WAAZ,EAAyB;AAAA;;AACvBD,IAAAA,UAAU,mBAAGA,UAAH,uDAAiB,mBAA3B;AACD,GAFD,MAEO,IACL9B,uBAAuB,CAACgC,OAAxB,CAAgCD,WAAhC,MAAiD,CAAC,CAAlD,IACCN,gBAAgB,IAAIxB,eAAe,CAACwB,gBAAD,EAAmBM,WAAnB,CADpC,IAECL,iBAAiB,IAAIzB,eAAe,CAACyB,iBAAD,EAAoBK,WAApB,CAHhC,EAIL;AAAA;;AACAD,IAAAA,UAAU,mBAAGA,UAAH,uDAAiB,mBAA3B;AACD;;AAED,QAAM,CAACG,eAAD,IAAoB7D,wBAAwB,EAAlD;AAEA,QAAM8D,uBAAuB,GAAGP,OAAO,IAAIM,eAAX,IAA8BvE,8BAA8B,CAACiE,OAAD,EAAUM,eAAV,CAA5F,CAjEA,CAmEA;;AACA,QAAM,CAACE,SAAD,EAAYC,QAAZ,IAAwB,CAC5BR,gBAAgB,CAAC9D,KAAK,CAACgD,KAAP,CADY,EAE5BoB,uBAAuB,GAAGA,uBAAuB,CAACpE,KAAK,CAACgD,KAAP,CAA1B,GAA0C,IAFrC,CAA9B;;AAKA,MAAIqB,SAAS,IAAIC,QAAb,IAAyBD,SAAS,CAACE,QAAV,CAAmBD,QAAnB,CAA7B,EAA2D;AACzDN,IAAAA,UAAU,GAAI,gBAAeM,QAAQ,CAACvD,QAAT,CAAkByD,MAAO,UAAtD;AACD;;AAED,SAAO;AACLT,IAAAA,UADK;AAELD,IAAAA,gBAFK;AAGLJ,IAAAA,YAHK;AAILG,IAAAA,OAAO,EAAEA,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAapC,SAJf;AAKLuC,IAAAA;AALK,GAAP;AAOD;;IA1FenB,uB;UAOMvD,kB,EAQhBkB,iB,EAEkBjB,W,EACCA,W,EACCF,M,EAGMU,mB,EAQLP,e,EACCC,gB,EAsCAa,wB;;;AAuB5B,SAASmE,6BAAT,CAAuCC,QAAvC,EAA8D;AAAA;;AAC5D,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAMC,KAAK,GAAGhF,SAAS,CAAC+E,QAAD,CAAvB;AACA,QAAIC,KAAJ,EAAW,OAAOA,KAAP;AACX,QAAID,QAAQ,CAACE,WAAT,OAA2B,KAA/B,EAAsC,OAAO,KAAP;AACtC,QAAID,KAAK,KAAK,KAAd,EAAqB,OAAO,KAAP;AACtB;;AACD,iBAAO,KAAP,uCAAgB,EAAhB;AACD;;AAED,SAASE,4BAAT,CAAsCH,QAAtC,EAA6D;AAC3D;AACA,SAAO,OAAOA,QAAP,KAAoB,QAApB,IAAgC,CAACI,KAAK,CAACC,UAAU,CAACL,QAAD,CAAX,CAAtC,GAA+DA,QAA/D,GAA0E,EAAjF;AACD;;AAED,SAASM,iCAAT,CAA2CN,QAA3C,EAAiE;AAC/D,SAAO,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACO,WAAT,OAA2B,QAA3D,GAAsEjF,KAAK,CAACkD,MAA5E,GAAqFlD,KAAK,CAACgD,KAAlG;AACD;;AAED,MAAMkC,cAAc,GAAG,oFAAvB;AACA,MAAMC,aAAa,GAAG,qBAAtB;;AACA,SAASC,kBAAT,CAA4B9D,SAA5B,EAA2D;AACzD,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC,OAAO,IAAP;AACnC,QAAML,OAAO,GAAGtB,SAAS,CAAC2B,SAAD,CAAzB;AACA,MAAIL,OAAJ,EAAa,OAAOA,OAAP;AACb,MAAIiE,cAAc,CAACG,IAAf,CAAoB/D,SAApB,CAAJ,EAAoC,OAAOA,SAAP;AACpC,MAAI6D,aAAa,CAACE,IAAd,CAAmB/D,SAAnB,CAAJ,EAAmC,OAAOA,SAAP;AACnC,SAAO,IAAP;AACD;;AAED,OAAO,SAASgE,+BAAT,CAAyCC,QAAzC,EAA6E;AAClF,MAAInC,aAAa,GAAGqB,6BAA6B,CAACc,QAAQ,CAACnC,aAAV,CAAjD;AACA,MAAIC,cAAc,GAAGoB,6BAA6B,CAACc,QAAQ,CAAClC,cAAV,CAAlD;;AACA,MAAID,aAAa,KAAKC,cAAtB,EAAsC;AACpC,QAAI,OAAOkC,QAAQ,CAAClC,cAAhB,KAAmC,QAAvC,EAAiD;AAC/CD,MAAAA,aAAa,GAAG,EAAhB;AACD,KAFD,MAEO;AACLC,MAAAA,cAAc,GAAG,EAAjB;AACD;AACF;;AAED,QAAM/B,SAAS,GAAG8D,kBAAkB,CAACG,QAAQ,CAACjE,SAAV,CAApC;AAEA,SAAO;AACL,KAACtB,KAAK,CAACgD,KAAP,GAAe;AACbhC,MAAAA,UAAU,EAAEoC;AADC,KADV;AAIL,KAACpD,KAAK,CAACkD,MAAP,GAAgB;AACdlC,MAAAA,UAAU,EAAEqC;AADE,KAJX;AAOLjC,IAAAA,UAAU,EAAEyD,4BAA4B,CAACU,QAAQ,CAACC,WAAV,CAPnC;AAQLzC,IAAAA,gBAAgB,EAAEiC,iCAAiC,CAACO,QAAQ,CAACE,UAAV,CAR9C;AASLnE,IAAAA;AATK,GAAP;AAWD,C,CAED;;AACA,OAAO,SAASoE,wBAAT,GAEO;AAAA;;AACZ,QAAM;AAAEC,IAAAA;AAAF,MAAcrG,kBAAkB,EAAtC;AACA,QAAMsB,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAMoG,QAAQ,GAAG7F,oBAAoB,EAArC;AACA,QAAM,CAACkG,MAAD,EAASC,SAAT,IAAsB3G,QAAQ,EAApC;AAIAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC0G,OAAL,EAAc;AACd,UAAMG,MAAM,GAAGR,+BAA+B,CAACC,QAAD,CAA9C;AAEA3E,IAAAA,QAAQ,CACNX,qBAAqB,CAAC;AACpBmB,MAAAA,UAAU,EAAE0E,MAAM,CAAC1E,UADC;AAEpBN,MAAAA,KAAK,EAAEgF,MAAM,CAAC/C,gBAFM;AAGpBE,MAAAA,eAAe,EAAE6C,MAAM,CAAC9F,KAAK,CAACgD,KAAP,CAAN,CAAoBhC,UAHjB;AAIpBmC,MAAAA,gBAAgB,EAAE2C,MAAM,CAAC9F,KAAK,CAACkD,MAAP,CAAN,CAAqBlC,UAJnB;AAKpBM,MAAAA,SAAS,EAAE;AALS,KAAD,CADf,CAAR;AAUAuE,IAAAA,SAAS,CAAC;AAAE5C,MAAAA,eAAe,EAAE6C,MAAM,CAAC9F,KAAK,CAACgD,KAAP,CAAN,CAAoBhC,UAAvC;AAAmDmC,MAAAA,gBAAgB,EAAE2C,MAAM,CAAC9F,KAAK,CAACkD,MAAP,CAAN,CAAqBlC;AAA1F,KAAD,CAAT,CAdc,CAed;AACD,GAhBQ,EAgBN,CAACJ,QAAD,EAAW+E,OAAX,CAhBM,CAAT;AAkBA,SAAOC,MAAP;AACD;;IA7BeF,wB;UAGMpG,kB,EACHH,W,EACAO,oB;;;AA0BnB,OAAO,MAAMqG,aAAa,GAAIjD,OAAD,IAAmE;AAAA;;AAC9F,QAAM;AAAEkD,IAAAA;AAAF,MAAkBnG,UAAU,EAAlC;AACA,QAAMe,QAAQ,GAAGd,cAAc,EAA/B;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6D,OAAJ,EAAa;AACXlC,MAAAA,QAAQ,CAACL,4BAA4B,CAACuC,OAAD,CAA7B,CAAR;AACD;AACF,GAJQ,EAIN,CAACA,OAAD,EAAUlC,QAAV,EAAoBoF,WAApB,CAJM,CAAT;AAOA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAiC9G,WAAW,CAAEqB,KAAD,KAAmB;AACpEwF,IAAAA,UAAU,EAAExF,KAAK,CAACC,SAAN,CAAgByF,IADwC;AAEpED,IAAAA,cAAc,EAAEzF,KAAK,CAACC,SAAN,CAAgBwF;AAFoC,GAAnB,CAAD,CAAlD;AAIA,SAAO;AAAED,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAP;AACD,CAfM;;IAAMH,a;UACalG,U,EACPC,c,EAQsBV,W","sourcesContent":["import { parseUnits } from '@ethersproject/units'\r\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from 'utils/@sdk'\r\nimport { ParsedQs } from 'qs'\r\nimport { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useENS from 'hooks/ENS/useENS'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport { isAddress } from 'utils'\r\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\r\nimport { Launchpad, State } from 'state/types'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { AppDispatch, AppState, useAppDispatch } from '../index'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, replaceLaunchpadState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\nimport { LaunchpadState } from './reducer'\r\nimport { useUserSlippageTolerance } from '../user/hooks'\r\nimport { fetchLaunchpadsUserDataAsync } from '.'\r\n\r\nexport function useLaunchpadState(): AppState['launchpad'] {\r\n  return useSelector<AppState, AppState['launchpad']>((state) => state.launchpad)\r\n}\r\n\r\nexport function useLaunchpadActionHandlers(): {\r\n  onCurrencySelection: (field: Field, currency: Currency) => void\r\n  onSwitchTokens: () => void\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n  onChangeRecipient: (recipient: string | null) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const onCurrencySelection = useCallback(\r\n    (field: Field, currency: Currency) => {\r\n      dispatch(\r\n        selectCurrency({\r\n          field,\r\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : '',\r\n        }),\r\n      )\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const onSwitchTokens = useCallback(() => {\r\n    dispatch(switchCurrencies())\r\n  }, [dispatch])\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const onChangeRecipient = useCallback(\r\n    (recipient: string | null) => {\r\n      dispatch(setRecipient({ recipient }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onSwitchTokens,\r\n    onCurrencySelection,\r\n    onUserInput,\r\n    onChangeRecipient,\r\n  }\r\n}\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  if (!value || !currency) {\r\n    return undefined\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\r\n    if (typedValueParsed !== '0') {\r\n      return currency instanceof Token\r\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\r\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined\r\n}\r\n\r\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\r\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\r\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\r\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\r\n]\r\n\r\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\r\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\r\n  return (\r\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\r\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\r\n  )\r\n}\r\n\r\n// from the current launchpad inputs, compute the best trade and return it.\r\nexport function useDerivedLaunchpadInfo(): {\r\n  currencies: { [field in Field]?: Currency }\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmount: CurrencyAmount | undefined\r\n  v2Trade: Trade | undefined\r\n  inputError?: string\r\n} {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const {\r\n    independentField,\r\n    typedValue,\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n    recipient,\r\n  } = useLaunchpadState()\r\n\r\n  const inputCurrency = useCurrency(inputCurrencyId)\r\n  const outputCurrency = useCurrency(outputCurrencyId)\r\n  const recipientLookup = useENS(recipient ?? undefined)\r\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\r\n\r\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\r\n    inputCurrency ?? undefined,\r\n    outputCurrency ?? undefined,\r\n  ])\r\n\r\n  const isExactIn: boolean = independentField === Field.INPUT\r\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\r\n\r\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\r\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\r\n\r\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\r\n\r\n  const currencyBalances = {\r\n    [Field.INPUT]: relevantTokenBalances[0],\r\n    [Field.OUTPUT]: relevantTokenBalances[1],\r\n  }\r\n\r\n  const currencies: { [field in Field]?: Currency } = {\r\n    [Field.INPUT]: inputCurrency ?? undefined,\r\n    [Field.OUTPUT]: outputCurrency ?? undefined,\r\n  }\r\n\r\n  let inputError: string | undefined\r\n  if (!account) {\r\n    inputError = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmount) {\r\n    inputError = inputError ?? 'Enter an amount'\r\n  }\r\n\r\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\r\n    inputError = inputError ?? 'Select a token'\r\n  }\r\n\r\n  const formattedTo = isAddress(to)\r\n  if (!to || !formattedTo) {\r\n    inputError = inputError ?? 'Enter a recipient'\r\n  } else if (\r\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\r\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\r\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\r\n  ) {\r\n    inputError = inputError ?? 'Invalid recipient'\r\n  }\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\r\n\r\n  // compare input balance to max input based on version\r\n  const [balanceIn, amountIn] = [\r\n    currencyBalances[Field.INPUT],\r\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\r\n  ]\r\n\r\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\r\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`\r\n  }\r\n\r\n  return {\r\n    currencies,\r\n    currencyBalances,\r\n    parsedAmount,\r\n    v2Trade: v2Trade ?? undefined,\r\n    inputError,\r\n  }\r\n}\r\n\r\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\r\n  if (typeof urlParam === 'string') {\r\n    const valid = isAddress(urlParam)\r\n    if (valid) return valid\r\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\r\n    if (valid === false) return 'BNB'\r\n  }\r\n  return 'BNB' ?? ''\r\n}\r\n\r\nfunction parseTokenAmountURLParameter(urlParam: any): string {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\r\n}\r\n\r\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\r\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\r\n}\r\n\r\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nfunction validatedRecipient(recipient: any): string | null {\r\n  if (typeof recipient !== 'string') return null\r\n  const address = isAddress(recipient)\r\n  if (address) return address\r\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\r\n  if (ADDRESS_REGEX.test(recipient)) return recipient\r\n  return null\r\n}\r\n\r\nexport function queryParametersToLaunchpadState(parsedQs: ParsedQs): LaunchpadState {\r\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\r\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\r\n  if (inputCurrency === outputCurrency) {\r\n    if (typeof parsedQs.outputCurrency === 'string') {\r\n      inputCurrency = ''\r\n    } else {\r\n      outputCurrency = ''\r\n    }\r\n  }\r\n\r\n  const recipient = validatedRecipient(parsedQs.recipient)\r\n\r\n  return {\r\n    [Field.INPUT]: {\r\n      currencyId: inputCurrency,\r\n    },\r\n    [Field.OUTPUT]: {\r\n      currencyId: outputCurrency,\r\n    },\r\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\r\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\r\n    recipient,\r\n  }\r\n}\r\n\r\n// updates the launchpad state to use the defaults for a given network\r\nexport function useDefaultsFromURLSearch():\r\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\r\n  | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const parsedQs = useParsedQueryString()\r\n  const [result, setResult] = useState<\r\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\r\n  >()\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return\r\n    const parsed = queryParametersToLaunchpadState(parsedQs)\r\n\r\n    dispatch(\r\n      replaceLaunchpadState({\r\n        typedValue: parsed.typedValue,\r\n        field: parsed.independentField,\r\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\r\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\r\n        recipient: null,\r\n      }),\r\n    )\r\n\r\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, chainId])\r\n\r\n  return result\r\n}\r\n\r\nexport const useLaunchpads = (account): { launchpads: Launchpad[]; userDataLoaded: boolean } => {  \r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchLaunchpadsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n\r\n  const { launchpads, userDataLoaded } = useSelector((state: State) => ({\r\n    launchpads: state.launchpad.data,\r\n    userDataLoaded: state.launchpad.userDataLoaded,\r\n  }))\r\n  return { launchpads, userDataLoaded }\r\n}"]},"metadata":{},"sourceType":"module"}