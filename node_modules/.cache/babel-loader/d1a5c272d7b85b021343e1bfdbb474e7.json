{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\views\\\\Pools\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Heading, Flex, Text } from 'components/_uikit';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport { useTranslation } from 'contexts/Localization';\nimport usePersistState from 'hooks/usePersistState';\nimport { useFetchPublicPoolsData, usePools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks';\nimport { usePollFarmsData } from 'state/farms/hooks';\nimport { latinise } from 'utils/latinise';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport PoolCard from './components/PoolCard';\nimport CakeVaultCard from './components/CakeVaultCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport BountyCard from './components/BountyCard';\nimport HelpButton from './components/HelpButton';\nimport PoolsTable from './components/PoolsTable/PoolsTable';\nimport { ViewMode } from './components/ToggleView/ToggleView';\nimport { getAprData, getCakeVaultEarnings } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`;\n_c = CardLayout;\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.mediaQueries.md;\n}} {\n    flex-direction: row;\n  }\n`;\n_c2 = PoolControls;\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`;\n_c3 = SearchSortContainer;\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`;\n_c4 = ControlStretch;\nconst NUMBER_OF_POOLS_VISIBLE = 12;\n\nconst Pools = () => {\n  _s();\n\n  const location = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pools: poolsWithoutAutoVault,\n    userDataLoaded\n  } = usePools(account);\n  const [stakedOnly, setStakedOnly] = usePersistState(false, {\n    localStorageKey: 'pancake_pool_staked'\n  });\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const loadMoreRef = useRef(null);\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, {\n    localStorageKey: 'pancake_farm_view'\n  });\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortOption, setSortOption] = useState('hot');\n  const {\n    userData: {\n      cakeAtLastUserAction,\n      userShares\n    },\n    fees: {\n      performanceFee\n    },\n    pricePerFullShare,\n    totalCakeInVault\n  } = useCakeVault();\n  const accountHasVaultShares = userShares && userShares.gt(0);\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find(pool => pool.sousId === 0);\n    const cakeAutoVault = { ...cakePool,\n      isAutoVault: true\n    };\n    return [cakeAutoVault, ...poolsWithoutAutoVault];\n  }, [poolsWithoutAutoVault]); // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, pool => pool.isFinished), [pools]);\n  const stakedOnlyFinishedPools = useMemo(() => finishedPools.filter(pool => {\n    if (pool.isAutoVault) {\n      return accountHasVaultShares;\n    }\n\n    return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0);\n  }), [finishedPools, accountHasVaultShares]);\n  const stakedOnlyOpenPools = useMemo(() => openPools.filter(pool => {\n    if (pool.isAutoVault) {\n      return accountHasVaultShares;\n    }\n\n    return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0);\n  }), [openPools, accountHasVaultShares]);\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0;\n  usePollFarmsData();\n  useFetchCakeVault();\n  useFetchPublicPoolsData();\n  useEffect(() => {\n    const showMorePools = entries => {\n      const [entry] = entries;\n\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible(poolsCurrentlyVisible => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE);\n      }\n    };\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [observerIsSet]);\n  const showFinishedPools = location.pathname.includes('history');\n\n  const handleChangeSearchQuery = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  const sortPools = poolsToSort => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(poolsToSort, pool => pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0, 'desc');\n\n      case 'earned':\n        return orderBy(poolsToSort, pool => {\n          if (!pool.userData || !pool.earningTokenPrice) {\n            return 0;\n          }\n\n          return pool.isAutoVault ? getCakeVaultEarnings(account, cakeAtLastUserAction, userShares, pricePerFullShare, pool.earningTokenPrice).autoUsdToDisplay : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber();\n        }, 'desc');\n\n      case 'totalStaked':\n        return orderBy(poolsToSort, pool => pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber(), 'desc');\n\n      default:\n        return poolsToSort;\n    }\n  };\n\n  const poolsToShow = () => {\n    let chosenPools = [];\n\n    if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools;\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools;\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase());\n      chosenPools = chosenPools.filter(pool => latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery));\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible);\n  };\n\n  const cardLayout = /*#__PURE__*/_jsxDEV(CardLayout, {\n    children: poolsToShow().map(pool => pool.isAutoVault ? /*#__PURE__*/_jsxDEV(CakeVaultCard, {\n      pool: pool,\n      showStakedOnly: stakedOnly\n    }, \"auto-cake\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(PoolCard, {\n      pool: pool,\n      account: account\n    }, pool.sousId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n\n  const tableLayout = /*#__PURE__*/_jsxDEV(PoolsTable, {\n    pools: poolsToShow(),\n    account: account,\n    userDataLoaded: userDataLoaded\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 23\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        flexDirection: ['column', null, null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          flexDirection: \"column\",\n          mr: ['8px', 0],\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            as: \"h1\",\n            scale: \"xl\",\n            color: \"primary\",\n            mb: \"24px\",\n            children: t('Pools')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            color: \"text\",\n            fontWeight: \"400\",\n            fontSize: \"24px\",\n            lineHeight: \"24px\",\n            children: [t('Just stake some tokens to earn.'), t('High APR, low risk.')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          height: \"fit-content\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          mt: ['24px', null, '0'],\n          children: [/*#__PURE__*/_jsxDEV(HelpButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BountyCard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(PoolControls, {\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(PoolTabButtons, {\n          stakedOnly: stakedOnly,\n          setStakedOnly: setStakedOnly,\n          hasStakeInFinishedPools: hasStakeInFinishedPools,\n          viewMode: viewMode,\n          setViewMode: setViewMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchSortContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            flexDirection: \"column\",\n            width: \"50%\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"12px\",\n              bold: true,\n              color: \"textSubtle\",\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ControlStretch, {\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                options: [{\n                  label: t('Hot'),\n                  value: 'hot'\n                }, {\n                  label: t('APR'),\n                  value: 'apr'\n                }, {\n                  label: t('Earned'),\n                  value: 'earned'\n                }, {\n                  label: t('Total staked'),\n                  value: 'totalStaked'\n                }],\n                onChange: handleSortOptionChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            flexDirection: \"column\",\n            width: \"50%\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"12px\",\n              bold: true,\n              color: \"textSubtle\",\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ControlStretch, {\n              children: /*#__PURE__*/_jsxDEV(SearchInput, {\n                onChange: handleChangeSearchQuery,\n                placeholder: \"Search Pools\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), showFinishedPools && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"failure\",\n        pb: \"32px\",\n        children: t('These pools are no longer distributing rewards. Please unstake your tokens.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), viewMode === ViewMode.CARD ? cardLayout : tableLayout, /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pools, \"ocs040OyYDueHxDHXdeEe+Pl/2k=\", false, function () {\n  return [useLocation, useTranslation, useWeb3React, usePools, usePersistState, usePersistState, useCakeVault, usePollFarmsData, useFetchCakeVault, useFetchPublicPoolsData];\n});\n\n_c5 = Pools;\nexport default Pools;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CardLayout\");\n$RefreshReg$(_c2, \"PoolControls\");\n$RefreshReg$(_c3, \"SearchSortContainer\");\n$RefreshReg$(_c4, \"ControlStretch\");\n$RefreshReg$(_c5, \"Pools\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/views/Pools/index.tsx"],"names":["React","useEffect","useMemo","useRef","useState","useLocation","styled","BigNumber","useWeb3React","Heading","Flex","Text","orderBy","partition","useTranslation","usePersistState","useFetchPublicPoolsData","usePools","useFetchCakeVault","useCakeVault","usePollFarmsData","latinise","FlexLayout","Page","PageHeader","SearchInput","Select","PoolCard","CakeVaultCard","PoolTabButtons","BountyCard","HelpButton","PoolsTable","ViewMode","getAprData","getCakeVaultEarnings","CardLayout","PoolControls","theme","mediaQueries","md","SearchSortContainer","ControlStretch","NUMBER_OF_POOLS_VISIBLE","Pools","location","t","account","pools","poolsWithoutAutoVault","userDataLoaded","stakedOnly","setStakedOnly","localStorageKey","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","viewMode","setViewMode","TABLE","searchQuery","setSearchQuery","sortOption","setSortOption","userData","cakeAtLastUserAction","userShares","fees","performanceFee","pricePerFullShare","totalCakeInVault","accountHasVaultShares","gt","performanceFeeAsDecimal","cakePool","find","pool","sousId","cakeAutoVault","isAutoVault","finishedPools","openPools","isFinished","stakedOnlyFinishedPools","filter","stakedBalance","isGreaterThan","stakedOnlyOpenPools","hasStakeInFinishedPools","length","showMorePools","entries","entry","isIntersecting","poolsCurrentlyVisible","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","current","showFinishedPools","pathname","includes","handleChangeSearchQuery","event","target","value","handleSortOptionChange","option","sortPools","poolsToSort","apr","earningTokenPrice","autoUsdToDisplay","pendingReward","times","toNumber","totalStaked","poolsToShow","chosenPools","lowercaseQuery","toLowerCase","earningToken","symbol","slice","cardLayout","map","tableLayout","label","CARD"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Text } from 'components/_uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFetchPublicPoolsData, usePools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks'\r\nimport { usePollFarmsData } from 'state/farms/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport HelpButton from './components/HelpButton'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n`\r\n\r\nconst PoolControls = styled(Flex)`\r\n  flex-direction: column;\r\n  margin-bottom: 24px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst SearchSortContainer = styled(Flex)`\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Pools: React.FC = () => {\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\r\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\r\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n      finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  const poolsToShow = () => {\r\n    let chosenPools = []\r\n    if (showFinishedPools) {\r\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n    } else {\r\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n    }\r\n\r\n    if (searchQuery) {\r\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n      chosenPools = chosenPools.filter((pool) =>\r\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n      )\r\n    }\r\n\r\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  }\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {poolsToShow().map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\r\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\r\n            <Heading as=\"h1\" scale=\"xl\" color=\"primary\" mb=\"24px\">\r\n              {t('Pools')}\r\n            </Heading>\r\n            <Text color=\"text\" fontWeight=\"400\" fontSize=\"24px\" lineHeight=\"24px\">\r\n            {t('Just stake some tokens to earn.')}{t('High APR, low risk.')}\r\n            </Text>\r\n          </Flex>\r\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\r\n            <HelpButton />\r\n            <BountyCard />\r\n          </Flex>\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        <PoolControls justifyContent=\"space-between\">\r\n          <PoolTabButtons\r\n            stakedOnly={stakedOnly}\r\n            setStakedOnly={setStakedOnly}\r\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\r\n            viewMode={viewMode}\r\n            setViewMode={setViewMode}\r\n          />\r\n          <SearchSortContainer>\r\n            <Flex flexDirection=\"column\" width=\"50%\">\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Sort by')}\r\n              </Text>\r\n              <ControlStretch>\r\n                <Select\r\n                  options={[\r\n                    {\r\n                      label: t('Hot'),\r\n                      value: 'hot',\r\n                    },\r\n                    {\r\n                      label: t('APR'),\r\n                      value: 'apr',\r\n                    },\r\n                    {\r\n                      label: t('Earned'),\r\n                      value: 'earned',\r\n                    },\r\n                    {\r\n                      label: t('Total staked'),\r\n                      value: 'totalStaked',\r\n                    },\r\n                  ]}\r\n                  onChange={handleSortOptionChange}\r\n                />\r\n              </ControlStretch>\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" width=\"50%\">\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Search')}\r\n              </Text>\r\n              <ControlStretch>\r\n                <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\r\n              </ControlStretch>\r\n            </Flex>\r\n          </SearchSortContainer>\r\n        </PoolControls>\r\n        {showFinishedPools && (\r\n          <Text fontSize=\"12px\" color=\"failure\" pb=\"32px\">\r\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n          </Text>\r\n        )}\r\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\r\n        <div ref={loadMoreRef} />\r\n        {/* <Image\r\n          mx=\"auto\"\r\n          mt=\"12px\"\r\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\r\n          alt=\"Pancake illustration\"\r\n          width={192}\r\n          height={184.5}\r\n        /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n"]},"metadata":{},"sourceType":"module"}