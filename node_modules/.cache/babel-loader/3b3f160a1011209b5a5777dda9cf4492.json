{"ast":null,"code":"import styled from \"styled-components\";\nimport { Text } from 'components/_uikit';\nimport darkTheme from \"components/_uikit/theme/dark\";\nimport lightTheme from \"components/_uikit/theme/light\";\nimport { scales } from \"../Checkbox/types\";\nconst scaleKeyValues = {\n  sm: {\n    handleHeight: \"16px\",\n    handleWidth: \"16px\",\n    handleLeft: \"2px\",\n    handleTop: \"2px\",\n    checkedLeft: \"calc(100% - 18px)\",\n    toggleHeight: \"20px\",\n    toggleWidth: \"36px\"\n  },\n  md: {\n    handleHeight: \"27px\",\n    handleWidth: \"27px\",\n    handleLeft: \"2px\",\n    handleTop: \"2px\",\n    checkedLeft: \"calc(100% - 29px)\",\n    toggleHeight: \"31px\",\n    toggleWidth: \"80px\"\n  },\n  lg: {\n    handleHeight: \"32px\",\n    handleWidth: \"32px\",\n    handleLeft: \"4px\",\n    handleTop: \"4px\",\n    checkedLeft: \"calc(100% - 36px)\",\n    toggleHeight: \"40px\",\n    toggleWidth: \"80px\"\n  }\n};\n\nconst getScale = property => _ref => {\n  let {\n    scale = scales.MD\n  } = _ref;\n  return scaleKeyValues[scale][property];\n};\n\nexport const Handle = styled.div`\n  background-color: ${_ref2 => {\n  let {\n    theme,\n    forceTheme\n  } = _ref2;\n  return forceTheme === 'dark' ? darkTheme.colors.contrast : forceTheme === 'light' ? lightTheme.colors.contrast : theme.colors.contrast;\n}};\n  border-radius: 50%;\n  cursor: pointer;\n  height: ${getScale(\"handleHeight\")};\n  left: ${getScale(\"handleLeft\")};\n  position: absolute;\n  top: ${getScale(\"handleTop\")};\n  transition: left 200ms ease-in;\n  width: ${getScale(\"handleWidth\")};\n  z-index: 2;\n  color: ${_ref3 => {\n  let {\n    theme,\n    forceTheme\n  } = _ref3;\n  return forceTheme === 'dark' ? darkTheme.colors.contrast : forceTheme === 'light' ? lightTheme.colors.contrast : theme.colors.contrast;\n}};\n`;\nexport const HandleText = styled(Text)`\n  cursor: pointer;\n  font-size: 14px;\n  right: ${_ref4 => {\n  let {\n    checked\n  } = _ref4;\n  return !checked ? \"12px\" : \"auto\";\n}};\n  left: ${_ref5 => {\n  let {\n    checked\n  } = _ref5;\n  return !checked ? \"auto\" : \"12px\";\n}};\n  top: 6px;\n  transition: left 200ms ease-in;\n  position: absolute;\n  color: ${_ref6 => {\n  let {\n    theme,\n    forceTheme\n  } = _ref6;\n  return forceTheme === 'dark' ? darkTheme.colors.contrast : forceTheme === 'light' ? lightTheme.colors.contrast : theme.colors.contrast;\n}};\n  z-index: 1;\n`;\nexport const Input = styled.input`\n  cursor: pointer;\n  opacity: 0;\n  height: 100%;\n  position: absolute;\n  width: 100%;\n  z-index: 3;\n\n  &:checked + ${Handle} {\n    left: ${getScale(\"checkedLeft\")};\n  }\n`;\nconst StyledToggle = styled.div`\n  align-items: center;\n  background-color: ${_ref7 => {\n  let {\n    theme,\n    checked,\n    forceTheme\n  } = _ref7;\n  return forceTheme === 'dark' ? darkTheme.colors[checked ? \"secondary\" : \"input\"] : forceTheme === 'light' ? lightTheme.colors[checked ? \"secondary\" : \"input\"] : theme.colors[checked ? \"secondary\" : \"input\"];\n}};\n  border-radius: 24px;\n  box-shadow: ${_ref8 => {\n  let {\n    theme,\n    forceTheme\n  } = _ref8;\n  return forceTheme === 'dark' ? darkTheme.shadows.inset : forceTheme === 'light' ? lightTheme.shadows.inset : theme.shadows.inset;\n}};\n  cursor: pointer;\n  display: inline-flex;\n  height: ${getScale(\"toggleHeight\")};\n  position: relative;\n  transition: background-color 200ms;\n  width: ${getScale(\"toggleWidth\")};\n`;\nexport default StyledToggle;","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/components/Toggle/StyledToggle.tsx"],"names":["styled","Text","darkTheme","lightTheme","scales","scaleKeyValues","sm","handleHeight","handleWidth","handleLeft","handleTop","checkedLeft","toggleHeight","toggleWidth","md","lg","getScale","property","scale","MD","Handle","div","theme","forceTheme","colors","contrast","HandleText","checked","Input","input","StyledToggle","shadows","inset"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\r\nimport { Text } from 'components/_uikit'\r\nimport darkTheme from \"components/_uikit/theme/dark\";\r\nimport lightTheme from \"components/_uikit/theme/light\";\r\nimport { scales } from \"../Checkbox/types\";\r\nimport { ToggleProps, HandleProps, InputProps, HandleTextProps, ScaleKeys } from \"./types\";\r\n\r\nconst scaleKeyValues = {\r\n  sm: {\r\n    handleHeight: \"16px\",\r\n    handleWidth: \"16px\",\r\n    handleLeft: \"2px\",\r\n    handleTop: \"2px\",\r\n    checkedLeft: \"calc(100% - 18px)\",\r\n    toggleHeight: \"20px\",\r\n    toggleWidth: \"36px\",\r\n  },\r\n  md: {\r\n    handleHeight: \"27px\",\r\n    handleWidth: \"27px\",\r\n    handleLeft: \"2px\",\r\n    handleTop: \"2px\",\r\n    checkedLeft: \"calc(100% - 29px)\",\r\n    toggleHeight: \"31px\",\r\n    toggleWidth: \"80px\",\r\n  },\r\n  lg: {\r\n    handleHeight: \"32px\",\r\n    handleWidth: \"32px\",\r\n    handleLeft: \"4px\",\r\n    handleTop: \"4px\",\r\n    checkedLeft: \"calc(100% - 36px)\",\r\n    toggleHeight: \"40px\",\r\n    toggleWidth: \"80px\",\r\n  },\r\n};\r\n\r\nconst getScale =\r\n  (property: ScaleKeys) =>\r\n  ({ scale = scales.MD }: ToggleProps) => {\r\n    return scaleKeyValues[scale][property];\r\n  };\r\n\r\nexport const Handle = styled.div<HandleProps>`\r\n  background-color: ${({ theme, forceTheme }) => forceTheme === 'dark' ? darkTheme.colors.contrast : forceTheme === 'light' ? lightTheme.colors.contrast : theme.colors.contrast};\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  height: ${getScale(\"handleHeight\")};\r\n  left: ${getScale(\"handleLeft\")};\r\n  position: absolute;\r\n  top: ${getScale(\"handleTop\")};\r\n  transition: left 200ms ease-in;\r\n  width: ${getScale(\"handleWidth\")};\r\n  z-index: 2;\r\n  color: ${({ theme, forceTheme }) => forceTheme === 'dark' ? darkTheme.colors.contrast : forceTheme === 'light' ? lightTheme.colors.contrast : theme.colors.contrast};\r\n`;\r\n\r\nexport const HandleText = styled(Text)<HandleTextProps>`\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  right: ${({checked}) => !checked ? \"12px\" : \"auto\"};\r\n  left: ${({checked}) => !checked ? \"auto\" : \"12px\"};\r\n  top: 6px;\r\n  transition: left 200ms ease-in;\r\n  position: absolute;\r\n  color: ${({ theme, forceTheme }) => forceTheme === 'dark' ? darkTheme.colors.contrast : forceTheme === 'light' ? lightTheme.colors.contrast : theme.colors.contrast};\r\n  z-index: 1;\r\n`;\r\n\r\nexport const Input = styled.input<InputProps>`\r\n  cursor: pointer;\r\n  opacity: 0;\r\n  height: 100%;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 3;\r\n\r\n  &:checked + ${Handle} {\r\n    left: ${getScale(\"checkedLeft\")};\r\n  }\r\n`;\r\n\r\nconst StyledToggle = styled.div<ToggleProps>`\r\n  align-items: center;\r\n  background-color: ${({ theme, checked, forceTheme }) => forceTheme === 'dark' ? darkTheme.colors[checked ? \"secondary\" : \"input\"] : forceTheme === 'light' ? lightTheme.colors[checked ? \"secondary\" : \"input\"] : theme.colors[checked ? \"secondary\" : \"input\"]};\r\n  border-radius: 24px;\r\n  box-shadow: ${({ theme, forceTheme }) => forceTheme === 'dark' ? darkTheme.shadows.inset : forceTheme === 'light' ? lightTheme.shadows.inset : theme.shadows.inset};\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  height: ${getScale(\"toggleHeight\")};\r\n  position: relative;\r\n  transition: background-color 200ms;\r\n  width: ${getScale(\"toggleWidth\")};\r\n`;\r\n\r\nexport default StyledToggle;\r\n"]},"metadata":{},"sourceType":"module"}