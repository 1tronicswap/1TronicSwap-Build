{"ast":null,"code":"import invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport { CurrencyAmount } from './currencyAmount';\nexport class TokenAmount extends CurrencyAmount {\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token, amount) {\n    super(token, amount);\n    this.token = void 0;\n    this.token = token;\n  }\n\n  add(other) {\n    invariant(this.token.equals(other.token), 'TOKEN');\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  }\n\n  subtract(other) {\n    invariant(this.token.equals(other.token), 'TOKEN');\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  }\n\n}","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/utils/@sdk/entities/fractions/tokenAmount.ts"],"names":["invariant","JSBI","CurrencyAmount","TokenAmount","constructor","token","amount","add","other","equals","raw","subtract"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAIA,OAAO,MAAMC,WAAN,SAA0BD,cAA1B,CAAyC;AAG9C;AACOE,EAAAA,WAAW,CAACC,KAAD,EAAeC,MAAf,EAAkC;AAClD,UAAMD,KAAN,EAAaC,MAAb;AADkD,SAHpCD,KAGoC;AAElD,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAEME,EAAAA,GAAG,CAACC,KAAD,EAAkC;AAC1CR,IAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWI,MAAX,CAAkBD,KAAK,CAACH,KAAxB,CAAD,EAAiC,OAAjC,CAAT;AACA,WAAO,IAAIF,WAAJ,CAAgB,KAAKE,KAArB,EAA4BJ,IAAI,CAACM,GAAL,CAAS,KAAKG,GAAd,EAAmBF,KAAK,CAACE,GAAzB,CAA5B,CAAP;AACD;;AAEMC,EAAAA,QAAQ,CAACH,KAAD,EAAkC;AAC/CR,IAAAA,SAAS,CAAC,KAAKK,KAAL,CAAWI,MAAX,CAAkBD,KAAK,CAACH,KAAxB,CAAD,EAAiC,OAAjC,CAAT;AACA,WAAO,IAAIF,WAAJ,CAAgB,KAAKE,KAArB,EAA4BJ,IAAI,CAACU,QAAL,CAAc,KAAKD,GAAnB,EAAwBF,KAAK,CAACE,GAA9B,CAA5B,CAAP;AACD;;AAjB6C","sourcesContent":["import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}