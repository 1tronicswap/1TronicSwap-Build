{"ast":null,"code":"import { _100 } from '../../constants';\nimport { Fraction } from './fraction';\n\nconst _100_PERCENT = new Fraction(_100);\n\nexport class Percent extends Fraction {\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n\n}","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/utils/@sdk/entities/fractions/percent.ts"],"names":["_100","Fraction","_100_PERCENT","Percent","toSignificant","significantDigits","format","rounding","multiply","toFixed","decimalPlaces"],"mappings":"AAAA,SAAmBA,IAAnB,QAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,MAAMC,YAAY,GAAG,IAAID,QAAJ,CAAaD,IAAb,CAArB;;AAEA,OAAO,MAAMG,OAAN,SAAsBF,QAAtB,CAA+B;AAC7BG,EAAAA,aAAa,GAA8E;AAAA,QAA7EC,iBAA6E,uEAAjD,CAAiD;AAAA,QAA9CC,MAA8C;AAAA,QAA7BC,QAA6B;AAChG,WAAO,KAAKC,QAAL,CAAcN,YAAd,EAA4BE,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD;;AAEME,EAAAA,OAAO,GAA0E;AAAA,QAAzEC,aAAyE,uEAAjD,CAAiD;AAAA,QAA9CJ,MAA8C;AAAA,QAA7BC,QAA6B;AACtF,WAAO,KAAKC,QAAL,CAAcN,YAAd,EAA4BO,OAA5B,CAAoCC,aAApC,EAAmDJ,MAAnD,EAA2DC,QAA3D,CAAP;AACD;;AAPmC","sourcesContent":["import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}