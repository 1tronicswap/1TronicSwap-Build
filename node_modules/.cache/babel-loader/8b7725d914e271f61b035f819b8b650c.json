{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\components\\\\Button\\\\Button.tsx\";\nimport React, { cloneElement, isValidElement } from \"react\";\nimport getExternalLinkProps from \"../../util/getExternalLinkProps\";\nimport StyledButton from \"./StyledButton\";\nimport { scales, variants } from \"./types\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  const {\n    startIcon,\n    endIcon,\n    external,\n    className,\n    isLoading,\n    disabled,\n    children,\n    isBlock,\n    ...rest\n  } = props;\n  const internalProps = external ? getExternalLinkProps() : {};\n  const isDisabled = isLoading || disabled;\n  const classNames = className ? [className] : [];\n\n  if (isLoading) {\n    classNames.push(\"pancake-button--loading\");\n  }\n\n  if (isDisabled && !isLoading) {\n    classNames.push(\"pancake-button--disabled\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledButton, {\n    $isLoading: isLoading,\n    $isBlock: isBlock,\n    className: classNames.join(\" \"),\n    disabled: isDisabled,\n    ...internalProps,\n    ...rest,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/isValidElement(startIcon) && /*#__PURE__*/cloneElement(startIcon, {\n        mr: \"0.5rem\"\n      }), children, /*#__PURE__*/isValidElement(endIcon) && /*#__PURE__*/cloneElement(endIcon, {\n        ml: \"0.5rem\"\n      })]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\nButton.defaultProps = {\n  isLoading: false,\n  external: false,\n  variant: variants.PRIMARY,\n  scale: scales.MD,\n  disabled: false\n};\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/components/Button/Button.tsx"],"names":["React","cloneElement","isValidElement","getExternalLinkProps","StyledButton","scales","variants","Button","props","startIcon","endIcon","external","className","isLoading","disabled","children","isBlock","rest","internalProps","isDisabled","classNames","push","join","mr","ml","defaultProps","variant","PRIMARY","scale","MD"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,YAAhB,EAA2CC,cAA3C,QAAiE,OAAjE;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,SAA9C;;;;AAEA,MAAMC,MAAM,GAAsCC,KAAnC,IAA0E;AACvF,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA,SAAhC;AAA2CC,IAAAA,SAA3C;AAAsDC,IAAAA,QAAtD;AAAgEC,IAAAA,QAAhE;AAAyEC,IAAAA,OAAzE;AAAkF,OAAGC;AAArF,MAA8FT,KAApG;AACA,QAAMU,aAAa,GAAGP,QAAQ,GAAGR,oBAAoB,EAAvB,GAA4B,EAA1D;AACA,QAAMgB,UAAU,GAAGN,SAAS,IAAIC,QAAhC;AACA,QAAMM,UAAU,GAAGR,SAAS,GAAG,CAACA,SAAD,CAAH,GAAiB,EAA7C;;AAEA,MAAIC,SAAJ,EAAe;AACbO,IAAAA,UAAU,CAACC,IAAX,CAAgB,yBAAhB;AACD;;AAED,MAAIF,UAAU,IAAI,CAACN,SAAnB,EAA8B;AAC5BO,IAAAA,UAAU,CAACC,IAAX,CAAgB,0BAAhB;AACD;;AAED,sBACE,QAAC,YAAD;AACE,IAAA,UAAU,EAAER,SADd;AAEE,IAAA,QAAQ,EAAEG,OAFZ;AAGE,IAAA,SAAS,EAAEI,UAAU,CAACE,IAAX,CAAgB,GAAhB,CAHb;AAIE,IAAA,QAAQ,EAAEH,UAJZ;AAAA,OAKMD,aALN;AAAA,OAMMD,IANN;AAAA,2BAQE;AAAA,iBACG,aAAAf,cAAc,CAACO,SAAD,CAAd,iBACCR,YAAY,CAACQ,SAAD,EAAY;AACtBc,QAAAA,EAAE,EAAE;AADkB,OAAZ,CAFhB,EAKGR,QALH,EAMG,aAAAb,cAAc,CAACQ,OAAD,CAAd,iBACCT,YAAY,CAACS,OAAD,EAAU;AACpBc,QAAAA,EAAE,EAAE;AADgB,OAAV,CAPhB;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CApCD;;KAAMjB,M;AAsCNA,MAAM,CAACkB,YAAP,GAAsB;AACpBZ,EAAAA,SAAS,EAAE,KADS;AAEpBF,EAAAA,QAAQ,EAAE,KAFU;AAGpBe,EAAAA,OAAO,EAAEpB,QAAQ,CAACqB,OAHE;AAIpBC,EAAAA,KAAK,EAAEvB,MAAM,CAACwB,EAJM;AAKpBf,EAAAA,QAAQ,EAAE;AALU,CAAtB;AAQA,eAAeP,MAAf","sourcesContent":["import React, { cloneElement, ElementType, isValidElement } from \"react\";\r\nimport getExternalLinkProps from \"../../util/getExternalLinkProps\";\r\nimport StyledButton from \"./StyledButton\";\r\nimport { ButtonProps, scales, variants } from \"./types\";\r\n\r\nconst Button = <E extends ElementType = \"button\">(props: ButtonProps<E>): JSX.Element => {\r\n  const { startIcon, endIcon, external, className, isLoading, disabled, children,isBlock, ...rest } = props;\r\n  const internalProps = external ? getExternalLinkProps() : {};\r\n  const isDisabled = isLoading || disabled;\r\n  const classNames = className ? [className] : [];\r\n\r\n  if (isLoading) {\r\n    classNames.push(\"pancake-button--loading\");\r\n  }\r\n\r\n  if (isDisabled && !isLoading) {\r\n    classNames.push(\"pancake-button--disabled\");\r\n  }\r\n\r\n  return (\r\n    <StyledButton\r\n      $isLoading={isLoading}\r\n      $isBlock={isBlock}\r\n      className={classNames.join(\" \")}\r\n      disabled={isDisabled}\r\n      {...internalProps}\r\n      {...rest}\r\n    >\r\n      <>\r\n        {isValidElement(startIcon) &&\r\n          cloneElement(startIcon, {\r\n            mr: \"0.5rem\",\r\n          })}\r\n        {children}\r\n        {isValidElement(endIcon) &&\r\n          cloneElement(endIcon, {\r\n            ml: \"0.5rem\",\r\n          })}\r\n      </>\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  isLoading: false,\r\n  external: false,\r\n  variant: variants.PRIMARY,\r\n  scale: scales.MD,\r\n  disabled: false,\r\n};\r\n\r\nexport default Button;\r\n"]},"metadata":{},"sourceType":"module"}