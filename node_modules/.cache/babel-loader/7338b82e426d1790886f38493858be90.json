{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\views\\\\Home\\\\components\\\\EarnAPRCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { Text, Card, Flex, ArrowForwardIcon } from 'components/_uikit';\nimport { ChainId } from 'utils/@sdk';\nimport max from 'lodash/max';\nimport { NavLink } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks';\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms';\nimport { getFarmApr } from 'utils/apr';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  min-height: 104px;\n  padding-left: 24px;\n  padding-right: 24px;\n  position: relative;\n  background-color: transparent;\n`;\n_c = StyledFarmStakingCard;\nconst Block = styled.div`\n  position: absolute;\n  top: 50%;\n  width: calc( 100% - 48px);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n`;\n_c2 = Block;\nconst CardCorner = styled.div`\n  position: absolute;\n  bottom: calc(50% - 16px);\n  right: 0;\n`;\n_c3 = CardCorner;\nconst CardMidContent = styled(Text).attrs({\n  fontWeight: \"700\",\n  fontSize: \"24px\",\n  lineHeight: \"24px\"\n})`\n`;\n_c4 = CardMidContent;\n\nconst EarnAPRCard = () => {\n  _s();\n\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true);\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver(); // Fetch farm data once to get the max APR\n\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map(nonArchivedFarm => nonArchivedFarm.pid)));\n      } finally {\n        setIsFetchingFarmData(false);\n      }\n    };\n\n    if (isIntersecting) {\n      fetchFarmData();\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting]);\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map(farm => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n          const {\n            cakeRewardsApr,\n            lpRewardsApr\n          } = getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET]);\n          return cakeRewardsApr + lpRewardsApr;\n        }\n\n        return null;\n      });\n      const maxApr = max(aprs);\n      return maxApr === null || maxApr === void 0 ? void 0 : maxApr.toLocaleString('en-US', {\n        maximumFractionDigits: 2\n      });\n    }\n\n    return null;\n  }, [cakePrice, farmsLP]);\n  const aprText = highestApr || '-';\n  const earnAprText = t('Earn from %highestApr% APR', {\n    highestApr: aprText\n  });\n  const [earnUpTo, InFarms] = earnAprText.split(aprText);\n  return /*#__PURE__*/_jsxDEV(StyledFarmStakingCard, {\n    children: /*#__PURE__*/_jsxDEV(NavLink, {\n      exact: true,\n      activeClassName: \"active\",\n      to: \"/farms\",\n      id: \"farm-apr-cta\",\n      children: /*#__PURE__*/_jsxDEV(Block, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontWeight: \"400\",\n          fontSize: \"14px\",\n          lineHeight: \"24px\",\n          children: earnUpTo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(CardMidContent, {\n            color: \"secondary\",\n            children: highestApr && !isFetchingFarmData ? `${InFarms} ${highestApr}%` : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [`${InFarms}`, /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: observerRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardCorner, {\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              color: \"primary\",\n              width: \"32px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EarnAPRCard, \"/kgnGbmL5bEfzmHNXp5e7u2dOCk=\", false, function () {\n  return [useTranslation, useFarms, usePriceCakeBusd, useAppDispatch, useIntersectionObserver];\n});\n\n_c5 = EarnAPRCard;\nexport default EarnAPRCard;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StyledFarmStakingCard\");\n$RefreshReg$(_c2, \"Block\");\n$RefreshReg$(_c3, \"CardCorner\");\n$RefreshReg$(_c4, \"CardMidContent\");\n$RefreshReg$(_c5, \"EarnAPRCard\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/views/Home/components/EarnAPRCard.tsx"],"names":["React","useEffect","useMemo","useState","styled","Text","Card","Flex","ArrowForwardIcon","ChainId","max","NavLink","BigNumber","useTranslation","useAppDispatch","useFarms","usePriceCakeBusd","fetchFarmsPublicDataAsync","nonArchivedFarms","getFarmApr","useIntersectionObserver","StyledFarmStakingCard","Block","div","CardCorner","CardMidContent","attrs","fontWeight","fontSize","lineHeight","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","t","data","farmsLP","cakePrice","dispatch","observerRef","isIntersecting","fetchFarmData","map","nonArchivedFarm","pid","highestApr","gt","aprs","farm","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","cakeRewardsApr","lpRewardsApr","poolWeight","lpAddresses","MAINNET","maxApr","toLocaleString","maximumFractionDigits","aprText","earnAprText","earnUpTo","InFarms","split"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Card,  Flex, ArrowForwardIcon } from 'components/_uikit'\r\nimport { ChainId } from 'utils/@sdk'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\n\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  min-height: 104px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  position: relative;\r\n  background-color: transparent;\r\n`\r\n\r\nconst Block = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  width: calc( 100% - 48px);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n`\r\n\r\nconst CardCorner = styled.div`\r\n  position: absolute;\r\n  bottom: calc(50% - 16px);\r\n  right: 0;\r\n`;\r\n\r\nconst CardMidContent = styled(Text).attrs({ fontWeight:\"700\" , fontSize:\"24px\" , lineHeight:\"24px\" })`\r\n`\r\n\r\nconst EarnAPRCard = () => {\r\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    const fetchFarmData = async () => {\r\n      try {\r\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\r\n      } finally {\r\n        setIsFetchingFarmData(false)\r\n      }\r\n    }\r\n\r\n    if (isIntersecting) {\r\n      fetchFarmData()\r\n    }\r\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\r\n\r\n  const highestApr = useMemo(() => {\r\n    if (cakePrice.gt(0)) {\r\n      const aprs = farmsLP.map((farm) => {\r\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\r\n            new BigNumber(farm.poolWeight),\r\n            cakePrice,\r\n            totalLiquidity,\r\n            farm.lpAddresses[ChainId.MAINNET],\r\n          )\r\n          return cakeRewardsApr + lpRewardsApr\r\n        }\r\n        return null\r\n      })\r\n\r\n      const maxApr = max(aprs)\r\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    }\r\n    return null\r\n  }, [cakePrice, farmsLP])\r\n\r\n  const aprText = highestApr || '-'\r\n  const earnAprText = t('Earn from %highestApr% APR', { highestApr: aprText })\r\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <Block>\r\n          <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"24px\">\r\n            {earnUpTo}\r\n          </Text>\r\n          <Flex justifyContent=\"space-between\">\r\n            <CardMidContent color=\"secondary\">\r\n              {highestApr && !isFetchingFarmData ? (\r\n                `${InFarms} ${highestApr}%`\r\n              ) : (\r\n                <>\r\n                  {`${InFarms}`}\r\n                  <div ref={observerRef} />\r\n                </>\r\n              )}             \r\n            </CardMidContent>\r\n            <CardCorner>\r\n              <ArrowForwardIcon color=\"primary\" width=\"32px\"/>\r\n            </CardCorner>\r\n          </Flex>\r\n        </Block>      \r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n"]},"metadata":{},"sourceType":"module"}