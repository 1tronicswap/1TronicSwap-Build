{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\App\\\\Settings\\\\TransactionSettings.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Text, Button, Input, Flex, Grid } from 'components/_uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport QuestionHelper from '../../QuestionHelper';\nimport { AutoColumn } from '../../Layout/Column';\nimport { RowBetween, RowFixed } from '../../Layout/Row';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SlippageError;\n\n(function (SlippageError) {\n  SlippageError[\"InvalidInput\"] = \"InvalidInput\";\n  SlippageError[\"RiskyLow\"] = \"RiskyLow\";\n  SlippageError[\"RiskyHigh\"] = \"RiskyHigh\";\n})(SlippageError || (SlippageError = {}));\n\nvar DeadlineError;\n\n(function (DeadlineError) {\n  DeadlineError[\"InvalidInput\"] = \"InvalidInput\";\n})(DeadlineError || (DeadlineError = {}));\n\nexport default function SlippageTabs(_ref) {\n  _s();\n\n  let {\n    rawSlippage,\n    setRawSlippage,\n    deadline,\n    setDeadline\n  } = _ref;\n  const [slippageInput, setSlippageInput] = useState('');\n  const [deadlineInput, setDeadlineInput] = useState('');\n  const {\n    t\n  } = useTranslation();\n  const slippageInputIsValid = slippageInput === '' || (rawSlippage / 100).toFixed(2) === Number.parseFloat(slippageInput).toFixed(2);\n  const deadlineInputIsValid = deadlineInput === '' || (deadline / 60).toString() === deadlineInput;\n  let slippageError;\n\n  if (slippageInput !== '' && !slippageInputIsValid) {\n    slippageError = SlippageError.InvalidInput;\n  } else if (slippageInputIsValid && rawSlippage < 50) {\n    slippageError = SlippageError.RiskyLow;\n  } else if (slippageInputIsValid && rawSlippage > 500) {\n    slippageError = SlippageError.RiskyHigh;\n  } else {\n    slippageError = undefined;\n  }\n\n  let deadlineError;\n\n  if (deadlineInput !== '' && !deadlineInputIsValid) {\n    deadlineError = DeadlineError.InvalidInput;\n  } else {\n    deadlineError = undefined;\n  }\n\n  function parseCustomSlippage(value) {\n    setSlippageInput(value);\n\n    try {\n      const valueAsIntFromRoundedFloat = Number.parseInt((Number.parseFloat(value) * 100).toString());\n\n      if (!Number.isNaN(valueAsIntFromRoundedFloat) && valueAsIntFromRoundedFloat < 5000) {\n        setRawSlippage(valueAsIntFromRoundedFloat);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function parseCustomDeadline(value) {\n    setDeadlineInput(value);\n\n    try {\n      const valueAsInt = Number.parseInt(value) * 60;\n\n      if (!Number.isNaN(valueAsInt) && valueAsInt > 0) {\n        setDeadline(valueAsInt);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AutoColumn, {\n    gap: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"background\",\n          children: t('Slippage Tolerance')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('Your transaction will revert if the price changes unfavorably by more than this percentage.'),\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        flexWrap: ['wrap', 'wrap', 'nowrap'],\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          gridTemplateColumns: \"1fr 1fr 1fr\",\n          gridGap: \"8px\",\n          mb: ['8px', '8px', 0],\n          mr: [0, 0, '8px'],\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setSlippageInput('');\n              setRawSlippage(10);\n            },\n            scale: \"lg\",\n            variant: rawSlippage === 10 ? 'primary_contrast' : 'contrast',\n            children: \"0.1%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setSlippageInput('');\n              setRawSlippage(50);\n            },\n            scale: \"lg\",\n            variant: rawSlippage === 50 ? 'primary_contrast' : 'contrast',\n            children: \"0.5%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setSlippageInput('');\n              setRawSlippage(100);\n            },\n            scale: \"lg\",\n            variant: rawSlippage === 100 ? 'primary_contrast' : 'contrast',\n            children: \"1.0%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            scale: \"lg\",\n            contrastMode: true,\n            placeholder: (rawSlippage / 100).toFixed(2),\n            value: slippageInput,\n            onBlur: () => {\n              parseCustomSlippage((rawSlippage / 100).toFixed(2));\n            },\n            onChange: e => parseCustomSlippage(e.target.value),\n            isWarning: !slippageInputIsValid,\n            isSuccess: ![10, 50, 100].includes(rawSlippage)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            ml: \"8px\",\n            color: \"background\",\n            children: \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), !!slippageError && /*#__PURE__*/_jsxDEV(RowBetween, {\n        style: {\n          fontSize: '14px',\n          paddingTop: '7px',\n          color: slippageError === SlippageError.InvalidInput ? 'red' : '#F3841E'\n        },\n        children: slippageError === SlippageError.InvalidInput ? t('Enter a valid slippage percentage') : slippageError === SlippageError.RiskyLow ? t('Your transaction may fail') : t('Your transaction may be frontrun')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"background\",\n          children: \"Transaction deadline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('Your transaction will revert if it is pending for more than this long.'),\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowFixed, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          color: deadlineError ? 'red' : undefined,\n          contrastMode: true,\n          onBlur: () => {\n            parseCustomDeadline((deadline / 60).toString());\n          },\n          placeholder: (deadline / 60).toString(),\n          value: deadlineInput,\n          onChange: e => parseCustomDeadline(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          pl: \"8px\",\n          fontSize: \"14px\",\n          children: t('minutes')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SlippageTabs, \"7+MlPnQxzPQyKSnJao0QbXcH7uU=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SlippageTabs;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlippageTabs\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/App/Settings/TransactionSettings.tsx"],"names":["React","useState","Text","Button","Input","Flex","Grid","useTranslation","QuestionHelper","AutoColumn","RowBetween","RowFixed","SlippageError","DeadlineError","SlippageTabs","rawSlippage","setRawSlippage","deadline","setDeadline","slippageInput","setSlippageInput","deadlineInput","setDeadlineInput","t","slippageInputIsValid","toFixed","Number","parseFloat","deadlineInputIsValid","toString","slippageError","InvalidInput","RiskyLow","RiskyHigh","undefined","deadlineError","parseCustomSlippage","value","valueAsIntFromRoundedFloat","parseInt","isNaN","error","console","parseCustomDeadline","valueAsInt","e","target","includes","fontSize","paddingTop","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Text, Button, Input, Flex, Grid } from 'components/_uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport QuestionHelper from '../../QuestionHelper'\r\nimport { AutoColumn } from '../../Layout/Column'\r\nimport { RowBetween, RowFixed } from '../../Layout/Row'\r\n\r\nenum SlippageError {\r\n  InvalidInput = 'InvalidInput',\r\n  RiskyLow = 'RiskyLow',\r\n  RiskyHigh = 'RiskyHigh',\r\n}\r\n\r\nenum DeadlineError {\r\n  InvalidInput = 'InvalidInput',\r\n}\r\n\r\nexport interface SlippageTabsProps {\r\n  rawSlippage: number\r\n  setRawSlippage: (rawSlippage: number) => void\r\n  deadline: number\r\n  setDeadline: (deadline: number) => void\r\n}\r\n\r\nexport default function SlippageTabs({ rawSlippage, setRawSlippage, deadline, setDeadline }: SlippageTabsProps) {\r\n  const [slippageInput, setSlippageInput] = useState('')\r\n  const [deadlineInput, setDeadlineInput] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const slippageInputIsValid =\r\n    slippageInput === '' || (rawSlippage / 100).toFixed(2) === Number.parseFloat(slippageInput).toFixed(2)\r\n  const deadlineInputIsValid = deadlineInput === '' || (deadline / 60).toString() === deadlineInput\r\n\r\n  let slippageError: SlippageError | undefined\r\n  if (slippageInput !== '' && !slippageInputIsValid) {\r\n    slippageError = SlippageError.InvalidInput\r\n  } else if (slippageInputIsValid && rawSlippage < 50) {\r\n    slippageError = SlippageError.RiskyLow\r\n  } else if (slippageInputIsValid && rawSlippage > 500) {\r\n    slippageError = SlippageError.RiskyHigh\r\n  } else {\r\n    slippageError = undefined\r\n  }\r\n\r\n  let deadlineError: DeadlineError | undefined\r\n  if (deadlineInput !== '' && !deadlineInputIsValid) {\r\n    deadlineError = DeadlineError.InvalidInput\r\n  } else {\r\n    deadlineError = undefined\r\n  }\r\n\r\n  function parseCustomSlippage(value: string) {\r\n    setSlippageInput(value)\r\n\r\n    try {\r\n      const valueAsIntFromRoundedFloat = Number.parseInt((Number.parseFloat(value) * 100).toString())\r\n      if (!Number.isNaN(valueAsIntFromRoundedFloat) && valueAsIntFromRoundedFloat < 5000) {\r\n        setRawSlippage(valueAsIntFromRoundedFloat)\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  function parseCustomDeadline(value: string) {\r\n    setDeadlineInput(value)\r\n\r\n    try {\r\n      const valueAsInt: number = Number.parseInt(value) * 60\r\n      if (!Number.isNaN(valueAsInt) && valueAsInt > 0) {\r\n        setDeadline(valueAsInt)\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      <AutoColumn gap=\"sm\">\r\n        <RowFixed>\r\n          <Text fontSize=\"14px\" color=\"background\">{t('Slippage Tolerance')}</Text>\r\n          <QuestionHelper\r\n            text={t('Your transaction will revert if the price changes unfavorably by more than this percentage.')}\r\n            ml=\"4px\"\r\n          />\r\n        </RowFixed>\r\n        <Flex flexWrap={['wrap', 'wrap', 'nowrap']}>\r\n          <Grid gridTemplateColumns=\"1fr 1fr 1fr\" gridGap=\"8px\" mb={['8px', '8px', 0]} mr={[0, 0, '8px']}>\r\n            <Button\r\n              onClick={() => {\r\n                setSlippageInput('')\r\n                setRawSlippage(10)\r\n              }}\r\n              scale=\"lg\"\r\n              variant={rawSlippage === 10 ? 'primary_contrast' : 'contrast'}\r\n            >\r\n              0.1%\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setSlippageInput('')\r\n                setRawSlippage(50)\r\n              }}\r\n              scale=\"lg\"\r\n              variant={rawSlippage === 50 ? 'primary_contrast' : 'contrast'}\r\n            >\r\n              0.5%\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setSlippageInput('')\r\n                setRawSlippage(100)\r\n              }}\r\n              scale=\"lg\"\r\n              variant={rawSlippage === 100 ? 'primary_contrast' : 'contrast'}\r\n            >\r\n              1.0%\r\n            </Button>\r\n          </Grid>\r\n          <RowBetween>\r\n            <Input\r\n              scale=\"lg\"\r\n              contrastMode\r\n              placeholder={(rawSlippage / 100).toFixed(2)}\r\n              value={slippageInput}\r\n              onBlur={() => {\r\n                parseCustomSlippage((rawSlippage / 100).toFixed(2))\r\n              }}\r\n              onChange={(e) => parseCustomSlippage(e.target.value)}\r\n              isWarning={!slippageInputIsValid}\r\n              isSuccess={![10, 50, 100].includes(rawSlippage)}\r\n            />\r\n            <Text bold ml=\"8px\" color=\"background\">\r\n              %\r\n            </Text>\r\n          </RowBetween>\r\n        </Flex>\r\n        {!!slippageError && (\r\n          <RowBetween\r\n            style={{\r\n              fontSize: '14px',\r\n              paddingTop: '7px',\r\n              color: slippageError === SlippageError.InvalidInput ? 'red' : '#F3841E',\r\n            }}\r\n          >\r\n            {slippageError === SlippageError.InvalidInput\r\n              ? t('Enter a valid slippage percentage')\r\n              : slippageError === SlippageError.RiskyLow\r\n              ? t('Your transaction may fail')\r\n              : t('Your transaction may be frontrun')}\r\n          </RowBetween>\r\n        )}\r\n      </AutoColumn>\r\n\r\n      <AutoColumn gap=\"sm\">\r\n        <RowFixed>\r\n          <Text fontSize=\"14px\" color=\"background\">Transaction deadline</Text>\r\n          <QuestionHelper text={t('Your transaction will revert if it is pending for more than this long.')} ml=\"4px\" />\r\n        </RowFixed>\r\n        <RowFixed>\r\n          <Input\r\n            color={deadlineError ? 'red' : undefined}\r\n            contrastMode\r\n            onBlur={() => {\r\n              parseCustomDeadline((deadline / 60).toString())\r\n            }}\r\n            placeholder={(deadline / 60).toString()}\r\n            value={deadlineInput}\r\n            onChange={(e) => parseCustomDeadline(e.target.value)}\r\n          />\r\n          <Text pl=\"8px\" fontSize=\"14px\">\r\n            {t('minutes')}\r\n          </Text>\r\n        </RowFixed>\r\n      </AutoColumn>\r\n    </AutoColumn>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}