{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\n\nconst useIntersectionObserver = () => {\n  _s();\n\n  const observerRef = useRef(null);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  useEffect(() => {\n    const checkObserverIsIntersecting = _ref => {\n      let [entry] = _ref;\n      setIsIntersecting(entry.isIntersecting);\n    };\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      intersectionObserver.observe(observerRef.current);\n      setObserverIsSet(true);\n    }\n  }, [observerIsSet]);\n  return {\n    observerRef,\n    isIntersecting\n  };\n};\n\n_s(useIntersectionObserver, \"MgRcZp4citce7lqF8SMImUrD2hE=\");\n\nexport default useIntersectionObserver;","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/hooks/useIntersectionObserver.ts"],"names":["useEffect","useRef","useState","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","checkObserverIsIntersecting","entry","intersectionObserver","IntersectionObserver","rootMargin","threshold","observe","current"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AAAA;;AACpC,QAAMC,WAAW,GAAGH,MAAM,CAAiB,IAAjB,CAA1B;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,2BAA2B,GAAG,QAA0C;AAAA,UAAzC,CAACC,KAAD,CAAyC;AAC5EF,MAAAA,iBAAiB,CAACE,KAAK,CAACH,cAAP,CAAjB;AACD,KAFD;;AAIA,QAAI,CAACF,aAAL,EAAoB;AAClB,YAAMM,oBAAoB,GAAG,IAAIC,oBAAJ,CAAyBH,2BAAzB,EAAsD;AACjFI,QAAAA,UAAU,EAAE,KADqE;AAEjFC,QAAAA,SAAS,EAAE;AAFsE,OAAtD,CAA7B;AAIAH,MAAAA,oBAAoB,CAACI,OAArB,CAA6BX,WAAW,CAACY,OAAzC;AACAV,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GAbQ,EAaN,CAACD,aAAD,CAbM,CAAT;AAeA,SAAO;AAAED,IAAAA,WAAF;AAAeG,IAAAA;AAAf,GAAP;AACD,CArBD;;GAAMJ,uB;;AAuBN,eAAeA,uBAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\n\r\nconst useIntersectionObserver = () => {\r\n  const observerRef = useRef<HTMLDivElement>(null)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const [isIntersecting, setIsIntersecting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\r\n      setIsIntersecting(entry.isIntersecting)\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      intersectionObserver.observe(observerRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  return { observerRef, isIntersecting }\r\n}\r\n\r\nexport default useIntersectionObserver\r\n"]},"metadata":{},"sourceType":"module"}