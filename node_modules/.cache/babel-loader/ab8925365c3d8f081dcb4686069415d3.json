{"ast":null,"code":"import invariant from 'tiny-invariant';\nimport { ETHER } from './currency';\nimport { Token, WETH } from './token';\nimport { Price } from './fractions/price';\nexport class Route {\n  constructor(pairs, input, output) {\n    this.pairs = void 0;\n    this.path = void 0;\n    this.input = void 0;\n    this.output = void 0;\n    this.midPrice = void 0;\n    invariant(pairs.length > 0, 'PAIRS');\n    invariant(pairs.every(pair => pair.chainId === pairs[0].chainId), 'CHAIN_IDS');\n    invariant(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId]), 'INPUT');\n    invariant(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId]), 'OUTPUT');\n    const path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i];\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH');\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n      path.push(output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n\n  get chainId() {\n    return this.pairs[0].chainId;\n  }\n\n}","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/utils/@sdk/entities/route.ts"],"names":["invariant","ETHER","Token","WETH","Price","Route","constructor","pairs","input","output","path","midPrice","length","every","pair","chainId","involvesToken","i","entries","currentInput","equals","token0","token1","push","fromRoute"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AAEA,SAAmBC,KAAnB,QAAgC,YAAhC;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,SAA5B;AAEA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,OAAO,MAAMC,KAAN,CAAY;AAOVC,EAAAA,WAAW,CAACC,KAAD,EAAgBC,KAAhB,EAAiCC,MAAjC,EAAoD;AAAA,SANtDF,KAMsD;AAAA,SALtDG,IAKsD;AAAA,SAJtDF,KAIsD;AAAA,SAHtDC,MAGsD;AAAA,SAFtDE,QAEsD;AACpEX,IAAAA,SAAS,CAACO,KAAK,CAACK,MAAN,GAAe,CAAhB,EAAmB,OAAnB,CAAT;AACAZ,IAAAA,SAAS,CACPO,KAAK,CAACM,KAAN,CAAYC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiBR,KAAK,CAAC,CAAD,CAAL,CAASQ,OAA9C,CADO,EAEP,WAFO,CAAT;AAIAf,IAAAA,SAAS,CACNQ,KAAK,YAAYN,KAAjB,IAA0BK,KAAK,CAAC,CAAD,CAAL,CAASS,aAAT,CAAuBR,KAAvB,CAA3B,IACGA,KAAK,KAAKP,KAAV,IAAmBM,KAAK,CAAC,CAAD,CAAL,CAASS,aAAT,CAAuBb,IAAI,CAACI,KAAK,CAAC,CAAD,CAAL,CAASQ,OAAV,CAA3B,CAFf,EAGP,OAHO,CAAT;AAKAf,IAAAA,SAAS,CACP,OAAOS,MAAP,KAAkB,WAAlB,IACGA,MAAM,YAAYP,KAAlB,IAA2BK,KAAK,CAACA,KAAK,CAACK,MAAN,GAAe,CAAhB,CAAL,CAAwBI,aAAxB,CAAsCP,MAAtC,CAD9B,IAEGA,MAAM,KAAKR,KAAX,IAAoBM,KAAK,CAACA,KAAK,CAACK,MAAN,GAAe,CAAhB,CAAL,CAAwBI,aAAxB,CAAsCb,IAAI,CAACI,KAAK,CAAC,CAAD,CAAL,CAASQ,OAAV,CAA1C,CAHhB,EAIP,QAJO,CAAT;AAOA,UAAML,IAAa,GAAG,CAACF,KAAK,YAAYN,KAAjB,GAAyBM,KAAzB,GAAiCL,IAAI,CAACI,KAAK,CAAC,CAAD,CAAL,CAASQ,OAAV,CAAtC,CAAtB;;AACA,SAAK,MAAM,CAACE,CAAD,EAAIH,IAAJ,CAAX,IAAwBP,KAAK,CAACW,OAAN,EAAxB,EAAyC;AACvC,YAAMC,YAAY,GAAGT,IAAI,CAACO,CAAD,CAAzB;AACAjB,MAAAA,SAAS,CAACmB,YAAY,CAACC,MAAb,CAAoBN,IAAI,CAACO,MAAzB,KAAoCF,YAAY,CAACC,MAAb,CAAoBN,IAAI,CAACQ,MAAzB,CAArC,EAAuE,MAAvE,CAAT;AACA,YAAMb,MAAM,GAAGU,YAAY,CAACC,MAAb,CAAoBN,IAAI,CAACO,MAAzB,IAAmCP,IAAI,CAACQ,MAAxC,GAAiDR,IAAI,CAACO,MAArE;AACAX,MAAAA,IAAI,CAACa,IAAL,CAAUd,MAAV;AACD;;AAED,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBP,KAAK,CAACoB,SAAN,CAAgB,IAAhB,CAAhB;AACA,SAAKhB,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwBC,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAA5B;AACD;;AAEiB,MAAPG,OAAO,GAAY;AAC5B,WAAO,KAAKR,KAAL,CAAW,CAAX,EAAcQ,OAArB;AACD;;AA1CgB","sourcesContent":["import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}