{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\components\\\\Button\\\\ExpandableButton.tsx\";\nimport React from \"react\";\nimport { ChevronDownIcon, ChevronUpIcon } from \"../Svg\";\nimport Button from \"./Button\";\nimport IconButton from \"./IconButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExpandableButton = _ref => {\n  let {\n    onClick,\n    expanded,\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(IconButton, {\n    \"aria-label\": \"Hide or show expandable content\",\n    onClick: onClick,\n    children: [children, expanded ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {\n      color: \"invertedContrast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {\n      color: \"invertedContrast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 64\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = ExpandableButton;\nExpandableButton.defaultProps = {\n  expanded: false\n};\nexport const ExpandableLabel = _ref2 => {\n  let {\n    onClick,\n    expanded,\n    children\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"text\",\n    \"aria-label\": \"Hide or show expandable content\",\n    onClick: onClick,\n    endIcon: expanded ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {\n      color: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {\n      color: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 63\n    }, this),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ExpandableLabel;\nExpandableLabel.defaultProps = {\n  expanded: false\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ExpandableButton\");\n$RefreshReg$(_c2, \"ExpandableLabel\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/components/Button/ExpandableButton.tsx"],"names":["React","ChevronDownIcon","ChevronUpIcon","Button","IconButton","ExpandableButton","onClick","expanded","children","defaultProps","ExpandableLabel"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,QAA/C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAOA,OAAO,MAAMC,gBAAiC,GAAG,QAAqC;AAAA,MAApC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,GAAoC;AACpF,sBACE,QAAC,UAAD;AAAY,kBAAW,iCAAvB;AAAyD,IAAA,OAAO,EAAEF,OAAlE;AAAA,eACGE,QADH,EAEGD,QAAQ,gBAAG,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAgD,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAF3D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPM;KAAMF,gB;AAQbA,gBAAgB,CAACI,YAAjB,GAAgC;AAC9BF,EAAAA,QAAQ,EAAE;AADoB,CAAhC;AAIA,OAAO,MAAMG,eAAgC,GAAG,SAAqC;AAAA,MAApC;AAAEJ,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,GAAoC;AACnF,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,kBAAW,iCAFb;AAGE,IAAA,OAAO,EAAEF,OAHX;AAIE,IAAA,OAAO,EAAEC,QAAQ,gBAAG,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAuC,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAJ1D;AAAA,cAMGC;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXM;MAAME,e;AAYbA,eAAe,CAACD,YAAhB,GAA+B;AAC7BF,EAAAA,QAAQ,EAAE;AADmB,CAA/B","sourcesContent":["import React from \"react\";\r\nimport { ChevronDownIcon, ChevronUpIcon } from \"../Svg\";\r\nimport Button from \"./Button\";\r\nimport IconButton from \"./IconButton\";\r\n\r\ninterface Props {\r\n  onClick?: () => void;\r\n  expanded?: boolean;\r\n}\r\n\r\nexport const ExpandableButton: React.FC<Props> = ({ onClick, expanded, children }) => {\r\n  return (\r\n    <IconButton aria-label=\"Hide or show expandable content\" onClick={onClick}>\r\n      {children}\r\n      {expanded ? <ChevronUpIcon color=\"invertedContrast\" /> : <ChevronDownIcon color=\"invertedContrast\" />}\r\n    </IconButton>\r\n  );\r\n};\r\nExpandableButton.defaultProps = {\r\n  expanded: false,\r\n};\r\n\r\nexport const ExpandableLabel: React.FC<Props> = ({ onClick, expanded, children }) => {\r\n  return (\r\n    <Button\r\n      variant=\"text\"\r\n      aria-label=\"Hide or show expandable content\"\r\n      onClick={onClick}\r\n      endIcon={expanded ? <ChevronUpIcon color=\"primary\" /> : <ChevronDownIcon color=\"primary\" />}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\nExpandableLabel.defaultProps = {\r\n  expanded: false,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}