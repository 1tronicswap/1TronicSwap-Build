{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\CardActionsContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Text } from '@zaigar-finance/uikit';\nimport { getAddress } from 'utils/addressHelpers';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useTranslation } from 'contexts/Localization';\nimport { useERC20 } from 'hooks/useContract';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport StakeAction from './StakeAction';\nimport HarvestAction from './HarvestAction';\nimport useApproveFarm from '../../hooks/useApproveFarm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Action = styled.div`\n  padding-top: 16px;\n`;\n_c = Action;\n\nconst CardActions = _ref => {\n  _s();\n\n  let {\n    farm,\n    account,\n    addLiquidityUrl,\n    cakePrice,\n    lpLabel\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    pid,\n    lpAddresses,\n    tokenAddress,\n    isTokenOnly,\n    depositFeeBP\n  } = farm;\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0\n  } = farm.userData || {};\n  const allowance = new BigNumber(allowanceAsString);\n  const tokenBalance = new BigNumber(tokenBalanceAsString);\n  const stakedBalance = new BigNumber(stakedBalanceAsString);\n  const earnings = new BigNumber(earningsAsString);\n  const lpAddress = getAddress(lpAddresses);\n  const token = getAddress(tokenAddress);\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const dispatch = useAppDispatch();\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return token;\n    }\n\n    return lpAddress;\n  }, [lpAddress, token, isTokenOnly]);\n  const lptContract = useERC20(lpContract);\n  const {\n    onApprove\n  } = useApproveFarm(lptContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      await onApprove();\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids: [pid]\n      }));\n      setRequestedApproval(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, dispatch, account, pid]);\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? /*#__PURE__*/_jsxDEV(StakeAction, {\n      isTokenOnly: isTokenOnly,\n      stakedBalance: stakedBalance,\n      tokenBalance: tokenBalance,\n      tokenName: farm.lpSymbol,\n      pid: pid,\n      depositFeeBP: depositFeeBP,\n      apr: farm.apr,\n      lpLabel: lpLabel,\n      cakePrice: cakePrice,\n      addLiquidityUrl: addLiquidityUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      width: \"100%\",\n      disabled: requestedApproval,\n      onClick: handleApprove,\n      children: t('Enable Contract')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 3\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Action, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: \"ZFAI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Earned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(HarvestAction, {\n      earnings: earnings,\n      pid: pid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: farm.lpSymbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n      mt: \"8px\",\n      width: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 14\n    }, this) : renderApprovalOrStakeButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CardActions, \"hjnplFqbvhuw47rU93R7aiV/ZIA=\", false, function () {\n  return [useTranslation, useAppDispatch, useERC20, useApproveFarm];\n});\n\n_c2 = CardActions;\nexport default CardActions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Action\");\n$RefreshReg$(_c2, \"CardActions\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/views/Farms/components/FarmCard/CardActionsContainer.tsx"],"names":["React","useMemo","useState","useCallback","styled","BigNumber","Button","Flex","Text","getAddress","useAppDispatch","fetchFarmUserDataAsync","useTranslation","useERC20","ConnectWalletButton","StakeAction","HarvestAction","useApproveFarm","Action","div","CardActions","farm","account","addLiquidityUrl","cakePrice","lpLabel","t","requestedApproval","setRequestedApproval","pid","lpAddresses","tokenAddress","isTokenOnly","depositFeeBP","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","earnings","earningsAsString","userData","lpAddress","token","isApproved","isGreaterThan","dispatch","lpContract","lptContract","onApprove","handleApprove","pids","e","console","error","renderApprovalOrStakeButton","lpSymbol","apr"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@zaigar-finance/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddress, isTokenOnly, depositFeeBP } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const token = getAddress(tokenAddress)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return token;\r\n    }\r\n    return lpAddress;\r\n  }, [lpAddress, token, isTokenOnly])\r\n\r\n  const lptContract = useERC20(lpContract)\r\n\r\n  const { onApprove } = useApproveFarm(lptContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        isTokenOnly= { isTokenOnly }\r\n        stakedBalance = { stakedBalance }\r\n    tokenBalance = { tokenBalance }\r\n    tokenName = { farm.lpSymbol }\r\n    pid = { pid }\r\n    depositFeeBP = { depositFeeBP }\r\n    apr = { farm.apr }\r\n    lpLabel = { lpLabel }\r\n    cakePrice = { cakePrice }\r\n    addLiquidityUrl = { addLiquidityUrl }\r\n      />\r\n    ) : (\r\n  <Button mt= \"8px\" width = \"100%\" disabled = { requestedApproval } onClick = { handleApprove } >\r\n    { t('Enable Contract') }\r\n    < /Button>\r\n    )\r\n  }\r\n\r\nreturn (\r\n  <Action>\r\n  <Flex>\r\n  <Text bold textTransform = \"uppercase\" color = \"secondary\" fontSize = \"12px\" pr = \"4px\" >\r\n    ZFAI\r\n    < /Text>\r\n    < Text bold textTransform = \"uppercase\" color = \"textSubtle\" fontSize = \"12px\" >\r\n      { t('Earned') }\r\n      < /Text>\r\n      < /Flex>\r\n      < HarvestAction earnings = { earnings } pid = { pid } />\r\n        <Flex>\r\n        <Text bold textTransform = \"uppercase\" color = \"secondary\" fontSize = \"12px\" pr = \"4px\" >\r\n          { farm.lpSymbol }\r\n          < /Text>\r\n          < Text bold textTransform = \"uppercase\" color = \"textSubtle\" fontSize = \"12px\" >\r\n            { t('Staked') }\r\n            < /Text>\r\n            < /Flex>\r\n{ !account ? <ConnectWalletButton mt=\"8px\" width = \"100%\" /> : renderApprovalOrStakeButton() }\r\n</Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n"]},"metadata":{},"sourceType":"module"}