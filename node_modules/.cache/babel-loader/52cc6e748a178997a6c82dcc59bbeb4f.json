{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\views\\\\Lottery\\\\components\\\\RewardBracketDetail.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Skeleton, Text } from 'components/_uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport Balance from 'components/Balance';\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RewardBracketDetail = _ref => {\n  _s();\n\n  let {\n    rewardBracket,\n    cakeAmount,\n    numberWinners,\n    isHistoricRound,\n    isBurn\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const cakePriceBusd = usePriceCakeBusd();\n  const prizeInBusd = cakeAmount.times(cakePriceBusd);\n\n  const getRewardText = () => {\n    const numberMatch = rewardBracket + 1;\n\n    if (isBurn) {\n      return t('Burn');\n    }\n\n    if (rewardBracket === 5) {\n      return t('Match all %numberMatch%', {\n        numberMatch\n      });\n    }\n\n    return t('Match first %numberMatch%', {\n      numberMatch\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      bold: true,\n      color: isBurn ? 'failure' : 'secondary',\n      children: getRewardText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"2px\",\n        height: 12,\n        width: 90\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"20px\",\n        bold: true,\n        unit: \" CAKE\",\n        value: getBalanceNumber(cakeAmount),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"2px\",\n        height: 12,\n        width: 70\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        prefix: \"~$\",\n        value: getBalanceNumber(prizeInBusd),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), isHistoricRound && cakeAmount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [numberWinners !== '0' && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: [getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), 18, 2), \" CAKE \", t('each')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: [numberWinners, \" \", t('Winners')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardBracketDetail, \"vmqtI5HVIrEp4jEZDUzzJIWSERY=\", false, function () {\n  return [useTranslation, usePriceCakeBusd];\n});\n\n_c = RewardBracketDetail;\nexport default RewardBracketDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"RewardBracketDetail\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/views/Lottery/components/RewardBracketDetail.tsx"],"names":["React","Flex","Skeleton","Text","useTranslation","usePriceCakeBusd","Balance","getBalanceNumber","getFullDisplayBalance","RewardBracketDetail","rewardBracket","cakeAmount","numberWinners","isHistoricRound","isBurn","t","cakePriceBusd","prizeInBusd","times","getRewardText","numberMatch","isNaN","div","parseInt"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Skeleton, Text } from 'components/_uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface RewardBracketDetailProps {\r\n  cakeAmount: BigNumber\r\n  rewardBracket?: number\r\n  numberWinners?: string\r\n  isBurn?: boolean\r\n  isHistoricRound?: boolean\r\n}\r\n\r\nconst RewardBracketDetail: React.FC<RewardBracketDetailProps> = ({\r\n  rewardBracket,\r\n  cakeAmount,\r\n  numberWinners,\r\n  isHistoricRound,\r\n  isBurn,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const prizeInBusd = cakeAmount.times(cakePriceBusd)\r\n\r\n  const getRewardText = () => {\r\n    const numberMatch = rewardBracket + 1\r\n    if (isBurn) {\r\n      return t('Burn')\r\n    }\r\n    if (rewardBracket === 5) {\r\n      return t('Match all %numberMatch%', { numberMatch })\r\n    }\r\n    return t('Match first %numberMatch%', { numberMatch })\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Text bold color={isBurn ? 'failure' : 'secondary'}>\r\n        {getRewardText()}\r\n      </Text>\r\n      <>\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"2px\" height={12} width={90} />\r\n        ) : (\r\n          <Balance fontSize=\"20px\" bold unit=\" CAKE\" value={getBalanceNumber(cakeAmount)} decimals={0} />\r\n        )}\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"2px\" height={12} width={70} />\r\n        ) : (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" prefix=\"~$\" value={getBalanceNumber(prizeInBusd)} decimals={0} />\r\n        )}\r\n        {isHistoricRound && cakeAmount && (\r\n          <>\r\n            {numberWinners !== '0' && (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                {getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), 18, 2)} CAKE {t('each')}\r\n              </Text>\r\n            )}\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {numberWinners} {t('Winners')}\r\n            </Text>\r\n          </>\r\n        )}\r\n      </>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RewardBracketDetail\r\n"]},"metadata":{},"sourceType":"module"}