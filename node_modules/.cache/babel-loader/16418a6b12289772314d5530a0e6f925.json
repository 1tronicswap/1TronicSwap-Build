{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\components\\\\Slider\\\\Slider.tsx\";\nimport React from \"react\";\nimport { Box } from \"../Box\";\nimport { SaberSlider, BarBackground, BarProgress, SaberGrip, StyledInput, SliderLabel, SliderLabelContainer } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Slider = _ref => {\n  let {\n    name,\n    min,\n    max,\n    value,\n    onValueChanged,\n    valueLabel,\n    step = \"any\",\n    disabled = false,\n    ...props\n  } = _ref;\n\n  const handleChange = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    onValueChanged(parseFloat(target.value));\n  };\n\n  const progressPercentage = value / max * 100;\n  const isMax = value === max;\n  let progressWidth;\n\n  if (progressPercentage <= 10) {\n    progressWidth = `${progressPercentage + 0.5}%`;\n  } else if (progressPercentage >= 90) {\n    progressWidth = `${progressPercentage - 4}%`;\n  } else if (progressPercentage >= 60) {\n    progressWidth = `${progressPercentage - 2.5}%`;\n  } else {\n    progressWidth = `${progressPercentage}%`;\n  }\n\n  const labelProgress = isMax ? \"calc(100% - 12px)\" : `${progressPercentage}%`;\n  const displayValueLabel = isMax ? \"MAX\" : valueLabel;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    height: \"48px\",\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(SaberGrip, {\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SaberSlider, {\n      children: [/*#__PURE__*/_jsxDEV(BarBackground, {\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BarProgress, {\n        style: {\n          width: progressWidth\n        },\n        disabled: disabled,\n        isMax: isMax\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledInput, {\n        name: name,\n        type: \"range\",\n        min: min,\n        max: max,\n        value: value,\n        step: step,\n        onChange: handleChange,\n        isMax: isMax,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), valueLabel && /*#__PURE__*/_jsxDEV(SliderLabelContainer, {\n      children: /*#__PURE__*/_jsxDEV(SliderLabel, {\n        progress: labelProgress,\n        children: displayValueLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Slider;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/components/Slider/Slider.tsx"],"names":["React","Box","SaberSlider","BarBackground","BarProgress","SaberGrip","StyledInput","SliderLabel","SliderLabelContainer","Slider","name","min","max","value","onValueChanged","valueLabel","step","disabled","props","handleChange","target","parseFloat","progressPercentage","isMax","progressWidth","labelProgress","displayValueLabel","width"],"mappings":"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","sourcesContent":["import React, { ChangeEvent } from \"react\";\r\nimport { Box } from \"../Box\";\r\nimport {\r\n  SaberSlider,\r\n  BarBackground,\r\n  BarProgress,\r\n  SaberGrip,\r\n  StyledInput,\r\n  SliderLabel,\r\n  SliderLabelContainer,\r\n} from \"./styles\";\r\nimport SliderProps from \"./types\";\r\n\r\nconst Slider: React.FC<SliderProps> = ({\r\n  name,\r\n  min,\r\n  max,\r\n  value,\r\n  onValueChanged,\r\n  valueLabel,\r\n  step = \"any\",\r\n  disabled = false,\r\n  ...props\r\n}) => {\r\n  const handleChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n    onValueChanged(parseFloat(target.value));\r\n  };\r\n\r\n  const progressPercentage = (value / max) * 100;\r\n  const isMax = value === max;\r\n  let progressWidth: string;\r\n  if (progressPercentage <= 10) {\r\n    progressWidth = `${progressPercentage + 0.5}%`;\r\n  } else if (progressPercentage >= 90) {\r\n    progressWidth = `${progressPercentage - 4}%`;\r\n  } else if (progressPercentage >= 60) {\r\n    progressWidth = `${progressPercentage - 2.5}%`;\r\n  } else {\r\n    progressWidth = `${progressPercentage}%`;\r\n  }\r\n  const labelProgress = isMax ? \"calc(100% - 12px)\" : `${progressPercentage}%`;\r\n  const displayValueLabel = isMax ? \"MAX\" : valueLabel;\r\n  return (\r\n    <Box position=\"relative\" height=\"48px\" {...props}>\r\n      <SaberGrip disabled={disabled} />\r\n      <SaberSlider>\r\n        <BarBackground disabled={disabled} />\r\n        <BarProgress style={{ width: progressWidth }} disabled={disabled} isMax={isMax}/>\r\n        <StyledInput\r\n          name={name}\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          value={value}\r\n          step={step}\r\n          onChange={handleChange}\r\n          isMax={isMax}\r\n          disabled={disabled}\r\n        />\r\n      </SaberSlider>\r\n      {valueLabel && (\r\n        <SliderLabelContainer>\r\n          <SliderLabel progress={labelProgress}>{displayValueLabel}</SliderLabel>\r\n        </SliderLabelContainer>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n"]},"metadata":{},"sourceType":"module"}