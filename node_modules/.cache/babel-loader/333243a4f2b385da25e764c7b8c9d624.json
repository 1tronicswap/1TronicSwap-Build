{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\hooks\\\\useTooltip\\\\useTooltip.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { usePopper } from \"react-popper\";\nimport { ThemeProvider } from \"styled-components\";\nimport { light, dark } from \"../../theme\";\nimport { StyledTooltip, Arrow } from \"./StyledTooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction isTouchDevice() {\n  return \"ontouchstart\" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n}\n\nconst invertTheme = currentTheme => {\n  if (currentTheme.isDark) {\n    return light;\n  }\n\n  return dark;\n};\n\nconst portalRoot = document.getElementById(\"portal-root\");\n\nconst useTooltip = (content, options) => {\n  _s();\n\n  const {\n    placement = \"auto\",\n    trigger = \"hover\",\n    arrowPadding = 16,\n    tooltipPadding = {\n      left: 16,\n      right: 16\n    },\n    tooltipOffset = [0, 10]\n  } = options;\n  const [targetElement, setTargetElement] = useState(null);\n  const [tooltipElement, setTooltipElement] = useState(null);\n  const [arrowElement, setArrowElement] = useState(null);\n  const [visible, setVisible] = useState(false);\n  const isHoveringOverTooltip = useRef(false);\n  const hideTimeout = useRef();\n  const hideTooltip = useCallback(e => {\n    const hide = () => {\n      e.stopPropagation();\n      e.preventDefault();\n      setVisible(false);\n    };\n\n    if (trigger === \"hover\") {\n      if (hideTimeout.current) {\n        window.clearTimeout(hideTimeout.current);\n      }\n\n      if (e.target === tooltipElement) {\n        isHoveringOverTooltip.current = false;\n      }\n\n      if (!isHoveringOverTooltip.current) {\n        hideTimeout.current = window.setTimeout(() => {\n          if (!isHoveringOverTooltip.current) {\n            hide();\n          }\n        }, 100);\n      }\n    } else {\n      hide();\n    }\n  }, [tooltipElement, trigger]);\n  const showTooltip = useCallback(e => {\n    e.stopPropagation();\n    e.preventDefault();\n    setVisible(true);\n\n    if (trigger === \"hover\") {\n      if (e.target === targetElement) {\n        // If we were about to close the tooltip and got back to it\n        // then prevent closing it.\n        clearTimeout(hideTimeout.current);\n      }\n\n      if (e.target === tooltipElement) {\n        isHoveringOverTooltip.current = true;\n      }\n    }\n  }, [tooltipElement, targetElement, trigger]);\n  const toggleTooltip = useCallback(e => {\n    e.stopPropagation();\n    setVisible(!visible);\n  }, [visible]); // Trigger = hover\n\n  useEffect(() => {\n    if (targetElement === null || trigger !== \"hover\") return undefined;\n\n    if (isTouchDevice()) {\n      targetElement.addEventListener(\"touchstart\", showTooltip);\n      targetElement.addEventListener(\"touchend\", hideTooltip);\n    } else {\n      targetElement.addEventListener(\"mouseenter\", showTooltip);\n      targetElement.addEventListener(\"mouseleave\", hideTooltip);\n    }\n\n    return () => {\n      targetElement.removeEventListener(\"touchstart\", showTooltip);\n      targetElement.removeEventListener(\"touchend\", hideTooltip);\n      targetElement.removeEventListener(\"mouseenter\", showTooltip);\n      targetElement.removeEventListener(\"mouseleave\", showTooltip);\n    };\n  }, [trigger, targetElement, hideTooltip, showTooltip]); // Keep tooltip open when cursor moves from the targetElement to the tooltip\n\n  useEffect(() => {\n    if (tooltipElement === null || trigger !== \"hover\") return undefined;\n    tooltipElement.addEventListener(\"mouseenter\", showTooltip);\n    tooltipElement.addEventListener(\"mouseleave\", hideTooltip);\n    return () => {\n      tooltipElement.removeEventListener(\"mouseenter\", showTooltip);\n      tooltipElement.removeEventListener(\"mouseleave\", hideTooltip);\n    };\n  }, [trigger, tooltipElement, hideTooltip, showTooltip]); // Trigger = click\n\n  useEffect(() => {\n    if (targetElement === null || trigger !== \"click\") return undefined;\n    targetElement.addEventListener(\"click\", toggleTooltip);\n    return () => targetElement.removeEventListener(\"click\", toggleTooltip);\n  }, [trigger, targetElement, visible, toggleTooltip]); // Handle click outside\n\n  useEffect(() => {\n    if (trigger !== \"click\") return undefined;\n\n    const handleClickOutside = _ref => {\n      let {\n        target\n      } = _ref;\n\n      if (target instanceof Node) {\n        if (tooltipElement != null && targetElement != null && !tooltipElement.contains(target) && !targetElement.contains(target)) {\n          setVisible(false);\n        }\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [trigger, targetElement, tooltipElement]); // Trigger = focus\n\n  useEffect(() => {\n    if (targetElement === null || trigger !== \"focus\") return undefined;\n    targetElement.addEventListener(\"focus\", showTooltip);\n    targetElement.addEventListener(\"blur\", hideTooltip);\n    return () => {\n      targetElement.removeEventListener(\"focus\", showTooltip);\n      targetElement.removeEventListener(\"blur\", hideTooltip);\n    };\n  }, [trigger, targetElement, showTooltip, hideTooltip]); // On small screens Popper.js tries to squeeze the tooltip to available space without overflowing beyound the edge\n  // of the screen. While it works fine when the element is in the middle of the screen it does not handle well the\n  // cases when the target element is very close to the edge of the screen - no margin is applied between the tooltip\n  // and the screen edge.\n  // preventOverflow mitigates this behaviour, default 16px paddings on left and right solve the problem for all screen sizes\n  // that we support.\n  // Note that in the farm page where there are tooltips very close to the edge of the screen this padding works perfectly\n  // even on the iPhone 5 screen (320px wide), BUT in the storybook with the contrived example ScreenEdges example\n  // iPhone 5 behaves differently overflowing beyound the edge. All paddings are identical so I have no idea why it is,\n  // and fixing that seems like a very bad use of time.\n\n  const {\n    styles,\n    attributes\n  } = usePopper(targetElement, tooltipElement, {\n    placement,\n    modifiers: [{\n      name: \"arrow\",\n      options: {\n        element: arrowElement,\n        padding: arrowPadding\n      }\n    }, {\n      name: \"offset\",\n      options: {\n        offset: tooltipOffset\n      }\n    }, {\n      name: \"preventOverflow\",\n      options: {\n        padding: tooltipPadding\n      }\n    }]\n  });\n\n  const tooltip = /*#__PURE__*/_jsxDEV(StyledTooltip, {\n    ref: setTooltipElement,\n    style: styles.popper,\n    ...attributes.popper,\n    children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: invertTheme,\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {\n      ref: setArrowElement,\n      style: styles.arrow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n\n  const tooltipInPortal = portalRoot ? /*#__PURE__*/createPortal(tooltip, portalRoot) : null;\n  return {\n    targetRef: setTargetElement,\n    tooltip: tooltipInPortal !== null && tooltipInPortal !== void 0 ? tooltipInPortal : tooltip,\n    tooltipVisible: visible\n  };\n};\n\n_s(useTooltip, \"/QQU0NQ87BNQL7az5iMWtGDMoEo=\", false, function () {\n  return [usePopper];\n});\n\nexport default useTooltip;","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/hooks/useTooltip/useTooltip.tsx"],"names":["React","useState","useEffect","useCallback","useRef","createPortal","usePopper","ThemeProvider","light","dark","StyledTooltip","Arrow","isTouchDevice","window","navigator","maxTouchPoints","msMaxTouchPoints","invertTheme","currentTheme","isDark","portalRoot","document","getElementById","useTooltip","content","options","placement","trigger","arrowPadding","tooltipPadding","left","right","tooltipOffset","targetElement","setTargetElement","tooltipElement","setTooltipElement","arrowElement","setArrowElement","visible","setVisible","isHoveringOverTooltip","hideTimeout","hideTooltip","e","hide","stopPropagation","preventDefault","current","clearTimeout","target","setTimeout","showTooltip","toggleTooltip","undefined","addEventListener","removeEventListener","handleClickOutside","Node","contains","styles","attributes","modifiers","name","element","padding","offset","tooltip","popper","arrow","tooltipInPortal","targetRef","tooltipVisible"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,aAAT,QAA4C,mBAA5C;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,iBAArC;;;AAGA,SAASC,aAAT,GAAyB;AACvB,SAAO,kBAAkBC,MAAlB,IAA4BC,SAAS,CAACC,cAAV,GAA2B,CAAvD,IAA4DD,SAAS,CAACE,gBAAV,GAA6B,CAAhG;AACD;;AAED,MAAMC,WAAW,GAAIC,YAAD,IAAgC;AAClD,MAAIA,YAAY,CAACC,MAAjB,EAAyB;AACvB,WAAOX,KAAP;AACD;;AACD,SAAOC,IAAP;AACD,CALD;;AAOA,MAAMW,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAnB;;AAEA,MAAMC,UAAU,GAAG,CAACC,OAAD,EAA2BC,OAA3B,KAAoE;AAAA;;AACrF,QAAM;AACJC,IAAAA,SAAS,GAAG,MADR;AAEJC,IAAAA,OAAO,GAAG,OAFN;AAGJC,IAAAA,YAAY,GAAG,EAHX;AAIJC,IAAAA,cAAc,GAAG;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,KAAK,EAAE;AAAnB,KAJb;AAKJC,IAAAA,aAAa,GAAG,CAAC,CAAD,EAAI,EAAJ;AALZ,MAMFP,OANJ;AAOA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCjC,QAAQ,CAAqB,IAArB,CAAlD;AACA,QAAM,CAACkC,cAAD,EAAiBC,iBAAjB,IAAsCnC,QAAQ,CAAqB,IAArB,CAApD;AACA,QAAM,CAACoC,YAAD,EAAeC,eAAf,IAAkCrC,QAAQ,CAAqB,IAArB,CAAhD;AAEA,QAAM,CAACsC,OAAD,EAAUC,UAAV,IAAwBvC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMwC,qBAAqB,GAAGrC,MAAM,CAAC,KAAD,CAApC;AACA,QAAMsC,WAAW,GAAGtC,MAAM,EAA1B;AAEA,QAAMuC,WAAW,GAAGxC,WAAW,CAC5ByC,CAAD,IAAc;AACZ,UAAMC,IAAI,GAAG,MAAM;AACjBD,MAAAA,CAAC,CAACE,eAAF;AACAF,MAAAA,CAAC,CAACG,cAAF;AACAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD;;AAMA,QAAIb,OAAO,KAAK,OAAhB,EAAyB;AACvB,UAAIe,WAAW,CAACM,OAAhB,EAAyB;AACvBnC,QAAAA,MAAM,CAACoC,YAAP,CAAoBP,WAAW,CAACM,OAAhC;AACD;;AACD,UAAIJ,CAAC,CAACM,MAAF,KAAaf,cAAjB,EAAiC;AAC/BM,QAAAA,qBAAqB,CAACO,OAAtB,GAAgC,KAAhC;AACD;;AACD,UAAI,CAACP,qBAAqB,CAACO,OAA3B,EAAoC;AAClCN,QAAAA,WAAW,CAACM,OAAZ,GAAsBnC,MAAM,CAACsC,UAAP,CAAkB,MAAM;AAC5C,cAAI,CAACV,qBAAqB,CAACO,OAA3B,EAAoC;AAClCH,YAAAA,IAAI;AACL;AACF,SAJqB,EAInB,GAJmB,CAAtB;AAKD;AACF,KAdD,MAcO;AACLA,MAAAA,IAAI;AACL;AACF,GAzB4B,EA0B7B,CAACV,cAAD,EAAiBR,OAAjB,CA1B6B,CAA/B;AA6BA,QAAMyB,WAAW,GAAGjD,WAAW,CAC5ByC,CAAD,IAAc;AACZA,IAAAA,CAAC,CAACE,eAAF;AACAF,IAAAA,CAAC,CAACG,cAAF;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAIb,OAAO,KAAK,OAAhB,EAAyB;AACvB,UAAIiB,CAAC,CAACM,MAAF,KAAajB,aAAjB,EAAgC;AAC9B;AACA;AACAgB,QAAAA,YAAY,CAACP,WAAW,CAACM,OAAb,CAAZ;AACD;;AACD,UAAIJ,CAAC,CAACM,MAAF,KAAaf,cAAjB,EAAiC;AAC/BM,QAAAA,qBAAqB,CAACO,OAAtB,GAAgC,IAAhC;AACD;AACF;AACF,GAf4B,EAgB7B,CAACb,cAAD,EAAiBF,aAAjB,EAAgCN,OAAhC,CAhB6B,CAA/B;AAmBA,QAAM0B,aAAa,GAAGlD,WAAW,CAC9ByC,CAAD,IAAc;AACZA,IAAAA,CAAC,CAACE,eAAF;AACAN,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAJ8B,EAK/B,CAACA,OAAD,CAL+B,CAAjC,CAhEqF,CAwErF;;AACArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+B,aAAa,KAAK,IAAlB,IAA0BN,OAAO,KAAK,OAA1C,EAAmD,OAAO2B,SAAP;;AAEnD,QAAI1C,aAAa,EAAjB,EAAqB;AACnBqB,MAAAA,aAAa,CAACsB,gBAAd,CAA+B,YAA/B,EAA6CH,WAA7C;AACAnB,MAAAA,aAAa,CAACsB,gBAAd,CAA+B,UAA/B,EAA2CZ,WAA3C;AACD,KAHD,MAGO;AACLV,MAAAA,aAAa,CAACsB,gBAAd,CAA+B,YAA/B,EAA6CH,WAA7C;AACAnB,MAAAA,aAAa,CAACsB,gBAAd,CAA+B,YAA/B,EAA6CZ,WAA7C;AACD;;AACD,WAAO,MAAM;AACXV,MAAAA,aAAa,CAACuB,mBAAd,CAAkC,YAAlC,EAAgDJ,WAAhD;AACAnB,MAAAA,aAAa,CAACuB,mBAAd,CAAkC,UAAlC,EAA8Cb,WAA9C;AACAV,MAAAA,aAAa,CAACuB,mBAAd,CAAkC,YAAlC,EAAgDJ,WAAhD;AACAnB,MAAAA,aAAa,CAACuB,mBAAd,CAAkC,YAAlC,EAAgDJ,WAAhD;AACD,KALD;AAMD,GAhBQ,EAgBN,CAACzB,OAAD,EAAUM,aAAV,EAAyBU,WAAzB,EAAsCS,WAAtC,CAhBM,CAAT,CAzEqF,CA2FrF;;AACAlD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiC,cAAc,KAAK,IAAnB,IAA2BR,OAAO,KAAK,OAA3C,EAAoD,OAAO2B,SAAP;AAEpDnB,IAAAA,cAAc,CAACoB,gBAAf,CAAgC,YAAhC,EAA8CH,WAA9C;AACAjB,IAAAA,cAAc,CAACoB,gBAAf,CAAgC,YAAhC,EAA8CZ,WAA9C;AACA,WAAO,MAAM;AACXR,MAAAA,cAAc,CAACqB,mBAAf,CAAmC,YAAnC,EAAiDJ,WAAjD;AACAjB,MAAAA,cAAc,CAACqB,mBAAf,CAAmC,YAAnC,EAAiDb,WAAjD;AACD,KAHD;AAID,GATQ,EASN,CAAChB,OAAD,EAAUQ,cAAV,EAA0BQ,WAA1B,EAAuCS,WAAvC,CATM,CAAT,CA5FqF,CAuGrF;;AACAlD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+B,aAAa,KAAK,IAAlB,IAA0BN,OAAO,KAAK,OAA1C,EAAmD,OAAO2B,SAAP;AAEnDrB,IAAAA,aAAa,CAACsB,gBAAd,CAA+B,OAA/B,EAAwCF,aAAxC;AAEA,WAAO,MAAMpB,aAAa,CAACuB,mBAAd,CAAkC,OAAlC,EAA2CH,aAA3C,CAAb;AACD,GANQ,EAMN,CAAC1B,OAAD,EAAUM,aAAV,EAAyBM,OAAzB,EAAkCc,aAAlC,CANM,CAAT,CAxGqF,CAgHrF;;AACAnD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,OAAO,KAAK,OAAhB,EAAyB,OAAO2B,SAAP;;AAEzB,UAAMG,kBAAkB,GAAG,QAAuB;AAAA,UAAtB;AAAEP,QAAAA;AAAF,OAAsB;;AAChD,UAAIA,MAAM,YAAYQ,IAAtB,EAA4B;AAC1B,YACEvB,cAAc,IAAI,IAAlB,IACAF,aAAa,IAAI,IADjB,IAEA,CAACE,cAAc,CAACwB,QAAf,CAAwBT,MAAxB,CAFD,IAGA,CAACjB,aAAa,CAAC0B,QAAd,CAAuBT,MAAvB,CAJH,EAKE;AACAV,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;AACF,KAXD;;AAYAnB,IAAAA,QAAQ,CAACkC,gBAAT,CAA0B,WAA1B,EAAuCE,kBAAvC;AAEA,WAAO,MAAMpC,QAAQ,CAACmC,mBAAT,CAA6B,WAA7B,EAA0CC,kBAA1C,CAAb;AACD,GAlBQ,EAkBN,CAAC9B,OAAD,EAAUM,aAAV,EAAyBE,cAAzB,CAlBM,CAAT,CAjHqF,CAqIrF;;AACAjC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+B,aAAa,KAAK,IAAlB,IAA0BN,OAAO,KAAK,OAA1C,EAAmD,OAAO2B,SAAP;AAEnDrB,IAAAA,aAAa,CAACsB,gBAAd,CAA+B,OAA/B,EAAwCH,WAAxC;AACAnB,IAAAA,aAAa,CAACsB,gBAAd,CAA+B,MAA/B,EAAuCZ,WAAvC;AACA,WAAO,MAAM;AACXV,MAAAA,aAAa,CAACuB,mBAAd,CAAkC,OAAlC,EAA2CJ,WAA3C;AACAnB,MAAAA,aAAa,CAACuB,mBAAd,CAAkC,MAAlC,EAA0Cb,WAA1C;AACD,KAHD;AAID,GATQ,EASN,CAAChB,OAAD,EAAUM,aAAV,EAAyBmB,WAAzB,EAAsCT,WAAtC,CATM,CAAT,CAtIqF,CAiJrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAM;AAAEiB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBvD,SAAS,CAAC2B,aAAD,EAAgBE,cAAhB,EAAgC;AACtET,IAAAA,SADsE;AAEtEoC,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,IAAI,EAAE,OADR;AAEEtC,MAAAA,OAAO,EAAE;AAAEuC,QAAAA,OAAO,EAAE3B,YAAX;AAAyB4B,QAAAA,OAAO,EAAErC;AAAlC;AAFX,KADS,EAKT;AAAEmC,MAAAA,IAAI,EAAE,QAAR;AAAkBtC,MAAAA,OAAO,EAAE;AAAEyC,QAAAA,MAAM,EAAElC;AAAV;AAA3B,KALS,EAMT;AAAE+B,MAAAA,IAAI,EAAE,iBAAR;AAA2BtC,MAAAA,OAAO,EAAE;AAAEwC,QAAAA,OAAO,EAAEpC;AAAX;AAApC,KANS;AAF2D,GAAhC,CAAxC;;AAYA,QAAMsC,OAAO,gBACX,QAAC,aAAD;AAAe,IAAA,GAAG,EAAE/B,iBAApB;AAAuC,IAAA,KAAK,EAAEwB,MAAM,CAACQ,MAArD;AAAA,OAAiEP,UAAU,CAACO,MAA5E;AAAA,4BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEnD,WAAtB;AAAA,gBAAoCO;AAApC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,GAAG,EAAEc,eAAZ;AAA6B,MAAA,KAAK,EAAEsB,MAAM,CAACS;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,QAAMC,eAAe,GAAGlD,UAAU,gBAAGf,YAAY,CAAC8D,OAAD,EAAU/C,UAAV,CAAf,GAAuC,IAAzE;AAEA,SAAO;AACLmD,IAAAA,SAAS,EAAErC,gBADN;AAELiC,IAAAA,OAAO,EAAEG,eAAF,aAAEA,eAAF,cAAEA,eAAF,GAAqBH,OAFvB;AAGLK,IAAAA,cAAc,EAAEjC;AAHX,GAAP;AAKD,CArLD;;GAAMhB,U;UA2J2BjB,S;;;AA4BjC,eAAeiB,UAAf","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { usePopper } from \"react-popper\";\r\nimport { ThemeProvider, DefaultTheme } from \"styled-components\";\r\nimport { light, dark } from \"../../theme\";\r\nimport { StyledTooltip, Arrow } from \"./StyledTooltip\";\r\nimport { TooltipOptions, TooltipRefs } from \"./types\";\r\n\r\nfunction isTouchDevice() {\r\n  return \"ontouchstart\" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\r\n}\r\n\r\nconst invertTheme = (currentTheme: DefaultTheme) => {\r\n  if (currentTheme.isDark) {\r\n    return light;\r\n  }\r\n  return dark;\r\n};\r\n\r\nconst portalRoot = document.getElementById(\"portal-root\");\r\n\r\nconst useTooltip = (content: React.ReactNode, options: TooltipOptions): TooltipRefs => {\r\n  const {\r\n    placement = \"auto\",\r\n    trigger = \"hover\",\r\n    arrowPadding = 16,\r\n    tooltipPadding = { left: 16, right: 16 },\r\n    tooltipOffset = [0, 10],\r\n  } = options;\r\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>(null);\r\n  const [tooltipElement, setTooltipElement] = useState<HTMLElement | null>(null);\r\n  const [arrowElement, setArrowElement] = useState<HTMLElement | null>(null);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const isHoveringOverTooltip = useRef(false);\r\n  const hideTimeout = useRef<number>();\r\n\r\n  const hideTooltip = useCallback(\r\n    (e: Event) => {\r\n      const hide = () => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        setVisible(false);\r\n      };\r\n\r\n      if (trigger === \"hover\") {\r\n        if (hideTimeout.current) {\r\n          window.clearTimeout(hideTimeout.current);\r\n        }\r\n        if (e.target === tooltipElement) {\r\n          isHoveringOverTooltip.current = false;\r\n        }\r\n        if (!isHoveringOverTooltip.current) {\r\n          hideTimeout.current = window.setTimeout(() => {\r\n            if (!isHoveringOverTooltip.current) {\r\n              hide();\r\n            }\r\n          }, 100);\r\n        }\r\n      } else {\r\n        hide();\r\n      }\r\n    },\r\n    [tooltipElement, trigger]\r\n  );\r\n\r\n  const showTooltip = useCallback(\r\n    (e: Event) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setVisible(true);\r\n      if (trigger === \"hover\") {\r\n        if (e.target === targetElement) {\r\n          // If we were about to close the tooltip and got back to it\r\n          // then prevent closing it.\r\n          clearTimeout(hideTimeout.current);\r\n        }\r\n        if (e.target === tooltipElement) {\r\n          isHoveringOverTooltip.current = true;\r\n        }\r\n      }\r\n    },\r\n    [tooltipElement, targetElement, trigger]\r\n  );\r\n\r\n  const toggleTooltip = useCallback(\r\n    (e: Event) => {\r\n      e.stopPropagation();\r\n      setVisible(!visible);\r\n    },\r\n    [visible]\r\n  );\r\n\r\n  // Trigger = hover\r\n  useEffect(() => {\r\n    if (targetElement === null || trigger !== \"hover\") return undefined;\r\n\r\n    if (isTouchDevice()) {\r\n      targetElement.addEventListener(\"touchstart\", showTooltip);\r\n      targetElement.addEventListener(\"touchend\", hideTooltip);\r\n    } else {\r\n      targetElement.addEventListener(\"mouseenter\", showTooltip);\r\n      targetElement.addEventListener(\"mouseleave\", hideTooltip);\r\n    }\r\n    return () => {\r\n      targetElement.removeEventListener(\"touchstart\", showTooltip);\r\n      targetElement.removeEventListener(\"touchend\", hideTooltip);\r\n      targetElement.removeEventListener(\"mouseenter\", showTooltip);\r\n      targetElement.removeEventListener(\"mouseleave\", showTooltip);\r\n    };\r\n  }, [trigger, targetElement, hideTooltip, showTooltip]);\r\n\r\n  // Keep tooltip open when cursor moves from the targetElement to the tooltip\r\n  useEffect(() => {\r\n    if (tooltipElement === null || trigger !== \"hover\") return undefined;\r\n\r\n    tooltipElement.addEventListener(\"mouseenter\", showTooltip);\r\n    tooltipElement.addEventListener(\"mouseleave\", hideTooltip);\r\n    return () => {\r\n      tooltipElement.removeEventListener(\"mouseenter\", showTooltip);\r\n      tooltipElement.removeEventListener(\"mouseleave\", hideTooltip);\r\n    };\r\n  }, [trigger, tooltipElement, hideTooltip, showTooltip]);\r\n\r\n  // Trigger = click\r\n  useEffect(() => {\r\n    if (targetElement === null || trigger !== \"click\") return undefined;\r\n\r\n    targetElement.addEventListener(\"click\", toggleTooltip);\r\n\r\n    return () => targetElement.removeEventListener(\"click\", toggleTooltip);\r\n  }, [trigger, targetElement, visible, toggleTooltip]);\r\n\r\n  // Handle click outside\r\n  useEffect(() => {\r\n    if (trigger !== \"click\") return undefined;\r\n\r\n    const handleClickOutside = ({ target }: Event) => {\r\n      if (target instanceof Node) {\r\n        if (\r\n          tooltipElement != null &&\r\n          targetElement != null &&\r\n          !tooltipElement.contains(target) &&\r\n          !targetElement.contains(target)\r\n        ) {\r\n          setVisible(false);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, [trigger, targetElement, tooltipElement]);\r\n\r\n  // Trigger = focus\r\n  useEffect(() => {\r\n    if (targetElement === null || trigger !== \"focus\") return undefined;\r\n\r\n    targetElement.addEventListener(\"focus\", showTooltip);\r\n    targetElement.addEventListener(\"blur\", hideTooltip);\r\n    return () => {\r\n      targetElement.removeEventListener(\"focus\", showTooltip);\r\n      targetElement.removeEventListener(\"blur\", hideTooltip);\r\n    };\r\n  }, [trigger, targetElement, showTooltip, hideTooltip]);\r\n\r\n  // On small screens Popper.js tries to squeeze the tooltip to available space without overflowing beyound the edge\r\n  // of the screen. While it works fine when the element is in the middle of the screen it does not handle well the\r\n  // cases when the target element is very close to the edge of the screen - no margin is applied between the tooltip\r\n  // and the screen edge.\r\n  // preventOverflow mitigates this behaviour, default 16px paddings on left and right solve the problem for all screen sizes\r\n  // that we support.\r\n  // Note that in the farm page where there are tooltips very close to the edge of the screen this padding works perfectly\r\n  // even on the iPhone 5 screen (320px wide), BUT in the storybook with the contrived example ScreenEdges example\r\n  // iPhone 5 behaves differently overflowing beyound the edge. All paddings are identical so I have no idea why it is,\r\n  // and fixing that seems like a very bad use of time.\r\n  const { styles, attributes } = usePopper(targetElement, tooltipElement, {\r\n    placement,\r\n    modifiers: [\r\n      {\r\n        name: \"arrow\",\r\n        options: { element: arrowElement, padding: arrowPadding },\r\n      },\r\n      { name: \"offset\", options: { offset: tooltipOffset } },\r\n      { name: \"preventOverflow\", options: { padding: tooltipPadding } },\r\n    ],\r\n  });\r\n\r\n  const tooltip = (\r\n    <StyledTooltip ref={setTooltipElement} style={styles.popper} {...attributes.popper}>\r\n      <ThemeProvider theme={invertTheme}>{content}</ThemeProvider>\r\n      <Arrow ref={setArrowElement} style={styles.arrow} />\r\n    </StyledTooltip>\r\n  );\r\n\r\n  const tooltipInPortal = portalRoot ? createPortal(tooltip, portalRoot) : null;\r\n\r\n  return {\r\n    targetRef: setTargetElement,\r\n    tooltip: tooltipInPortal ?? tooltip,\r\n    tooltipVisible: visible,\r\n  };\r\n};\r\n\r\nexport default useTooltip;\r\n"]},"metadata":{},"sourceType":"module"}