{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext, useEffect } from \"react\";\nimport get from \"lodash/get\";\nimport { Context } from \"./ModalContext\";\n\nconst useModal = function (modal) {\n  _s();\n\n  let closeOnOverlayClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let updateOnPropsChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let modalId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"defaultNodeId\";\n  const {\n    isOpen,\n    nodeId,\n    modalNode,\n    setModalNode,\n    onPresent,\n    onDismiss,\n    setCloseOnOverlayClick\n  } = useContext(Context);\n  const onPresentCallback = useCallback(() => {\n    onPresent(modal, modalId);\n  }, [modal, modalId, onPresent]); // Updates the \"modal\" component if props are changed\n  // Use carefully since it might result in unnecessary rerenders\n  // Typically if modal is staic there is no need for updates, use when you expect props to change\n\n  useEffect(() => {\n    // NodeId is needed in case there are 2 useModal hooks on the same page and one has updateOnPropsChange\n    if (updateOnPropsChange && isOpen && nodeId === modalId) {\n      const modalProps = get(modal, \"props\");\n      const oldModalProps = get(modalNode, \"props\"); // Note: I tried to use lodash isEqual to compare props but it is giving false-negatives too easily\n      // For example ConfirmSwapModal in exchange has ~500 lines prop object that stringifies to same string\n      // and online diff checker says both objects are identical but lodash isEqual thinks they are different\n      // Do not try to replace JSON.stringify with isEqual, high risk of infinite rerenders\n      // TODO: Find a good way to handle modal updates, this whole flow is just backwards-compatible workaround,\n      // would be great to simplify the logic here\n\n      if (modalProps && oldModalProps && JSON.stringify(modalProps) !== JSON.stringify(oldModalProps)) {\n        setModalNode(modal);\n      }\n    }\n  }, [updateOnPropsChange, nodeId, modalId, isOpen, modal, modalNode, setModalNode]);\n  useEffect(() => {\n    setCloseOnOverlayClick(closeOnOverlayClick);\n  }, [closeOnOverlayClick, setCloseOnOverlayClick]);\n  return [onPresentCallback, onDismiss];\n};\n\n_s(useModal, \"9MFLOr6y/eH6s1rS8uVpAIj5XIE=\");\n\nexport default useModal;","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/widgets/Modal/useModal.ts"],"names":["useCallback","useContext","useEffect","get","Context","useModal","modal","closeOnOverlayClick","updateOnPropsChange","modalId","isOpen","nodeId","modalNode","setModalNode","onPresent","onDismiss","setCloseOnOverlayClick","onPresentCallback","modalProps","oldModalProps","JSON","stringify"],"mappings":";;AAAA,SAAgBA,WAAhB,EAA6BC,UAA7B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAGA,MAAMC,QAAQ,GAAG,UACfC,KADe,EAKQ;AAAA;;AAAA,MAHvBC,mBAGuB,uEAHD,IAGC;AAAA,MAFvBC,mBAEuB,uEAFD,KAEC;AAAA,MADvBC,OACuB,uEADb,eACa;AACvB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,SAAlB;AAA6BC,IAAAA,YAA7B;AAA2CC,IAAAA,SAA3C;AAAsDC,IAAAA,SAAtD;AAAiEC,IAAAA;AAAjE,MAA4Ff,UAAU,CAACG,OAAD,CAA5G;AACA,QAAMa,iBAAiB,GAAGjB,WAAW,CAAC,MAAM;AAC1Cc,IAAAA,SAAS,CAACR,KAAD,EAAQG,OAAR,CAAT;AACD,GAFoC,EAElC,CAACH,KAAD,EAAQG,OAAR,EAAiBK,SAAjB,CAFkC,CAArC,CAFuB,CAMvB;AACA;AACA;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIM,mBAAmB,IAAIE,MAAvB,IAAiCC,MAAM,KAAKF,OAAhD,EAAyD;AACvD,YAAMS,UAAU,GAAGf,GAAG,CAACG,KAAD,EAAQ,OAAR,CAAtB;AACA,YAAMa,aAAa,GAAGhB,GAAG,CAACS,SAAD,EAAY,OAAZ,CAAzB,CAFuD,CAGvD;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIM,UAAU,IAAIC,aAAd,IAA+BC,IAAI,CAACC,SAAL,CAAeH,UAAf,MAA+BE,IAAI,CAACC,SAAL,CAAeF,aAAf,CAAlE,EAAiG;AAC/FN,QAAAA,YAAY,CAACP,KAAD,CAAZ;AACD;AACF;AACF,GAfQ,EAeN,CAACE,mBAAD,EAAsBG,MAAtB,EAA8BF,OAA9B,EAAuCC,MAAvC,EAA+CJ,KAA/C,EAAsDM,SAAtD,EAAiEC,YAAjE,CAfM,CAAT;AAiBAX,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,sBAAsB,CAACT,mBAAD,CAAtB;AACD,GAFQ,EAEN,CAACA,mBAAD,EAAsBS,sBAAtB,CAFM,CAAT;AAIA,SAAO,CAACC,iBAAD,EAAoBF,SAApB,CAAP;AACD,CApCD;;GAAMV,Q;;AAsCN,eAAeA,QAAf","sourcesContent":["import React, { useCallback, useContext, useEffect } from \"react\";\r\nimport get from \"lodash/get\";\r\nimport { Context } from \"./ModalContext\";\r\nimport { Handler } from \"./types\";\r\n\r\nconst useModal = (\r\n  modal: React.ReactNode,\r\n  closeOnOverlayClick = true,\r\n  updateOnPropsChange = false,\r\n  modalId = \"defaultNodeId\"\r\n): [Handler, Handler] => {\r\n  const { isOpen, nodeId, modalNode, setModalNode, onPresent, onDismiss, setCloseOnOverlayClick } = useContext(Context);\r\n  const onPresentCallback = useCallback(() => {\r\n    onPresent(modal, modalId);\r\n  }, [modal, modalId, onPresent]);\r\n\r\n  // Updates the \"modal\" component if props are changed\r\n  // Use carefully since it might result in unnecessary rerenders\r\n  // Typically if modal is staic there is no need for updates, use when you expect props to change\r\n  useEffect(() => {\r\n    // NodeId is needed in case there are 2 useModal hooks on the same page and one has updateOnPropsChange\r\n    if (updateOnPropsChange && isOpen && nodeId === modalId) {\r\n      const modalProps = get(modal, \"props\");\r\n      const oldModalProps = get(modalNode, \"props\");\r\n      // Note: I tried to use lodash isEqual to compare props but it is giving false-negatives too easily\r\n      // For example ConfirmSwapModal in exchange has ~500 lines prop object that stringifies to same string\r\n      // and online diff checker says both objects are identical but lodash isEqual thinks they are different\r\n      // Do not try to replace JSON.stringify with isEqual, high risk of infinite rerenders\r\n      // TODO: Find a good way to handle modal updates, this whole flow is just backwards-compatible workaround,\r\n      // would be great to simplify the logic here\r\n      if (modalProps && oldModalProps && JSON.stringify(modalProps) !== JSON.stringify(oldModalProps)) {\r\n        setModalNode(modal);\r\n      }\r\n    }\r\n  }, [updateOnPropsChange, nodeId, modalId, isOpen, modal, modalNode, setModalNode]);\r\n\r\n  useEffect(() => {\r\n    setCloseOnOverlayClick(closeOnOverlayClick);\r\n  }, [closeOnOverlayClick, setCloseOnOverlayClick]);\r\n\r\n  return [onPresentCallback, onDismiss];\r\n};\r\n\r\nexport default useModal;\r\n"]},"metadata":{},"sourceType":"module"}