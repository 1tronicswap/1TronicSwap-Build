{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport launchpadsConfig from 'config/constants/launchpad';\nimport { fetchUserBalances } from 'state/pools/fetchPoolsUser';\nimport { Field, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  data: [...launchpadsConfig],\n  userDataLoaded: false,\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n}; // Thunks\n\nexport const fetchLaunchpadsUserDataAsync = account => async dispatch => {\n  fetchUserBalances(account);\n  const userData = launchpadsConfig.map(launchpad => ({\n    projectId: launchpad.projectId\n  }));\n  dispatch(setLaunchpadsUserData(userData));\n};\nexport const LaunchpadsSlice = createSlice({\n  name: 'Launchpads',\n  initialState,\n  reducers: {\n    setLaunchpadsPublicData: (state, action) => {\n      const liveLaunchpadsData = action.payload;\n      state.data = state.data.map(launchpad => {\n        const liveLaunchpadData = liveLaunchpadsData.find(entry => entry.projectId === launchpad.projectId);\n        return { ...launchpad,\n          ...liveLaunchpadData\n        };\n      });\n    },\n    setLaunchpadsUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = state.data.map(launchpad => {\n        const userLaunchpadData = userData.find(entry => entry.projectId === launchpad.projectId);\n        return { ...launchpad,\n          userData: userLaunchpadData\n        };\n      });\n      state.userDataLoaded = true;\n    },\n    updateLaunchpadsUserData: (state, action) => {\n      const {\n        projectId\n      } = action.payload;\n      const index = state.data.findIndex(p => p.projectId === projectId);\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index]\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(selectCurrency, (state, _ref) => {\n      let {\n        payload: {\n          currencyId,\n          field\n        }\n      } = _ref;\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to launchpad the order\n        return { ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: {\n            currencyId\n          },\n          [otherField]: {\n            currencyId: state[field].currencyId\n          }\n        };\n      } // the normal case\n\n\n      return { ...state,\n        [field]: {\n          currencyId\n        }\n      };\n    }).addCase(switchCurrencies, state => {\n      return { ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: {\n          currencyId: state[Field.OUTPUT].currencyId\n        },\n        [Field.OUTPUT]: {\n          currencyId: state[Field.INPUT].currencyId\n        }\n      };\n    }).addCase(typeInput, (state, _ref2) => {\n      let {\n        payload: {\n          field,\n          typedValue\n        }\n      } = _ref2;\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    }).addCase(setRecipient, (state, _ref3) => {\n      let {\n        payload: {\n          recipient\n        }\n      } = _ref3;\n      state.recipient = recipient;\n    });\n  }\n}); // Actions\n\nexport const {\n  setLaunchpadsPublicData,\n  setLaunchpadsUserData,\n  updateLaunchpadsUserData\n} = LaunchpadsSlice.actions;\nexport default LaunchpadsSlice.reducer;","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/state/launchpad/index.ts"],"names":["createSlice","launchpadsConfig","fetchUserBalances","Field","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","data","userDataLoaded","independentField","INPUT","typedValue","currencyId","OUTPUT","recipient","fetchLaunchpadsUserDataAsync","account","dispatch","userData","map","launchpad","projectId","setLaunchpadsUserData","LaunchpadsSlice","name","reducers","setLaunchpadsPublicData","state","action","liveLaunchpadsData","payload","liveLaunchpadData","find","entry","userLaunchpadData","updateLaunchpadsUserData","index","findIndex","p","extraReducers","builder","addCase","field","otherField","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport launchpadsConfig from 'config/constants/launchpad'\r\nimport { fetchUserBalances } from 'state/pools/fetchPoolsUser'\r\nimport { LaunchpadsState, Launchpad, AppThunk } from 'state/types'\r\nimport { Field, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\n\r\nconst initialState: LaunchpadsState = {\r\n  data: [...launchpadsConfig],\r\n  userDataLoaded: false,\r\n  independentField: Field.INPUT,\r\n  typedValue: '',\r\n  [Field.INPUT]: {\r\n    currencyId: '',\r\n  },\r\n  [Field.OUTPUT]: {\r\n    currencyId: '',\r\n  },\r\n  recipient: null,\r\n}\r\n\r\n// Thunks\r\n\r\nexport const fetchLaunchpadsUserDataAsync =\r\n  (account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    fetchUserBalances(account)\r\n    const userData = launchpadsConfig.map((launchpad) => ({\r\n      projectId: launchpad.projectId,\r\n    }))\r\n\r\n    dispatch(setLaunchpadsUserData(userData))\r\n}\r\n\r\nexport const LaunchpadsSlice = createSlice({\r\n  name: 'Launchpads',\r\n  initialState,\r\n  reducers: {\r\n    setLaunchpadsPublicData: (state, action) => {\r\n      const liveLaunchpadsData: Launchpad[] = action.payload\r\n      state.data = state.data.map((launchpad) => {\r\n        const liveLaunchpadData = liveLaunchpadsData.find((entry) => entry.projectId === launchpad.projectId)\r\n        return { ...launchpad, ...liveLaunchpadData }\r\n      })\r\n    },\r\n    setLaunchpadsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((launchpad) => {\r\n        const userLaunchpadData = userData.find((entry) => entry.projectId === launchpad.projectId)\r\n        return { ...launchpad, userData: userLaunchpadData }\r\n      })\r\n      state.userDataLoaded = true\r\n    },\r\n    updateLaunchpadsUserData: (state, action) => {\r\n      const { projectId } = action.payload\r\n      const index = state.data.findIndex((p) => p.projectId === projectId)\r\n\r\n      if (index >= 0) {\r\n        state.data[index] = { ...state.data[index] }\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\r\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n      if (currencyId === state[otherField].currencyId) {\r\n        // the case where we have to launchpad the order\r\n        return {\r\n          ...state,\r\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n          [field]: { currencyId },\r\n          [otherField]: { currencyId: state[field].currencyId },\r\n        }\r\n      }\r\n      // the normal case\r\n      return {\r\n        ...state,\r\n        [field]: { currencyId },\r\n      }\r\n    })\r\n    .addCase(switchCurrencies, (state) => {\r\n      return {\r\n        ...state,\r\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\r\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\r\n      }\r\n    })\r\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n      }\r\n    })\r\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\r\n      state.recipient = recipient\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLaunchpadsPublicData, setLaunchpadsUserData, updateLaunchpadsUserData } = LaunchpadsSlice.actions\r\n\r\nexport default LaunchpadsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}