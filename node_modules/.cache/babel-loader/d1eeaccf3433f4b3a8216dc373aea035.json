{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\widgets\\\\WalletModal\\\\CopyToClipboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"../../components/Text/Text\";\nimport { CopyIcon } from \"../../components/Svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyleButton = styled(Text).attrs({\n  role: \"button\"\n})`\n  position: relative;\n  display: flex;\n  align-items: center;\n  color: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.colors.background;\n}};\n  :hover{\n    color: ${_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.colors.highlight;\n}};\n    svg{\n      fill: ${_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.colors.highlight;\n}};\n    }\n  }\n`;\n_c = StyleButton;\nconst Tooltip = styled.div`\n  display: ${_ref4 => {\n  let {\n    isTooltipDisplayed\n  } = _ref4;\n  return isTooltipDisplayed ? \"block\" : \"none\";\n}};\n  position: absolute;\n  bottom: -22px;\n  right: 0;\n  left: 0;\n  text-align: center;\n  background-color: ${_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.colors.contrast;\n}};\n  color: ${_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return theme.colors.invertedContrast;\n}};\n  border-radius: 8px;;\n  opacity: 0.7;\n`;\n_c2 = Tooltip;\n\nconst CopyToClipboard = _ref7 => {\n  _s();\n\n  let {\n    toCopy,\n    children,\n    ...props\n  } = _ref7;\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false);\n\n  const copyToClipboardWithCommand = content => {\n    const el = document.createElement(\"textarea\");\n    el.value = content;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(el);\n  };\n\n  function displayTooltip() {\n    setIsTooltipDisplayed(true);\n    setTimeout(() => {\n      setIsTooltipDisplayed(false);\n    }, 1000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyleButton, {\n    small: true,\n    bold: true,\n    onClick: () => {\n      if (navigator.clipboard && navigator.permissions) {\n        navigator.clipboard.writeText(toCopy).then(() => displayTooltip());\n      } else if (document.queryCommandSupported(\"copy\")) {\n        copyToClipboardWithCommand(toCopy);\n        displayTooltip();\n      }\n    },\n    ...props,\n    children: [children, /*#__PURE__*/_jsxDEV(CopyIcon, {\n      width: \"20px\",\n      color: \"hightlight\",\n      ml: \"4px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      isTooltipDisplayed: isTooltipDisplayed,\n      children: \"Copied\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CopyToClipboard, \"aMuvB0XmblIz4mlhiBKuWqHL5iE=\");\n\n_c3 = CopyToClipboard;\nexport default CopyToClipboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyleButton\");\n$RefreshReg$(_c2, \"Tooltip\");\n$RefreshReg$(_c3, \"CopyToClipboard\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/widgets/WalletModal/CopyToClipboard.tsx"],"names":["React","useState","styled","Text","CopyIcon","StyleButton","attrs","role","theme","colors","background","highlight","Tooltip","div","isTooltipDisplayed","contrast","invertedContrast","CopyToClipboard","toCopy","children","props","setIsTooltipDisplayed","copyToClipboardWithCommand","content","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","displayTooltip","setTimeout","navigator","clipboard","permissions","writeText","then","queryCommandSupported"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Text from \"../../components/Text/Text\";\r\nimport { CopyIcon } from \"../../components/Svg\";\r\n\r\ninterface Props {\r\n  toCopy: string;\r\n}\r\n\r\nconst StyleButton = styled(Text).attrs({ role: \"button\" })`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.background};\r\n  :hover{\r\n    color: ${({ theme }) => theme.colors.highlight};\r\n    svg{\r\n      fill: ${({ theme }) => theme.colors.highlight};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tooltip = styled.div<{ isTooltipDisplayed: boolean }>`\r\n  display: ${({ isTooltipDisplayed }) => (isTooltipDisplayed ? \"block\" : \"none\")};\r\n  position: absolute;\r\n  bottom: -22px;\r\n  right: 0;\r\n  left: 0;\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.colors.contrast};\r\n  color: ${({ theme }) => theme.colors.invertedContrast};\r\n  border-radius: 8px;;\r\n  opacity: 0.7;\r\n`;\r\n\r\nconst CopyToClipboard: React.FC<Props> = ({ toCopy, children, ...props }) => {\r\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false);\r\n\r\n  const copyToClipboardWithCommand = (content: string) => {\r\n    const el = document.createElement(\"textarea\");\r\n    el.value = content;\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(el);\r\n  };\r\n\r\n  function displayTooltip() {\r\n    setIsTooltipDisplayed(true);\r\n    setTimeout(() => {\r\n      setIsTooltipDisplayed(false);\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    <StyleButton\r\n      small\r\n      bold\r\n      onClick={() => {\r\n        if (navigator.clipboard && navigator.permissions) {\r\n          navigator.clipboard.writeText(toCopy).then(() => displayTooltip());\r\n        } else if (document.queryCommandSupported(\"copy\")) {\r\n          copyToClipboardWithCommand(toCopy);\r\n          displayTooltip();\r\n        }\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <CopyIcon width=\"20px\" color=\"hightlight\" ml=\"4px\" />\r\n      <Tooltip isTooltipDisplayed={isTooltipDisplayed}>Copied</Tooltip>\r\n    </StyleButton>\r\n  );\r\n};\r\n\r\nexport default CopyToClipboard;\r\n"]},"metadata":{},"sourceType":"module"}