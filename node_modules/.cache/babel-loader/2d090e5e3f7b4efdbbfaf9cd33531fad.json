{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\SearchModal\\\\CurrencyList.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useMemo } from 'react';\nimport { Currency, currencyEquals, ETHER, Token } from 'utils/@sdk';\nimport { Text } from 'components/_uikit';\nimport styled from 'styled-components';\nimport { FixedSizeList } from 'react-window';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { LightGreyCard } from 'components/Card';\nimport QuestionHelper from 'components/QuestionHelper';\nimport { useTranslation } from 'contexts/Localization';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useCombinedActiveList } from '../../state/lists/hooks';\nimport { useCurrencyBalance } from '../../state/wallet/hooks';\nimport { useIsUserAddedToken, useAllInactiveTokens } from '../../hooks/Tokens';\nimport Column from '../Layout/Column';\nimport { RowFixed, RowBetween } from '../Layout/Row';\nimport { CurrencyLogo } from '../Logo';\nimport CircleLoader from '../Loader/CircleLoader';\nimport { isTokenOnList } from '../../utils';\nimport ImportRow from './ImportRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction currencyKey(currency) {\n  return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : '';\n}\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n  font-size: 12px;\n  color: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.colors.background;\n}};\n`;\n_c = StyledBalanceText;\nconst StyledFixedSizeList = styled(FixedSizeList)`\n  border-top: 1px solid ${_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.colors.subtleLine;\n}};\n`;\n_c2 = StyledFixedSizeList;\nconst FixedContentRow = styled.div`\n  padding: 4px 20px;\n  height: 42px;\n  display: grid;\n  grid-gap: 16px;\n  align-items: center;\n`;\n_c3 = FixedContentRow;\n\nfunction Balance(_ref3) {\n  let {\n    balance\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(StyledBalanceText, {\n    title: balance.toExact(),\n    children: balance.toSignificant(4)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n}\n\n_c4 = Balance;\nconst MenuItem = styled(RowBetween)`\n  padding: 4px 20px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\n  grid-gap: 8px;\n  cursor: ${_ref4 => {\n  let {\n    disabled\n  } = _ref4;\n  return !disabled && 'pointer';\n}};\n  pointer-events: ${_ref5 => {\n  let {\n    disabled\n  } = _ref5;\n  return disabled && 'none';\n}};\n  :hover {\n    background-color: ${_ref6 => {\n  let {\n    theme,\n    disabled\n  } = _ref6;\n  return !disabled && theme.colors.highlight;\n}};\n  }\n  background-color: ${_ref7 => {\n  let {\n    theme,\n    disabled,\n    selected\n  } = _ref7;\n  return disabled || selected ? theme.colors.highlight : \"#00000\";\n}}80;\n  border-bottom: 1px solid ${_ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.colors.subtleLine;\n}};\n`;\n_c5 = MenuItem;\n\nfunction CurrencyRow(_ref9) {\n  _s();\n\n  let {\n    currency,\n    onSelect,\n    isSelected,\n    otherSelected,\n    style\n  } = _ref9;\n  const {\n    account\n  } = useActiveWeb3React();\n  const key = currencyKey(currency);\n  const selectedTokenList = useCombinedActiveList();\n  const isOnSelectedList = isTokenOnList(selectedTokenList, currency);\n  const customAdded = useIsUserAddedToken(currency);\n  const balance = useCurrencyBalance(account !== null && account !== void 0 ? account : undefined, currency); // only show add or remove buttons if not on selected list\n\n  return /*#__PURE__*/_jsxDEV(MenuItem, {\n    style: style,\n    className: `token-item-${key}`,\n    onClick: () => isSelected ? null : onSelect(),\n    disabled: isSelected,\n    selected: otherSelected,\n    children: [/*#__PURE__*/_jsxDEV(CurrencyLogo, {\n      currency: currency,\n      size: \"24px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        color: \"background\",\n        bold: true,\n        fontSize: \"12px\",\n        children: currency.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"background\",\n        small: true,\n        ellipsis: true,\n        maxWidth: \"200px\",\n        fontSize: \"12px\",\n        children: [!isOnSelectedList && customAdded && 'Added by user â€¢', \" \", currency.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RowFixed, {\n      style: {\n        justifySelf: 'flex-end'\n      },\n      children: balance ? /*#__PURE__*/_jsxDEV(Balance, {\n        balance: balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 20\n      }, this) : account ? /*#__PURE__*/_jsxDEV(CircleLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 62\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrencyRow, \"KdYJt/1R7/tEnD0qTLSc2BU2fVE=\", false, function () {\n  return [useActiveWeb3React, useCombinedActiveList, useIsUserAddedToken, useCurrencyBalance];\n});\n\n_c6 = CurrencyRow;\nexport default function CurrencyList(_ref10) {\n  _s2();\n\n  let {\n    height,\n    currencies,\n    selectedCurrency,\n    onCurrencySelect,\n    otherCurrency,\n    fixedListRef,\n    showETH,\n    showImportView,\n    setImportToken,\n    breakIndex\n  } = _ref10;\n  const itemData = useMemo(() => {\n    let formatted = showETH ? [Currency.ETHER, ...currencies] : currencies;\n\n    if (breakIndex !== undefined) {\n      formatted = [...formatted.slice(0, breakIndex), undefined, ...formatted.slice(breakIndex, formatted.length)];\n    }\n\n    return formatted;\n  }, [breakIndex, currencies, showETH]);\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const inactiveTokens = useAllInactiveTokens();\n  const Row = useCallback(_ref11 => {\n    let {\n      data,\n      index,\n      style\n    } = _ref11;\n    const currency = data[index];\n    const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency));\n    const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency));\n\n    const handleSelect = () => onCurrencySelect(currency);\n\n    const token = wrappedCurrency(currency, chainId);\n    const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address);\n\n    if (index === breakIndex || !data) {\n      return /*#__PURE__*/_jsxDEV(FixedContentRow, {\n        style: style,\n        children: /*#__PURE__*/_jsxDEV(LightGreyCard, {\n          padding: \"8px 12px\",\n          borderRadius: \"8px\",\n          children: /*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              small: true,\n              children: t('Expanded results from inactive Token Lists')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n              text: t(\"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\"),\n              ml: \"4px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this);\n    }\n\n    if (showImport && token) {\n      return /*#__PURE__*/_jsxDEV(ImportRow, {\n        style: style,\n        token: token,\n        showImportView: showImportView,\n        setImportToken: setImportToken,\n        dim: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(CurrencyRow, {\n      style: style,\n      currency: currency,\n      isSelected: isSelected,\n      onSelect: handleSelect,\n      otherSelected: otherSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this);\n  }, [chainId, inactiveTokens, onCurrencySelect, otherCurrency, selectedCurrency, setImportToken, showImportView, breakIndex, t]);\n  const itemKey = useCallback((index, data) => currencyKey(data[index]), []);\n  return /*#__PURE__*/_jsxDEV(StyledFixedSizeList, {\n    height: height,\n    ref: fixedListRef,\n    width: \"100%\",\n    itemData: itemData,\n    itemCount: itemData.length,\n    itemSize: 44,\n    itemKey: itemKey,\n    children: Row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(CurrencyList, \"cs4GaH7BdcN8z9+EkbwUw4wqgVw=\", false, function () {\n  return [useActiveWeb3React, useTranslation, useAllInactiveTokens];\n});\n\n_c7 = CurrencyList;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"StyledBalanceText\");\n$RefreshReg$(_c2, \"StyledFixedSizeList\");\n$RefreshReg$(_c3, \"FixedContentRow\");\n$RefreshReg$(_c4, \"Balance\");\n$RefreshReg$(_c5, \"MenuItem\");\n$RefreshReg$(_c6, \"CurrencyRow\");\n$RefreshReg$(_c7, \"CurrencyList\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/SearchModal/CurrencyList.tsx"],"names":["React","useCallback","useMemo","Currency","currencyEquals","ETHER","Token","Text","styled","FixedSizeList","wrappedCurrency","LightGreyCard","QuestionHelper","useTranslation","useActiveWeb3React","useCombinedActiveList","useCurrencyBalance","useIsUserAddedToken","useAllInactiveTokens","Column","RowFixed","RowBetween","CurrencyLogo","CircleLoader","isTokenOnList","ImportRow","currencyKey","currency","address","StyledBalanceText","theme","colors","background","StyledFixedSizeList","subtleLine","FixedContentRow","div","Balance","balance","toExact","toSignificant","MenuItem","disabled","highlight","selected","CurrencyRow","onSelect","isSelected","otherSelected","style","account","key","selectedTokenList","isOnSelectedList","customAdded","undefined","symbol","name","justifySelf","CurrencyList","height","currencies","selectedCurrency","onCurrencySelect","otherCurrency","fixedListRef","showETH","showImportView","setImportToken","breakIndex","itemData","formatted","slice","length","chainId","t","inactiveTokens","Row","data","index","Boolean","handleSelect","token","showImport","Object","keys","includes","itemKey"],"mappings":"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","sourcesContent":["import React, { CSSProperties, MutableRefObject, useCallback, useMemo } from 'react'\r\nimport { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from 'utils/@sdk'\r\nimport { Text } from 'components/_uikit'\r\nimport styled from 'styled-components'\r\nimport { FixedSizeList } from 'react-window'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useCombinedActiveList } from '../../state/lists/hooks'\r\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\r\nimport { useIsUserAddedToken, useAllInactiveTokens } from '../../hooks/Tokens'\r\nimport Column from '../Layout/Column'\r\nimport { RowFixed, RowBetween } from '../Layout/Row'\r\nimport { CurrencyLogo } from '../Logo'\r\nimport CircleLoader from '../Loader/CircleLoader'\r\nimport { isTokenOnList } from '../../utils'\r\nimport ImportRow from './ImportRow'\r\n\r\nfunction currencyKey(currency: Currency): string {\r\n  return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : ''\r\n}\r\n\r\nconst StyledBalanceText = styled(Text)`\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  max-width: 5rem;\r\n  text-overflow: ellipsis;\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.background};\r\n`\r\nconst StyledFixedSizeList = styled(FixedSizeList)`\r\n  border-top: 1px solid ${({ theme }) => theme.colors.subtleLine};\r\n`\r\n\r\nconst FixedContentRow = styled.div`\r\n  padding: 4px 20px;\r\n  height: 42px;\r\n  display: grid;\r\n  grid-gap: 16px;\r\n  align-items: center;\r\n`\r\n\r\nfunction Balance({ balance }: { balance: CurrencyAmount }) {\r\n  return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\r\n}\r\n\r\nconst MenuItem = styled(RowBetween)<{ disabled: boolean; selected: boolean }>`\r\n  padding: 4px 20px;\r\n  display: grid;\r\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\r\n  grid-gap: 8px;\r\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\r\n  pointer-events: ${({ disabled }) => disabled && 'none'};\r\n  :hover {\r\n    background-color: ${({ theme, disabled }) => !disabled && theme.colors.highlight};\r\n  }\r\n  background-color: ${({ theme,disabled, selected }) => disabled || selected ? theme.colors.highlight : \"#00000\"}80;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.subtleLine};\r\n`\r\n\r\nfunction CurrencyRow({\r\n  currency,\r\n  onSelect,\r\n  isSelected,\r\n  otherSelected,\r\n  style,\r\n}: {\r\n  currency: Currency\r\n  onSelect: () => void\r\n  isSelected: boolean\r\n  otherSelected: boolean\r\n  style: CSSProperties\r\n}) {\r\n  const { account } = useActiveWeb3React()\r\n  const key = currencyKey(currency)\r\n  const selectedTokenList = useCombinedActiveList()\r\n  const isOnSelectedList = isTokenOnList(selectedTokenList, currency)\r\n  const customAdded = useIsUserAddedToken(currency)\r\n  const balance = useCurrencyBalance(account ?? undefined, currency)\r\n\r\n  // only show add or remove buttons if not on selected list\r\n  return (\r\n    <MenuItem\r\n      style={style}\r\n      className={`token-item-${key}`}\r\n      onClick={() => (isSelected ? null : onSelect())}\r\n      disabled={isSelected}\r\n      selected={otherSelected}\r\n    >\r\n      <CurrencyLogo currency={currency} size=\"24px\" />\r\n      <Column>\r\n        <Text color=\"background\" bold fontSize=\"12px\">{currency.symbol}</Text>\r\n        <Text color=\"background\" small ellipsis maxWidth=\"200px\" fontSize=\"12px\">\r\n          {!isOnSelectedList && customAdded && 'Added by user â€¢'} {currency.name}\r\n        </Text>\r\n      </Column>\r\n      <RowFixed style={{ justifySelf: 'flex-end' }}>\r\n        {balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null}\r\n      </RowFixed>\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\nexport default function CurrencyList({\r\n  height,\r\n  currencies,\r\n  selectedCurrency,\r\n  onCurrencySelect,\r\n  otherCurrency,\r\n  fixedListRef,\r\n  showETH,\r\n  showImportView,\r\n  setImportToken,\r\n  breakIndex,\r\n}: {\r\n  height: number\r\n  currencies: Currency[]\r\n  selectedCurrency?: Currency | null\r\n  onCurrencySelect: (currency: Currency) => void\r\n  otherCurrency?: Currency | null\r\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>\r\n  showETH: boolean\r\n  showImportView: () => void\r\n  setImportToken: (token: Token) => void\r\n  breakIndex: number | undefined\r\n}) {\r\n  const itemData: (Currency | undefined)[] = useMemo(() => {\r\n    let formatted: (Currency | undefined)[] = showETH ? [Currency.ETHER, ...currencies] : currencies\r\n    if (breakIndex !== undefined) {\r\n      formatted = [...formatted.slice(0, breakIndex), undefined, ...formatted.slice(breakIndex, formatted.length)]\r\n    }\r\n    return formatted\r\n  }, [breakIndex, currencies, showETH])\r\n\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const inactiveTokens: {\r\n    [address: string]: Token\r\n  } = useAllInactiveTokens()\r\n\r\n  const Row = useCallback(\r\n    ({ data, index, style }) => {\r\n      const currency: Currency = data[index]\r\n      const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency))\r\n      const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency))\r\n      const handleSelect = () => onCurrencySelect(currency)\r\n\r\n      const token = wrappedCurrency(currency, chainId)\r\n\r\n      const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address)\r\n\r\n      if (index === breakIndex || !data) {\r\n        return (\r\n          <FixedContentRow style={style}>\r\n            <LightGreyCard padding=\"8px 12px\" borderRadius=\"8px\">\r\n              <RowBetween>\r\n                <Text small>{t('Expanded results from inactive Token Lists')}</Text>\r\n                <QuestionHelper\r\n                  text={t(\r\n                    \"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\",\r\n                  )}\r\n                  ml=\"4px\"\r\n                />\r\n              </RowBetween>\r\n            </LightGreyCard>\r\n          </FixedContentRow>\r\n        )\r\n      }\r\n\r\n      if (showImport && token) {\r\n        return (\r\n          <ImportRow style={style} token={token} showImportView={showImportView} setImportToken={setImportToken} dim />\r\n        )\r\n      }\r\n      return (\r\n        <CurrencyRow\r\n          style={style}\r\n          currency={currency}\r\n          isSelected={isSelected}\r\n          onSelect={handleSelect}\r\n          otherSelected={otherSelected}\r\n        />\r\n      )\r\n    },\r\n    [\r\n      chainId,\r\n      inactiveTokens,\r\n      onCurrencySelect,\r\n      otherCurrency,\r\n      selectedCurrency,\r\n      setImportToken,\r\n      showImportView,\r\n      breakIndex,\r\n      t,\r\n    ],\r\n  )\r\n\r\n  const itemKey = useCallback((index: number, data: any) => currencyKey(data[index]), [])\r\n\r\n  return (\r\n    <StyledFixedSizeList\r\n      height={height}\r\n      ref={fixedListRef as any}\r\n      width=\"100%\"\r\n      itemData={itemData}\r\n      itemCount={itemData.length}\r\n      itemSize={44}\r\n      itemKey={itemKey}\r\n    >\r\n      {Row}\r\n    </StyledFixedSizeList>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}