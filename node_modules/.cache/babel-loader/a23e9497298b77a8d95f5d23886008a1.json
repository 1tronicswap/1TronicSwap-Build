{"ast":null,"code":"import invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { Rounding, ONE } from '../../constants';\nimport { parseBigintIsh } from '../../utils';\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n};\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0,\n  [Rounding.ROUND_HALF_UP]: 1,\n  [Rounding.ROUND_UP]: 3\n};\nexport class Fraction {\n  constructor(numerator) {\n    let denominator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ONE;\n    this.numerator = void 0;\n    this.denominator = void 0;\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  get quotient() {\n    return JSBI.divide(this.numerator, this.denominator);\n  } // remainder after floor division\n\n\n  get remainder() {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n  }\n\n  invert() {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  add(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n\n  subtract(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n\n  lessThan(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n\n  equalTo(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n\n  greaterThan(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n\n  multiply(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n\n  divide(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  }\n\n  toSignificant(significantDigits) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      groupSeparator: ''\n    };\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_HALF_UP;\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  toFixed(decimalPlaces) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      groupSeparator: ''\n    };\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_HALF_UP;\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n\n}","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/utils/@sdk/entities/fractions/fraction.ts"],"names":["invariant","JSBI","_Decimal","_Big","toFormat","Rounding","ONE","parseBigintIsh","Decimal","Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","groupSeparator","rounding","Number","isInteger","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM"],"mappings":"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","sourcesContent":["import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: 0,\r\n  [Rounding.ROUND_HALF_UP]: 1,\r\n  [Rounding.ROUND_UP]: 3\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  \r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}