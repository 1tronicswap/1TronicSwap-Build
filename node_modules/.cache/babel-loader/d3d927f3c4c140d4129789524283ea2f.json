{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\App\\\\Transactions\\\\TransactionsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { Modal, ModalBody, Text, Button, Flex } from 'components/_uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks';\nimport { clearAllTransactions } from 'state/transactions/actions';\nimport { AutoRow } from '../../Layout/Row';\nimport Transaction from './Transaction'; // we want the latest one to come first, so return negative if a is after b\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction newTransactionsFirst(a, b) {\n  return b.addedTime - a.addedTime;\n}\n\nfunction renderTransactions(transactions) {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: transactions.map(tx => {\n      return /*#__PURE__*/_jsxDEV(Transaction, {\n        tx: tx\n      }, tx.hash + tx.addedTime, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\nconst TransactionsModal = _ref => {\n  _s();\n\n  let {\n    onDismiss\n  } = _ref;\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const dispatch = useDispatch();\n  const allTransactions = useAllTransactions();\n  const {\n    t\n  } = useTranslation();\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions);\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\n  }, [allTransactions]);\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt);\n  const confirmed = sortedRecentTransactions.filter(tx => tx.receipt);\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({\n      chainId\n    }));\n  }, [dispatch, chainId]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Recent Transactions'),\n    headerBackground: \"contrast\",\n    onDismiss: onDismiss,\n    children: account && /*#__PURE__*/_jsxDEV(ModalBody, {\n      children: !!pending.length || !!confirmed.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n          mb: \"1rem\",\n          style: {\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            color: \"background\",\n            children: t('Recent Transactions')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"tertiary\",\n            scale: \"xs\",\n            onClick: clearAllTransactionsCallback,\n            children: t('clear all')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this), renderTransactions(pending), renderTransactions(confirmed)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Text, {\n        color: \"background\",\n        children: t('No recent transactions')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsModal, \"9Kp1ytnSH3FBkMC4qj60ShXfrhM=\", false, function () {\n  return [useWeb3React, useDispatch, useAllTransactions, useTranslation];\n});\n\n_c = TransactionsModal;\nexport default TransactionsModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsModal\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/App/Transactions/TransactionsModal.tsx"],"names":["React","useMemo","useCallback","useWeb3React","useDispatch","Modal","ModalBody","Text","Button","Flex","useTranslation","isTransactionRecent","useAllTransactions","clearAllTransactions","AutoRow","Transaction","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","map","tx","hash","TransactionsModal","onDismiss","account","chainId","dispatch","allTransactions","t","sortedRecentTransactions","txs","Object","values","filter","sort","pending","receipt","confirmed","clearAllTransactionsCallback","length","justifyContent"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from 'components/_uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\r\nimport { TransactionDetails } from 'state/transactions/reducer'\r\nimport { AppDispatch } from 'state'\r\nimport { clearAllTransactions } from 'state/transactions/actions'\r\nimport { AutoRow } from '../../Layout/Row'\r\nimport Transaction from './Transaction'\r\n\r\n// we want the latest one to come first, so return negative if a is after b\r\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\r\n  return b.addedTime - a.addedTime\r\n}\r\n\r\nfunction renderTransactions(transactions: TransactionDetails[]) {\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      {transactions.map((tx) => {\r\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\r\n      })}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\r\n  const { account, chainId } = useWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const allTransactions = useAllTransactions()\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const sortedRecentTransactions = useMemo(() => {\r\n    const txs = Object.values(allTransactions)\r\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\r\n  }, [allTransactions])\r\n\r\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\r\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\r\n\r\n  const clearAllTransactionsCallback = useCallback(() => {\r\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\r\n  }, [dispatch, chainId])\r\n\r\n  return (\r\n    <Modal title={t('Recent Transactions')} headerBackground=\"contrast\" onDismiss={onDismiss}>\r\n      {account && (\r\n        <ModalBody>\r\n          {!!pending.length || !!confirmed.length ? (\r\n            <>\r\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\r\n                <Text color=\"background\">{t('Recent Transactions')}</Text>\r\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\r\n                  {t('clear all')}\r\n                </Button>\r\n              </AutoRow>\r\n              {renderTransactions(pending)}\r\n              {renderTransactions(confirmed)}\r\n            </>\r\n          ) : (\r\n            <Text color=\"background\">{t('No recent transactions')}</Text>\r\n          )}\r\n        </ModalBody>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransactionsModal\r\n"]},"metadata":{},"sourceType":"module"}