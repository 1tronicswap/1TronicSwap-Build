{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\widgets\\\\Modal\\\\ModalContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Overlay from \"../../components/Overlay/Overlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.zIndices.modal - 1;\n}};\n`;\n_c = ModalWrapper;\nexport const Context = /*#__PURE__*/createContext({\n  isOpen: false,\n  nodeId: \"\",\n  modalNode: null,\n  setModalNode: () => null,\n  onPresent: () => null,\n  onDismiss: () => null,\n  setCloseOnOverlayClick: () => true\n});\n\nconst ModalProvider = _ref2 => {\n  _s();\n\n  let {\n    children\n  } = _ref2;\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalNode, setModalNode] = useState();\n  const [nodeId, setNodeId] = useState(\"\");\n  const [closeOnOverlayClick, setCloseOnOverlayClick] = useState(true);\n\n  const handlePresent = (node, newNodeId) => {\n    setModalNode(node);\n    setIsOpen(true);\n    setNodeId(newNodeId);\n  };\n\n  const handleDismiss = () => {\n    setModalNode(undefined);\n    setIsOpen(false);\n    setNodeId(\"\");\n  };\n\n  const handleOverlayDismiss = () => {\n    if (closeOnOverlayClick) {\n      handleDismiss();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      isOpen,\n      nodeId,\n      modalNode,\n      setModalNode,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n      setCloseOnOverlayClick\n    },\n    children: [isOpen && /*#__PURE__*/_jsxDEV(ModalWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Overlay, {\n        show: true,\n        onClick: handleOverlayDismiss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/React.isValidElement(modalNode) && /*#__PURE__*/React.cloneElement(modalNode, {\n        onDismiss: handleDismiss\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalProvider, \"Nc54lw6CI71ja716eYqV4UwAI4A=\");\n\n_c2 = ModalProvider;\nexport default ModalProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModalWrapper\");\n$RefreshReg$(_c2, \"ModalProvider\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/widgets/Modal/ModalContext.tsx"],"names":["React","createContext","useState","styled","Overlay","ModalWrapper","div","theme","zIndices","modal","Context","isOpen","nodeId","modalNode","setModalNode","onPresent","onDismiss","setCloseOnOverlayClick","ModalProvider","children","setIsOpen","setNodeId","closeOnOverlayClick","handlePresent","node","newNodeId","handleDismiss","undefined","handleOverlayDismiss","isValidElement","cloneElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,kCAApB;;AAaA,MAAMC,YAAY,GAAGF,MAAM,CAACG,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAAeA,KAAK,CAACC,QAAN,CAAeC,KAAf,GAAuB,CAAtC;AAAA,CAAwC;AACrD,CAXA;KAAMJ,Y;AAaN,OAAO,MAAMK,OAAO,gBAAGT,aAAa,CAAgB;AAClDU,EAAAA,MAAM,EAAE,KAD0C;AAElDC,EAAAA,MAAM,EAAE,EAF0C;AAGlDC,EAAAA,SAAS,EAAE,IAHuC;AAIlDC,EAAAA,YAAY,EAAE,MAAM,IAJ8B;AAKlDC,EAAAA,SAAS,EAAE,MAAM,IALiC;AAMlDC,EAAAA,SAAS,EAAE,MAAM,IANiC;AAOlDC,EAAAA,sBAAsB,EAAE,MAAM;AAPoB,CAAhB,CAA7B;;AAUP,MAAMC,aAAuB,GAAG,SAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAChD,QAAM,CAACR,MAAD,EAASS,SAAT,IAAsBlB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,EAA1C;AACA,QAAM,CAACU,MAAD,EAASS,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACoB,mBAAD,EAAsBL,sBAAtB,IAAgDf,QAAQ,CAAC,IAAD,CAA9D;;AAEA,QAAMqB,aAAa,GAAG,CAACC,IAAD,EAAwBC,SAAxB,KAA8C;AAClEX,IAAAA,YAAY,CAACU,IAAD,CAAZ;AACAJ,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAC,IAAAA,SAAS,CAACI,SAAD,CAAT;AACD,GAJD;;AAMA,QAAMC,aAAa,GAAG,MAAM;AAC1BZ,IAAAA,YAAY,CAACa,SAAD,CAAZ;AACAP,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAC,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAJD;;AAMA,QAAMO,oBAAoB,GAAG,MAAM;AACjC,QAAIN,mBAAJ,EAAyB;AACvBI,MAAAA,aAAa;AACd;AACF,GAJD;;AAMA,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLf,MAAAA,MADK;AAELC,MAAAA,MAFK;AAGLC,MAAAA,SAHK;AAILC,MAAAA,YAJK;AAKLC,MAAAA,SAAS,EAAEQ,aALN;AAMLP,MAAAA,SAAS,EAAEU,aANN;AAOLT,MAAAA;AAPK,KADT;AAAA,eAWGN,MAAM,iBACL,QAAC,YAAD;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,IAAI,MAAb;AAAc,QAAA,OAAO,EAAEiB;AAAvB;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,aAAA5B,KAAK,CAAC6B,cAAN,CAAqBhB,SAArB,kBACCb,KAAK,CAAC8B,YAAN,CAAmBjB,SAAnB,EAA8B;AAC5BG,QAAAA,SAAS,EAAEU;AADiB,OAA9B,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,EAoBGP,QApBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAhDD;;GAAMD,a;;MAAAA,a;AAkDN,eAAeA,aAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Overlay from \"../../components/Overlay/Overlay\";\r\nimport { Handler } from \"./types\";\r\n\r\ninterface ModalsContext {\r\n  isOpen: boolean;\r\n  nodeId: string;\r\n  modalNode: React.ReactNode;\r\n  setModalNode: React.Dispatch<React.SetStateAction<React.ReactNode>>;\r\n  onPresent: (node: React.ReactNode, newNodeId: string) => void;\r\n  onDismiss: Handler;\r\n  setCloseOnOverlayClick: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: ${({ theme }) => theme.zIndices.modal - 1};\r\n`;\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  isOpen: false,\r\n  nodeId: \"\",\r\n  modalNode: null,\r\n  setModalNode: () => null,\r\n  onPresent: () => null,\r\n  onDismiss: () => null,\r\n  setCloseOnOverlayClick: () => true,\r\n});\r\n\r\nconst ModalProvider: React.FC = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [modalNode, setModalNode] = useState<React.ReactNode>();\r\n  const [nodeId, setNodeId] = useState(\"\");\r\n  const [closeOnOverlayClick, setCloseOnOverlayClick] = useState(true);\r\n\r\n  const handlePresent = (node: React.ReactNode, newNodeId: string) => {\r\n    setModalNode(node);\r\n    setIsOpen(true);\r\n    setNodeId(newNodeId);\r\n  };\r\n\r\n  const handleDismiss = () => {\r\n    setModalNode(undefined);\r\n    setIsOpen(false);\r\n    setNodeId(\"\");\r\n  };\r\n\r\n  const handleOverlayDismiss = () => {\r\n    if (closeOnOverlayClick) {\r\n      handleDismiss();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        isOpen,\r\n        nodeId,\r\n        modalNode,\r\n        setModalNode,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n        setCloseOnOverlayClick,\r\n      }}\r\n    >\r\n      {isOpen && (\r\n        <ModalWrapper>\r\n          <Overlay show onClick={handleOverlayDismiss} />\r\n          {React.isValidElement(modalNode) &&\r\n            React.cloneElement(modalNode, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </ModalWrapper>\r\n      )}\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default ModalProvider;\r\n"]},"metadata":{},"sourceType":"module"}