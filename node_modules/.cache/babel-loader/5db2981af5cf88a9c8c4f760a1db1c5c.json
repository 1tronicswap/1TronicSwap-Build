{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\widgets\\\\Menu\\\\components\\\\LangSelector.tsx\";\nimport React from \"react\";\nimport { Toggle } from \"components/_uikit\";\nimport Text from \"../../../components/Text/Text\";\nimport Flex from \"../../../components/Box/Flex\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LangSelector = _ref => {\n  let {\n    currentLang,\n    setLang\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      color: \"textSubtle\",\n      mx: \"4px\",\n      children: \"Language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Toggle, {\n      checked: currentLang === 'en',\n      text: currentLang === 'en' ? \"En\" : \"Id\",\n      scale: \"md\",\n      onChange: () => {\n        if (currentLang === 'en') {\n          setLang({\n            locale: 'id-ID',\n            language: 'Bahasa Indonesia',\n            code: 'id'\n          });\n        } else {\n          setLang({\n            locale: 'en-US',\n            language: 'English',\n            code: 'en'\n          });\n        }\n      },\n      forceTheme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this);\n};\n\n_c = LangSelector;\nexport default _c2 = /*#__PURE__*/React.memo(LangSelector, (prev, next) => prev.currentLang === next.currentLang);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LangSelector\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/widgets/Menu/components/LangSelector.tsx"],"names":["React","Toggle","Text","Flex","LangSelector","currentLang","setLang","locale","language","code","memo","prev","next"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;;;AASA,MAAMC,YAA6B,GAAG;AAAA,MAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD;AAAA,sBACpC,QAAC,IAAD;AAAM,IAAA,cAAc,EAAC,eAArB;AAAqC,IAAA,KAAK,EAAC,MAA3C;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAC,YAAZ;AAAyB,MAAA,EAAE,EAAC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,MAAD;AACE,MAAA,OAAO,EAAED,WAAW,KAAK,IAD3B;AAEE,MAAA,IAAI,EAAEA,WAAW,KAAK,IAAhB,GAAuB,IAAvB,GAA8B,IAFtC;AAGE,MAAA,KAAK,EAAC,IAHR;AAIE,MAAA,QAAQ,EAAE,MAAM;AACd,YAAIA,WAAW,KAAK,IAApB,EAA0B;AACxBC,UAAAA,OAAO,CAAC;AAAEC,YAAAA,MAAM,EAAE,OAAV;AAAmBC,YAAAA,QAAQ,EAAE,kBAA7B;AAAiDC,YAAAA,IAAI,EAAE;AAAvD,WAAD,CAAP;AACD,SAFD,MAEO;AACLH,UAAAA,OAAO,CAAC;AAAEC,YAAAA,MAAM,EAAE,OAAV;AAAmBC,YAAAA,QAAQ,EAAE,SAA7B;AAAwCC,YAAAA,IAAI,EAAE;AAA9C,WAAD,CAAP;AACD;AACF,OAVH;AAWE,MAAA,UAAU,EAAC;AAXb;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADoC;AAAA,CAAtC;;KAAML,Y;AAqBN,kCAAeJ,KAAK,CAACU,IAAN,CAAWN,YAAX,EAAyB,CAACO,IAAD,EAAOC,IAAP,KAAgBD,IAAI,CAACN,WAAL,KAAqBO,IAAI,CAACP,WAAnE,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Toggle } from \"components/_uikit\";\r\nimport Text from \"../../../components/Text/Text\";\r\nimport Flex from \"../../../components/Box/Flex\";\r\nimport { Language } from \"../types\";\r\n\r\ninterface Props {\r\n  currentLang: string;\r\n  langs: Language[];\r\n  setLang: (lang: Language) => void;\r\n}\r\n\r\nconst LangSelector: React.FC<Props> = ({ currentLang, setLang }) => (\r\n  <Flex justifyContent=\"space-between\" width=\"100%\">    \r\n    <Text color=\"textSubtle\" mx=\"4px\">\r\n      Language\r\n    </Text>\r\n    <Toggle\r\n      checked={currentLang === 'en'}\r\n      text={currentLang === 'en' ? \"En\" : \"Id\"}\r\n      scale=\"md\"\r\n      onChange={() => {\r\n        if (currentLang === 'en') {\r\n          setLang({ locale: 'id-ID', language: 'Bahasa Indonesia', code: 'id' })\r\n        } else {\r\n          setLang({ locale: 'en-US', language: 'English', code: 'en' })\r\n        }\r\n      }}\r\n      forceTheme=\"dark\"\r\n    />\r\n  </Flex>\r\n);\r\n\r\nexport default React.memo(LangSelector, (prev, next) => prev.currentLang === next.currentLang);\r\n"]},"metadata":{},"sourceType":"module"}