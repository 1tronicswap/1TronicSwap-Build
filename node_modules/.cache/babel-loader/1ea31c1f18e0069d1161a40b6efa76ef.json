{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\components\\\\Image\\\\BackgroundImage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport observerOptions from \"./options\";\nimport Wrapper from \"./Wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledBackgroundImage = styled(Wrapper)`\n  background-repeat: no-repeat;\n  background-size: contain;\n`;\n_c = StyledBackgroundImage;\n\nconst BackgroundImage = _ref => {\n  _s();\n\n  let {\n    src,\n    width,\n    height,\n    ...props\n  } = _ref;\n  const ref = useRef(null);\n  useEffect(() => {\n    let observer;\n\n    if (ref.current) {\n      const div = ref.current;\n      observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          const {\n            isIntersecting\n          } = entry;\n\n          if (isIntersecting) {\n            div.style.backgroundImage = `url(\"${src}\")`;\n            observer.disconnect();\n          }\n        });\n      }, observerOptions);\n      observer.observe(div);\n    }\n\n    return () => {\n      if (observer) {\n        observer.disconnect();\n      }\n    };\n  }, [src]);\n  return /*#__PURE__*/_jsxDEV(StyledBackgroundImage, {\n    ref: ref,\n    width: width,\n    height: height,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BackgroundImage, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c2 = BackgroundImage;\nexport default BackgroundImage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledBackgroundImage\");\n$RefreshReg$(_c2, \"BackgroundImage\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/components/Image/BackgroundImage.tsx"],"names":["React","useEffect","useRef","styled","observerOptions","Wrapper","StyledBackgroundImage","BackgroundImage","src","width","height","props","ref","observer","current","div","IntersectionObserver","entries","forEach","entry","isIntersecting","style","backgroundImage","disconnect","observe"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,eAAP,MAA4B,WAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,qBAAqB,GAAGH,MAAM,CAACE,OAAD,CAAU;AAC9C;AACA;AACA,CAHA;KAAMC,qB;;AAKN,MAAMC,eAAqC,GAAG,QAAsC;AAAA;;AAAA,MAArC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,GAAqC;AAClF,QAAMC,GAAG,GAAGV,MAAM,CAAiB,IAAjB,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,QAAJ;;AAEA,QAAID,GAAG,CAACE,OAAR,EAAiB;AACf,YAAMC,GAAG,GAAGH,GAAG,CAACE,OAAhB;AAEAD,MAAAA,QAAQ,GAAG,IAAIG,oBAAJ,CAA0BC,OAAD,IAAa;AAC/CA,QAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACzB,gBAAM;AAAEC,YAAAA;AAAF,cAAqBD,KAA3B;;AACA,cAAIC,cAAJ,EAAoB;AAClBL,YAAAA,GAAG,CAACM,KAAJ,CAAUC,eAAV,GAA6B,QAAOd,GAAI,IAAxC;AACAK,YAAAA,QAAQ,CAACU,UAAT;AACD;AACF,SAND;AAOD,OARU,EAQRnB,eARQ,CAAX;AASAS,MAAAA,QAAQ,CAACW,OAAT,CAAiBT,GAAjB;AACD;;AACD,WAAO,MAAM;AACX,UAAIF,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACU,UAAT;AACD;AACF,KAJD;AAKD,GAtBQ,EAsBN,CAACf,GAAD,CAtBM,CAAT;AAwBA,sBAAO,QAAC,qBAAD;AAAuB,IAAA,GAAG,EAAEI,GAA5B;AAAiC,IAAA,KAAK,EAAEH,KAAxC;AAA+C,IAAA,MAAM,EAAEC,MAAvD;AAAA,OAAmEC;AAAnE;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA5BD;;GAAMJ,e;;MAAAA,e;AA8BN,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport observerOptions from \"./options\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport { ImageProps } from \"./types\";\r\n\r\nconst StyledBackgroundImage = styled(Wrapper)`\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n`;\r\n\r\nconst BackgroundImage: React.FC<ImageProps> = ({ src, width, height, ...props }) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    let observer: IntersectionObserver;\r\n\r\n    if (ref.current) {\r\n      const div = ref.current;\r\n\r\n      observer = new IntersectionObserver((entries) => {\r\n        entries.forEach((entry) => {\r\n          const { isIntersecting } = entry;\r\n          if (isIntersecting) {\r\n            div.style.backgroundImage = `url(\"${src}\")`;\r\n            observer.disconnect();\r\n          }\r\n        });\r\n      }, observerOptions);\r\n      observer.observe(div);\r\n    }\r\n    return () => {\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n    };\r\n  }, [src]);\r\n\r\n  return <StyledBackgroundImage ref={ref} width={width} height={height} {...props} />;\r\n};\r\n\r\nexport default BackgroundImage;\r\n"]},"metadata":{},"sourceType":"module"}