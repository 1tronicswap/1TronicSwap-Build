{"ast":null,"code":"const $schema = \"http://json-schema.org/draft-07/schema#\";\nconst $id = \"https://uniswap.org/tokenlist.schema.json\";\nconst title = \"Uniswap Token List\";\nconst description = \"Schema for lists of tokens compatible with the Uniswap Interface\";\nconst definitions = {\n  Version: {\n    type: \"object\",\n    description: \"The version of the list, used in change detection\",\n    examples: [{\n      major: 1,\n      minor: 0,\n      patch: 0\n    }],\n    additionalProperties: false,\n    properties: {\n      major: {\n        type: \"integer\",\n        description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n        minimum: 0,\n        examples: [1, 2]\n      },\n      minor: {\n        type: \"integer\",\n        description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n        minimum: 0,\n        examples: [0, 1]\n      },\n      patch: {\n        type: \"integer\",\n        description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n        minimum: 0,\n        examples: [0, 1]\n      }\n    },\n    required: [\"major\", \"minor\", \"patch\"]\n  },\n  TagIdentifier: {\n    type: \"string\",\n    description: \"The unique identifier of a tag\",\n    minLength: 1,\n    maxLength: 10,\n    pattern: \"^[\\\\w]+$\",\n    examples: [\"compound\", \"stablecoin\"]\n  },\n  ExtensionIdentifier: {\n    type: \"string\",\n    description: \"The name of a token extension property\",\n    minLength: 1,\n    maxLength: 30,\n    pattern: \"^[\\\\w]+$\",\n    examples: [\"color\", \"is_fee_on_transfer\", \"aliases\"]\n  },\n  ExtensionValue: {\n    anyOf: [{\n      type: \"string\",\n      minLength: 1,\n      maxLength: 42,\n      examples: [\"#00000\"]\n    }, {\n      type: \"boolean\",\n      examples: [true]\n    }, {\n      type: \"number\",\n      examples: [15]\n    }, {\n      type: \"null\"\n    }]\n  },\n  TagDefinition: {\n    type: \"object\",\n    description: \"Definition of a tag that can be associated with a token via its identifier\",\n    additionalProperties: false,\n    properties: {\n      name: {\n        type: \"string\",\n        description: \"The name of the tag\",\n        pattern: \"^[ \\\\w]+$\",\n        minLength: 1,\n        maxLength: 20\n      },\n      description: {\n        type: \"string\",\n        description: \"A user-friendly description of the tag\",\n        pattern: \"^[ \\\\w\\\\.,]+$\",\n        minLength: 1,\n        maxLength: 200\n      }\n    },\n    required: [\"name\", \"description\"],\n    examples: [{\n      name: \"Stablecoin\",\n      description: \"A token with value pegged to another asset\"\n    }]\n  },\n  TokenInfo: {\n    type: \"object\",\n    description: \"Metadata for a single token in a token list\",\n    additionalProperties: false,\n    properties: {\n      chainId: {\n        type: \"integer\",\n        description: \"The chain ID of the Ethereum network where this token is deployed\",\n        minimum: 1,\n        examples: [1, 42]\n      },\n      address: {\n        type: \"string\",\n        description: \"The checksummed address of the token on the specified chain ID\",\n        pattern: \"^0x[a-fA-F0-9]{40}$\",\n        examples: [\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n      },\n      decimals: {\n        type: \"integer\",\n        description: \"The number of decimals for the token balance\",\n        minimum: 0,\n        maximum: 255,\n        examples: [18]\n      },\n      name: {\n        type: \"string\",\n        description: \"The name of the token\",\n        minLength: 1,\n        maxLength: 40,\n        pattern: \"^[ \\\\w.'+\\\\-%\\\\/À-ÖØ-öø-ÿ:]+$\",\n        examples: [\"USD Coin\"]\n      },\n      symbol: {\n        type: \"string\",\n        description: \"The symbol for the token; must be alphanumeric\",\n        pattern: \"^[a-zA-Z0-9+\\\\-%\\\\/\\\\$]+$\",\n        minLength: 1,\n        maxLength: 20,\n        examples: [\"USDC\"]\n      },\n      logoURI: {\n        type: \"string\",\n        description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n        format: \"uri\",\n        examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n      },\n      tags: {\n        type: \"array\",\n        description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n        items: {\n          $ref: \"#/definitions/TagIdentifier\"\n        },\n        maxItems: 10,\n        examples: [\"stablecoin\", \"compound\"]\n      },\n      extensions: {\n        type: \"object\",\n        description: \"An object containing any arbitrary or vendor-specific token metadata\",\n        propertyNames: {\n          $ref: \"#/definitions/ExtensionIdentifier\"\n        },\n        additionalProperties: {\n          $ref: \"#/definitions/ExtensionValue\"\n        },\n        maxProperties: 10,\n        examples: [{\n          color: \"#000000\",\n          is_verified_by_me: true\n        }]\n      }\n    },\n    required: [\"chainId\", \"address\", \"decimals\", \"name\", \"symbol\"]\n  }\n};\nconst type = \"object\";\nconst additionalProperties = false;\nconst properties = {\n  name: {\n    type: \"string\",\n    description: \"The name of the token list\",\n    minLength: 1,\n    maxLength: 20,\n    pattern: \"^[\\\\w ]+$\",\n    examples: [\"My Token List\"]\n  },\n  timestamp: {\n    type: \"string\",\n    format: \"date-time\",\n    description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n  },\n  version: {\n    $ref: \"#/definitions/Version\"\n  },\n  tokens: {\n    type: \"array\",\n    description: \"The list of tokens included in the list\",\n    items: {\n      $ref: \"#/definitions/TokenInfo\"\n    },\n    minItems: 1,\n    maxItems: 10000\n  },\n  keywords: {\n    type: \"array\",\n    description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n    items: {\n      type: \"string\",\n      description: \"A keyword to describe the contents of the list\",\n      minLength: 1,\n      maxLength: 20,\n      pattern: \"^[\\\\w ]+$\",\n      examples: [\"compound\", \"lending\", \"personal tokens\"]\n    },\n    maxItems: 20,\n    uniqueItems: true\n  },\n  tags: {\n    type: \"object\",\n    description: \"A mapping of tag identifiers to their name and description\",\n    propertyNames: {\n      $ref: \"#/definitions/TagIdentifier\"\n    },\n    additionalProperties: {\n      $ref: \"#/definitions/TagDefinition\"\n    },\n    maxProperties: 20,\n    examples: [{\n      stablecoin: {\n        name: \"Stablecoin\",\n        description: \"A token with value pegged to another asset\"\n      }\n    }]\n  },\n  logoURI: {\n    type: \"string\",\n    description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n    format: \"uri\",\n    examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n  }\n};\nconst required = [\"name\", \"timestamp\", \"version\", \"tokens\"];\nconst tokenlist_schema = {\n  $schema,\n  $id,\n  title,\n  description,\n  definitions,\n  type,\n  additionalProperties,\n  properties,\n  required\n};\n/**\r\n * Comparator function that allows sorting version from lowest to highest\r\n * @param versionA version A to compare\r\n * @param versionB version B to compare\r\n * @returns -1 if versionA comes before versionB, 0 if versionA is equal to version B, and 1 if version A comes after version B\r\n */\n\nfunction versionComparator(versionA, versionB) {\n  let _returnValue = 0;\n\n  if (versionA.major < versionB.major) {\n    _returnValue = -1;\n  } else if (versionA.major > versionB.major) {\n    _returnValue = 1;\n  } else if (versionA.minor < versionB.minor) {\n    _returnValue = -1;\n  } else if (versionA.minor > versionB.minor) {\n    _returnValue = 1;\n  } else if (versionA.patch < versionB.patch) {\n    _returnValue = -1;\n  } else if (versionA.patch > versionB.patch) {\n    _returnValue = 1;\n  } else {\n    _returnValue = 0;\n  }\n\n  return _returnValue;\n}\n/**\r\n * Returns true if versionB is an update over versionA\r\n */\n\n\nfunction isVersionUpdate(base, update) {\n  return versionComparator(base, update) < 0;\n}\n\nconst VersionUpgrade = {\n  NONE: 0,\n  PATCH: 1,\n  MINOR: 2,\n  MAJOR: 3\n};\n/**\r\n * Return the upgrade type from the base version to the update version.\r\n * Note that downgrades and equivalent versions are both treated as `NONE`.\r\n * @param base base list\r\n * @param update update to the list\r\n */\n\nfunction getVersionUpgrade(base, update) {\n  if (update.major > base.major) {\n    return VersionUpgrade.MAJOR;\n  }\n\n  if (update.major < base.major) {\n    return VersionUpgrade.NONE;\n  }\n\n  if (update.minor > base.minor) {\n    return VersionUpgrade.MINOR;\n  }\n\n  if (update.minor < base.minor) {\n    return VersionUpgrade.NONE;\n  }\n\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\n}\n/**\r\n * compares two token info key values\r\n * this subset of full deep equal functionality does not work on objects or object arrays\r\n * @param a comparison item a\r\n * @param b comparison item b\r\n */\n\n\nfunction compareTokenInfoProperty(a, b) {\n  if (a === b) return true;\n  if (typeof a !== typeof b) return false;\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.every((el, i) => {\n      return b[i] === el;\n    });\n  }\n\n  return false;\n}\n/**\r\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\r\n * @param base base list\r\n * @param update updated list\r\n */\n\n\nfunction diffTokenLists(base, update) {\n  const indexedBase = base.reduce((memo, tokenInfo) => {\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\n    return memo;\n  }, {});\n  const newListUpdates = update.reduce((memo, tokenInfo) => {\n    let _indexedBase$tokenInf;\n\n    const baseToken = _indexedBase$tokenInf === indexedBase[tokenInfo.chainId] == null ? undefined : _indexedBase$tokenInf[tokenInfo.address];\n\n    if (!baseToken) {\n      memo.added.push(tokenInfo);\n    } else {\n      const changes = Object.keys(tokenInfo).filter(s => {\n        return s !== 'address' && s !== 'chainId';\n      }).filter(s => {\n        return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\n      });\n\n      if (changes.length > 0) {\n        if (!memo.changed[tokenInfo.chainId]) {\n          memo.changed[tokenInfo.chainId] = {};\n        }\n\n        memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\n      }\n    }\n\n    if (!memo.index[tokenInfo.chainId]) {\n      let _memo$index$tokenInfo;\n\n      memo.index[tokenInfo.chainId] = (_memo$index$tokenInfo = {}, _memo$index$tokenInfo[tokenInfo.address] = true, _memo$index$tokenInfo);\n    } else {\n      memo.index[tokenInfo.chainId][tokenInfo.address] = true;\n    }\n\n    return memo;\n  }, {\n    added: [],\n    changed: {},\n    index: {}\n  });\n  const removed = base.reduce((list, curr) => {\n    if (!newListUpdates.index[curr.chainId] || !newListUpdates.index[curr.chainId][curr.address]) {\n      list.push(curr);\n    }\n\n    return list;\n  }, []);\n  return {\n    added: newListUpdates.added,\n    changed: newListUpdates.changed,\n    removed\n  };\n}\n/**\r\n * Returns the minimum version bump for the given list\r\n * @param baseList the base list of tokens\r\n * @param updatedList the updated list of tokens\r\n */\n\n\nfunction minVersionBump(baseList, updatedList) {\n  const diff = diffTokenLists(baseList, updatedList);\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\n  return VersionUpgrade.NONE;\n}\n/**\r\n * Returns the next version of the list given a base version and the upgrade type\r\n * @param base current version\r\n * @param bump the upgrade type\r\n */\n\n\nfunction nextVersion(base, bump) {\n  switch (bump) {\n    case VersionUpgrade.NONE:\n      return base;\n\n    case VersionUpgrade.MAJOR:\n      return {\n        major: base.major + 1,\n        minor: 0,\n        patch: 0\n      };\n\n    case VersionUpgrade.MINOR:\n      return {\n        major: base.major,\n        minor: base.minor + 1,\n        patch: 0\n      };\n\n    case VersionUpgrade.PATCH:\n      return {\n        major: base.major,\n        minor: base.minor,\n        patch: base.patch + 1\n      };\n\n    default:\n      return {\n        major: base.major + 1,\n        minor: 0,\n        patch: 0\n      };\n  }\n}\n\nexport { VersionUpgrade, diffTokenLists, getVersionUpgrade, isVersionUpdate, minVersionBump, nextVersion, tokenlist_schema as schema, versionComparator };","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/utils/@uniswap/token-lists/token-lists.ts"],"names":["$schema","$id","title","description","definitions","Version","type","examples","major","minor","patch","additionalProperties","properties","minimum","required","TagIdentifier","minLength","maxLength","pattern","ExtensionIdentifier","ExtensionValue","anyOf","TagDefinition","name","TokenInfo","chainId","address","decimals","maximum","symbol","logoURI","format","tags","items","$ref","maxItems","extensions","propertyNames","maxProperties","color","is_verified_by_me","timestamp","version","tokens","minItems","keywords","uniqueItems","stablecoin","tokenlist_schema","versionComparator","versionA","versionB","_returnValue","isVersionUpdate","base","update","VersionUpgrade","NONE","PATCH","MINOR","MAJOR","getVersionUpgrade","compareTokenInfoProperty","a","b","Array","isArray","every","el","i","diffTokenLists","indexedBase","reduce","memo","tokenInfo","newListUpdates","_indexedBase$tokenInf","baseToken","undefined","added","push","changes","Object","keys","filter","s","length","changed","index","_memo$index$tokenInfo","removed","list","curr","minVersionBump","baseList","updatedList","diff","nextVersion","bump","schema"],"mappings":"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","sourcesContent":["const $schema = \"http://json-schema.org/draft-07/schema#\";\r\nconst $id = \"https://uniswap.org/tokenlist.schema.json\";\r\nconst title = \"Uniswap Token List\";\r\nconst description = \"Schema for lists of tokens compatible with the Uniswap Interface\";\r\nconst definitions = {\r\n\tVersion: {\r\n\t\ttype: \"object\",\r\n\t\tdescription: \"The version of the list, used in change detection\",\r\n\t\texamples: [\r\n\t\t\t{\r\n\t\t\t\tmajor: 1,\r\n\t\t\t\tminor: 0,\r\n\t\t\t\tpatch: 0\r\n\t\t\t}\r\n\t\t],\r\n\t\tadditionalProperties: false,\r\n\t\tproperties: {\r\n\t\t\tmajor: {\r\n\t\t\t\ttype: \"integer\",\r\n\t\t\t\tdescription: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\r\n\t\t\t\tminimum: 0,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t1,\r\n\t\t\t\t\t2\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tminor: {\r\n\t\t\t\ttype: \"integer\",\r\n\t\t\t\tdescription: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\r\n\t\t\t\tminimum: 0,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t0,\r\n\t\t\t\t\t1\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tpatch: {\r\n\t\t\t\ttype: \"integer\",\r\n\t\t\t\tdescription: \"The patch version of the list. Must be incremented for any changes to the list.\",\r\n\t\t\t\tminimum: 0,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t0,\r\n\t\t\t\t\t1\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\trequired: [\r\n\t\t\t\"major\",\r\n\t\t\t\"minor\",\r\n\t\t\t\"patch\"\r\n\t\t]\r\n\t},\r\n\tTagIdentifier: {\r\n\t\ttype: \"string\",\r\n\t\tdescription: \"The unique identifier of a tag\",\r\n\t\tminLength: 1,\r\n\t\tmaxLength: 10,\r\n\t\tpattern: \"^[\\\\w]+$\",\r\n\t\texamples: [\r\n\t\t\t\"compound\",\r\n\t\t\t\"stablecoin\"\r\n\t\t]\r\n\t},\r\n\tExtensionIdentifier: {\r\n\t\ttype: \"string\",\r\n\t\tdescription: \"The name of a token extension property\",\r\n\t\tminLength: 1,\r\n\t\tmaxLength: 30,\r\n\t\tpattern: \"^[\\\\w]+$\",\r\n\t\texamples: [\r\n\t\t\t\"color\",\r\n\t\t\t\"is_fee_on_transfer\",\r\n\t\t\t\"aliases\"\r\n\t\t]\r\n\t},\r\n\tExtensionValue: {\r\n\t\tanyOf: [\r\n\t\t\t{\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tminLength: 1,\r\n\t\t\t\tmaxLength: 42,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t\"#00000\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"boolean\",\r\n\t\t\t\texamples: [\r\n\t\t\t\t\ttrue\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t15\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"null\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\tTagDefinition: {\r\n\t\ttype: \"object\",\r\n\t\tdescription: \"Definition of a tag that can be associated with a token via its identifier\",\r\n\t\tadditionalProperties: false,\r\n\t\tproperties: {\r\n\t\t\tname: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdescription: \"The name of the tag\",\r\n\t\t\t\tpattern: \"^[ \\\\w]+$\",\r\n\t\t\t\tminLength: 1,\r\n\t\t\t\tmaxLength: 20\r\n\t\t\t},\r\n\t\t\tdescription: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdescription: \"A user-friendly description of the tag\",\r\n\t\t\t\tpattern: \"^[ \\\\w\\\\.,]+$\",\r\n\t\t\t\tminLength: 1,\r\n\t\t\t\tmaxLength: 200\r\n\t\t\t}\r\n\t\t},\r\n\t\trequired: [\r\n\t\t\t\"name\",\r\n\t\t\t\"description\"\r\n\t\t],\r\n\t\texamples: [\r\n\t\t\t{\r\n\t\t\t\tname: \"Stablecoin\",\r\n\t\t\t\tdescription: \"A token with value pegged to another asset\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\tTokenInfo: {\r\n\t\ttype: \"object\",\r\n\t\tdescription: \"Metadata for a single token in a token list\",\r\n\t\tadditionalProperties: false,\r\n\t\tproperties: {\r\n\t\t\tchainId: {\r\n\t\t\t\ttype: \"integer\",\r\n\t\t\t\tdescription: \"The chain ID of the Ethereum network where this token is deployed\",\r\n\t\t\t\tminimum: 1,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t1,\r\n\t\t\t\t\t42\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\taddress: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdescription: \"The checksummed address of the token on the specified chain ID\",\r\n\t\t\t\tpattern: \"^0x[a-fA-F0-9]{40}$\",\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tdecimals: {\r\n\t\t\t\ttype: \"integer\",\r\n\t\t\t\tdescription: \"The number of decimals for the token balance\",\r\n\t\t\t\tminimum: 0,\r\n\t\t\t\tmaximum: 255,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t18\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tname: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdescription: \"The name of the token\",\r\n\t\t\t\tminLength: 1,\r\n\t\t\t\tmaxLength: 40,\r\n\t\t\t\tpattern: \"^[ \\\\w.'+\\\\-%\\\\/À-ÖØ-öø-ÿ:]+$\",\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t\"USD Coin\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tsymbol: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdescription: \"The symbol for the token; must be alphanumeric\",\r\n\t\t\t\tpattern: \"^[a-zA-Z0-9+\\\\-%\\\\/\\\\$]+$\",\r\n\t\t\t\tminLength: 1,\r\n\t\t\t\tmaxLength: 20,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t\"USDC\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tlogoURI: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdescription: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\r\n\t\t\t\tformat: \"uri\",\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\ttags: {\r\n\t\t\t\ttype: \"array\",\r\n\t\t\t\tdescription: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\r\n\t\t\t\titems: {\r\n\t\t\t\t\t$ref: \"#/definitions/TagIdentifier\"\r\n\t\t\t\t},\r\n\t\t\t\tmaxItems: 10,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t\"stablecoin\",\r\n\t\t\t\t\t\"compound\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\textensions: {\r\n\t\t\t\ttype: \"object\",\r\n\t\t\t\tdescription: \"An object containing any arbitrary or vendor-specific token metadata\",\r\n\t\t\t\tpropertyNames: {\r\n\t\t\t\t\t$ref: \"#/definitions/ExtensionIdentifier\"\r\n\t\t\t\t},\r\n\t\t\t\tadditionalProperties: {\r\n\t\t\t\t\t$ref: \"#/definitions/ExtensionValue\"\r\n\t\t\t\t},\r\n\t\t\t\tmaxProperties: 10,\r\n\t\t\t\texamples: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcolor: \"#000000\",\r\n\t\t\t\t\t\tis_verified_by_me: true\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\trequired: [\r\n\t\t\t\"chainId\",\r\n\t\t\t\"address\",\r\n\t\t\t\"decimals\",\r\n\t\t\t\"name\",\r\n\t\t\t\"symbol\"\r\n\t\t]\r\n\t}\r\n};\r\nconst type = \"object\";\r\nconst additionalProperties = false;\r\nconst properties = {\r\n\tname: {\r\n\t\ttype: \"string\",\r\n\t\tdescription: \"The name of the token list\",\r\n\t\tminLength: 1,\r\n\t\tmaxLength: 20,\r\n\t\tpattern: \"^[\\\\w ]+$\",\r\n\t\texamples: [\r\n\t\t\t\"My Token List\"\r\n\t\t]\r\n\t},\r\n\ttimestamp: {\r\n\t\ttype: \"string\",\r\n\t\tformat: \"date-time\",\r\n\t\tdescription: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\r\n\t},\r\n\tversion: {\r\n\t\t$ref: \"#/definitions/Version\"\r\n\t},\r\n\ttokens: {\r\n\t\ttype: \"array\",\r\n\t\tdescription: \"The list of tokens included in the list\",\r\n\t\titems: {\r\n\t\t\t$ref: \"#/definitions/TokenInfo\"\r\n\t\t},\r\n\t\tminItems: 1,\r\n\t\tmaxItems: 10000\r\n\t},\r\n\tkeywords: {\r\n\t\ttype: \"array\",\r\n\t\tdescription: \"Keywords associated with the contents of the list; may be used in list discoverability\",\r\n\t\titems: {\r\n\t\t\ttype: \"string\",\r\n\t\t\tdescription: \"A keyword to describe the contents of the list\",\r\n\t\t\tminLength: 1,\r\n\t\t\tmaxLength: 20,\r\n\t\t\tpattern: \"^[\\\\w ]+$\",\r\n\t\t\texamples: [\r\n\t\t\t\t\"compound\",\r\n\t\t\t\t\"lending\",\r\n\t\t\t\t\"personal tokens\"\r\n\t\t\t]\r\n\t\t},\r\n\t\tmaxItems: 20,\r\n\t\tuniqueItems: true\r\n\t},\r\n\ttags: {\r\n\t\ttype: \"object\",\r\n\t\tdescription: \"A mapping of tag identifiers to their name and description\",\r\n\t\tpropertyNames: {\r\n\t\t\t$ref: \"#/definitions/TagIdentifier\"\r\n\t\t},\r\n\t\tadditionalProperties: {\r\n\t\t\t$ref: \"#/definitions/TagDefinition\"\r\n\t\t},\r\n\t\tmaxProperties: 20,\r\n\t\texamples: [\r\n\t\t\t{\r\n\t\t\t\tstablecoin: {\r\n\t\t\t\t\tname: \"Stablecoin\",\r\n\t\t\t\t\tdescription: \"A token with value pegged to another asset\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\tlogoURI: {\r\n\t\ttype: \"string\",\r\n\t\tdescription: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\r\n\t\tformat: \"uri\",\r\n\t\texamples: [\r\n\t\t\t\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\r\n\t\t]\r\n\t}\r\n};\r\nconst required = [\r\n\t\"name\",\r\n\t\"timestamp\",\r\n\t\"version\",\r\n\t\"tokens\"\r\n];\r\nconst tokenlist_schema = {\r\n\t$schema,\r\n\t$id,\r\n\ttitle,\r\n\tdescription,\r\n\tdefinitions,\r\n\ttype,\r\n\tadditionalProperties,\r\n\tproperties,\r\n\trequired\r\n};\r\n\r\n/**\r\n * Comparator function that allows sorting version from lowest to highest\r\n * @param versionA version A to compare\r\n * @param versionB version B to compare\r\n * @returns -1 if versionA comes before versionB, 0 if versionA is equal to version B, and 1 if version A comes after version B\r\n */\r\nfunction versionComparator(versionA, versionB) {\r\n\tlet _returnValue = 0;\r\n\tif (versionA.major < versionB.major) {\r\n\t\t_returnValue = -1;\r\n\t} else if (versionA.major > versionB.major) {\r\n\t\t_returnValue = 1;\r\n\t} else if (versionA.minor < versionB.minor) {\r\n\t\t_returnValue = -1;\r\n\t} else if (versionA.minor > versionB.minor) {\r\n\t\t_returnValue = 1;\r\n\t} else if (versionA.patch < versionB.patch) {\r\n\t\t_returnValue = -1;\r\n\t} else if (versionA.patch > versionB.patch) {\r\n\t\t_returnValue = 1;\r\n\t} else {\r\n\t\t_returnValue = 0;\r\n\t}\r\n\treturn _returnValue;\r\n}\r\n\r\n/**\r\n * Returns true if versionB is an update over versionA\r\n */\r\n\r\nfunction isVersionUpdate(base, update) {\r\n  return versionComparator(base, update) < 0;\r\n}\r\n\r\nconst VersionUpgrade = {\r\n  NONE : 0,\r\n  PATCH : 1,\r\n  MINOR : 2,\r\n  MAJOR : 3\r\n}\r\n\r\n/**\r\n * Return the upgrade type from the base version to the update version.\r\n * Note that downgrades and equivalent versions are both treated as `NONE`.\r\n * @param base base list\r\n * @param update update to the list\r\n */\r\n\r\n\r\nfunction getVersionUpgrade(base, update) {\r\n  if (update.major > base.major) {\r\n    return VersionUpgrade.MAJOR;\r\n  }\r\n\r\n  if (update.major < base.major) {\r\n    return VersionUpgrade.NONE;\r\n  }\r\n\r\n  if (update.minor > base.minor) {\r\n    return VersionUpgrade.MINOR;\r\n  }\r\n\r\n  if (update.minor < base.minor) {\r\n    return VersionUpgrade.NONE;\r\n  }\r\n\r\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\r\n}\r\n\r\n/**\r\n * compares two token info key values\r\n * this subset of full deep equal functionality does not work on objects or object arrays\r\n * @param a comparison item a\r\n * @param b comparison item b\r\n */\r\nfunction compareTokenInfoProperty(a, b) {\r\n  if (a === b) return true;\r\n  if (typeof a !== typeof b) return false;\r\n\r\n  if (Array.isArray(a) && Array.isArray(b)) {\r\n    return a.every((el, i) => {\r\n      return b[i] === el;\r\n    });\r\n  }\r\n\r\n  return false;\r\n}\r\n/**\r\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\r\n * @param base base list\r\n * @param update updated list\r\n */\r\n\r\n\r\nfunction diffTokenLists(base, update) {\r\n  const indexedBase = base.reduce((memo, tokenInfo) => {\r\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\r\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\r\n    return memo;\r\n  }, {});\r\n  const newListUpdates = update.reduce((memo, tokenInfo) => {\r\n    let _indexedBase$tokenInf;\r\n\r\n    const baseToken = (_indexedBase$tokenInf === indexedBase[tokenInfo.chainId]) == null ? undefined : _indexedBase$tokenInf[tokenInfo.address];\r\n\r\n    if (!baseToken) {\r\n      memo.added.push(tokenInfo);\r\n    } else {\r\n\t\tconst changes = Object.keys(tokenInfo).filter((s) => {\r\n        return s !== 'address' && s !== 'chainId';\r\n      }).filter((s) => {\r\n        return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\r\n      });\r\n\r\n      if (changes.length > 0) {\r\n        if (!memo.changed[tokenInfo.chainId]) {\r\n          memo.changed[tokenInfo.chainId] = {};\r\n        }\r\n\r\n        memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\r\n      }\r\n    }\r\n\r\n    if (!memo.index[tokenInfo.chainId]) {\r\n      let _memo$index$tokenInfo;\r\n\r\n      memo.index[tokenInfo.chainId] = (_memo$index$tokenInfo = {}, _memo$index$tokenInfo[tokenInfo.address] = true, _memo$index$tokenInfo);\r\n    } else {\r\n      memo.index[tokenInfo.chainId][tokenInfo.address] = true;\r\n    }\r\n\r\n    return memo;\r\n  }, {\r\n    added: [],\r\n    changed: {},\r\n    index: {}\r\n  });\r\n  const removed = base.reduce((list, curr) => {\r\n    if (!newListUpdates.index[curr.chainId] || !newListUpdates.index[curr.chainId][curr.address]) {\r\n      list.push(curr);\r\n    }\r\n\r\n    return list;\r\n  }, []);\r\n  return {\r\n    added: newListUpdates.added,\r\n    changed: newListUpdates.changed,\r\n    removed\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the minimum version bump for the given list\r\n * @param baseList the base list of tokens\r\n * @param updatedList the updated list of tokens\r\n */\r\n\r\nfunction minVersionBump(baseList, updatedList) {\r\n\tconst diff = diffTokenLists(baseList, updatedList);\r\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\r\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\r\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\r\n  return VersionUpgrade.NONE;\r\n}\r\n\r\n/**\r\n * Returns the next version of the list given a base version and the upgrade type\r\n * @param base current version\r\n * @param bump the upgrade type\r\n */\r\n\r\nfunction nextVersion(base, bump) {\r\n  switch (bump) {\r\n    case VersionUpgrade.NONE:\r\n      return base;\r\n\r\n    case VersionUpgrade.MAJOR:\r\n      return {\r\n        major: base.major + 1,\r\n        minor: 0,\r\n        patch: 0\r\n      };\r\n\r\n    case VersionUpgrade.MINOR:\r\n      return {\r\n        major: base.major,\r\n        minor: base.minor + 1,\r\n        patch: 0\r\n      };\r\n\r\n    case VersionUpgrade.PATCH:\r\n\t\treturn {\r\n\t\t\tmajor: base.major,\r\n\t\t\tminor: base.minor,\r\n\t\t\tpatch: base.patch + 1\r\n\t\t};\r\n\tdefault:\r\n\t\treturn {\r\n\t\t\tmajor: base.major + 1,\r\n\t\t\tminor: 0,\r\n\t\t\tpatch: 0\r\n\t\t\t};\r\n  }\r\n}\r\n\r\nexport { VersionUpgrade, diffTokenLists, getVersionUpgrade, isVersionUpdate, minVersionBump, nextVersion, tokenlist_schema as schema, versionComparator };"]},"metadata":{},"sourceType":"module"}