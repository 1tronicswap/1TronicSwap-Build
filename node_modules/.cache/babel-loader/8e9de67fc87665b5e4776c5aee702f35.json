{"ast":null,"code":"import invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport { TokenAmount } from './tokenAmount';\nimport { Token, currencyEquals } from '../token';\nimport { TEN } from '../../constants';\nimport { Fraction } from './fraction';\nimport { CurrencyAmount } from './currencyAmount';\nexport class Price extends Fraction {\n  // input i.e. denominator\n  // output i.e. numerator\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n  static fromRoute(route) {\n    const prices = [];\n\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);\n  } // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  constructor(baseCurrency, quoteCurrency, denominator, numerator) {\n    super(numerator, denominator);\n    this.baseCurrency = void 0;\n    this.quoteCurrency = void 0;\n    this.scalar = void 0;\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n  }\n\n  get raw() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  get adjusted() {\n    return super.multiply(this.scalar);\n  }\n\n  invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n\n  multiply(other) {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN');\n    const fraction = super.multiply(other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n\n\n  quote(currencyAmount) {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN');\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient);\n  }\n\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n\n}","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/utils/@sdk/entities/fractions/price.ts"],"names":["invariant","JSBI","TokenAmount","Token","currencyEquals","TEN","Fraction","CurrencyAmount","Price","fromRoute","route","prices","i","pair","pairs","entries","push","path","equals","token0","reserve0","currency","reserve1","raw","slice","reduce","accumulator","currentValue","multiply","constructor","baseCurrency","quoteCurrency","denominator","numerator","scalar","exponentiate","BigInt","decimals","adjusted","invert","other","fraction","quote","currencyAmount","quotient","ether","toSignificant","significantDigits","format","rounding","toFixed","decimalPlaces"],"mappings":"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","sourcesContent":["import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { Token, currencyEquals } from '../token'\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}