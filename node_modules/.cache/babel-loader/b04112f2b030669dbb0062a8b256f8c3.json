{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\components\\\\_uikit\\\\components\\\\ButtonMenu\\\\ButtonMenu.tsx\";\nimport React, { cloneElement, Children } from \"react\";\nimport styled from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { scales, variants } from \"../Button/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getBackgroundColor = _ref => {\n  let {\n    theme,\n    variant\n  } = _ref;\n  let color = theme.colors.primary;\n\n  switch (variant) {\n    case variants.PRIMARY:\n      color = theme.colors.primary;\n      break;\n\n    case variants.PRIMARY_CONTRAST:\n      color = theme.colors.background;\n      break;\n\n    default:\n      color = theme.colors.primary;\n      break;\n  }\n\n  return color;\n};\n\nconst getBorderColor = _ref2 => {\n  let {\n    theme,\n    variant\n  } = _ref2;\n  let color = theme.colors.primary;\n\n  switch (variant) {\n    case variants.PRIMARY:\n      color = theme.colors.background;\n      break;\n\n    case variants.PRIMARY_CONTRAST:\n      color = theme.colors.primary;\n      break;\n\n    default:\n      color = theme.colors.primary;\n      break;\n  }\n\n  return color;\n};\n\nconst StyledButtonMenu = styled.div`\n  background-color: ${getBackgroundColor};\n  border-radius: 8px;\n  display: inline-flex;\n  border: 1px solid ${getBorderColor};\n\n  & > button + button,\n  & > a + a {\n    margin-left: 2px; // To avoid focus shadow overlap\n  }\n  ${space}\n`;\n_c = StyledButtonMenu;\n\nconst ButtonMenu = _ref3 => {\n  let {\n    activeIndex = 0,\n    scale = scales.MD,\n    variant = variants.PRIMARY,\n    onItemClick,\n    children,\n    ...props\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(StyledButtonMenu, {\n    variant: variant,\n    ...props,\n    children: Children.map(children, (child, index) => {\n      return /*#__PURE__*/cloneElement(child, {\n        isActive: activeIndex === index,\n        onClick: onItemClick ? () => onItemClick(index) : undefined,\n        scale,\n        variant\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = ButtonMenu;\nexport default ButtonMenu;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButtonMenu\");\n$RefreshReg$(_c2, \"ButtonMenu\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/components/_uikit/components/ButtonMenu/ButtonMenu.tsx"],"names":["React","cloneElement","Children","styled","space","scales","variants","getBackgroundColor","theme","variant","color","colors","primary","PRIMARY","PRIMARY_CONTRAST","background","getBorderColor","StyledButtonMenu","div","ButtonMenu","activeIndex","scale","MD","onItemClick","children","props","map","child","index","isActive","onClick","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,YAAhB,EAA8BC,QAA9B,QAA4D,OAA5D;AACA,OAAOC,MAAP,MAAqC,mBAArC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,iBAAjC;;;AAOA,MAAMC,kBAAkB,GAAG,QAA+C;AAAA,MAA9C;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA8C;AACxE,MAAIC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,OAAzB;;AACA,UAAQH,OAAR;AACE,SAAKH,QAAQ,CAACO,OAAd;AACEH,MAAAA,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,OAArB;AACA;;AACF,SAAKN,QAAQ,CAACQ,gBAAd;AACEJ,MAAAA,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaI,UAArB;AACA;;AACF;AACEL,MAAAA,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,OAArB;AACA;AATJ;;AAWA,SAAOF,KAAP;AACD,CAdD;;AAgBA,MAAMM,cAAc,GAAG,SAA+C;AAAA,MAA9C;AAAER,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA8C;AACpE,MAAIC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,OAAzB;;AACA,UAAQH,OAAR;AACE,SAAKH,QAAQ,CAACO,OAAd;AACEH,MAAAA,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaI,UAArB;AACA;;AACF,SAAKT,QAAQ,CAACQ,gBAAd;AACEJ,MAAAA,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,OAArB;AACA;;AACF;AACEF,MAAAA,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,OAArB;AACA;AATJ;;AAWA,SAAOF,KAAP;AACD,CAdD;;AAgBA,MAAMO,gBAAgB,GAAGd,MAAM,CAACe,GAA2B;AAC3D,sBAAsBX,kBAAmB;AACzC;AACA;AACA,sBAAsBS,cAAe;AACrC;AACA;AACA;AACA;AACA;AACA,IAAIZ,KAAM;AACV,CAXA;KAAMa,gB;;AAaN,MAAME,UAAqC,GAAG,SAOxC;AAAA,MAPyC;AAC7CC,IAAAA,WAAW,GAAG,CAD+B;AAE7CC,IAAAA,KAAK,GAAGhB,MAAM,CAACiB,EAF8B;AAG7Cb,IAAAA,OAAO,GAAGH,QAAQ,CAACO,OAH0B;AAI7CU,IAAAA,WAJ6C;AAK7CC,IAAAA,QAL6C;AAM7C,OAAGC;AAN0C,GAOzC;AACJ,sBACE,QAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEhB,OAA3B;AAAA,OAAwCgB,KAAxC;AAAA,cACGvB,QAAQ,CAACwB,GAAT,CAAaF,QAAb,EAAuB,CAACG,KAAD,EAAsBC,KAAtB,KAAgC;AACtD,0BAAO3B,YAAY,CAAC0B,KAAD,EAAQ;AACzBE,QAAAA,QAAQ,EAAET,WAAW,KAAKQ,KADD;AAEzBE,QAAAA,OAAO,EAAEP,WAAW,GAAG,MAAMA,WAAW,CAACK,KAAD,CAApB,GAA8BG,SAFzB;AAGzBV,QAAAA,KAHyB;AAIzBZ,QAAAA;AAJyB,OAAR,CAAnB;AAMD,KAPA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CApBD;;MAAMU,U;AAsBN,eAAeA,UAAf","sourcesContent":["import React, { cloneElement, Children, ReactElement } from \"react\";\r\nimport styled, { DefaultTheme } from \"styled-components\";\r\nimport { space } from \"styled-system\";\r\nimport { scales, variants } from \"../Button/types\";\r\nimport { ButtonMenuProps } from \"./types\";\r\n\r\ninterface StyledButtonMenuProps extends ButtonMenuProps {\r\n  theme: DefaultTheme;\r\n}\r\n\r\nconst getBackgroundColor = ({ theme, variant }: StyledButtonMenuProps) => {\r\n  let color = theme.colors.primary\r\n  switch (variant) {\r\n    case variants.PRIMARY:\r\n      color = theme.colors.primary;\r\n      break;  \r\n    case variants.PRIMARY_CONTRAST:\r\n      color = theme.colors.background;\r\n      break;  \r\n    default:\r\n      color = theme.colors.primary;\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n\r\nconst getBorderColor = ({ theme, variant }: StyledButtonMenuProps) => {\r\n  let color = theme.colors.primary\r\n  switch (variant) {\r\n    case variants.PRIMARY:\r\n      color = theme.colors.background;\r\n      break;  \r\n    case variants.PRIMARY_CONTRAST:\r\n      color = theme.colors.primary;\r\n      break;  \r\n    default:\r\n      color = theme.colors.primary;\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n\r\nconst StyledButtonMenu = styled.div<StyledButtonMenuProps>`\r\n  background-color: ${getBackgroundColor};\r\n  border-radius: 8px;\r\n  display: inline-flex;\r\n  border: 1px solid ${getBorderColor};\r\n\r\n  & > button + button,\r\n  & > a + a {\r\n    margin-left: 2px; // To avoid focus shadow overlap\r\n  }\r\n  ${space}\r\n`;\r\n\r\nconst ButtonMenu: React.FC<ButtonMenuProps> = ({\r\n  activeIndex = 0,\r\n  scale = scales.MD,\r\n  variant = variants.PRIMARY,\r\n  onItemClick,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <StyledButtonMenu variant={variant} {...props}>\r\n      {Children.map(children, (child: ReactElement, index) => {\r\n        return cloneElement(child, {\r\n          isActive: activeIndex === index,\r\n          onClick: onItemClick ? () => onItemClick(index) : undefined,\r\n          scale,\r\n          variant,\r\n        });\r\n      })}\r\n    </StyledButtonMenu>\r\n  );\r\n};\r\n\r\nexport default ButtonMenu;\r\n"]},"metadata":{},"sourceType":"module"}