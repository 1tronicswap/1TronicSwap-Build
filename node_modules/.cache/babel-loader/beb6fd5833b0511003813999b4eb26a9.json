{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\ApyButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { IconButton, useModal, CalculateIcon } from 'components/_uikit';\nimport ApyCalculatorModal from 'components/ApyCalculatorModal';\nimport { useTranslation } from 'contexts/Localization';\nimport { useFarmUser, useLpTokenPrice, useBusdPriceFromPid } from 'state/farms/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ApyButton = _ref => {\n  _s();\n\n  let {\n    variant,\n    pid,\n    lpLabel,\n    lpSymbol,\n    cakePrice,\n    apr,\n    isTokenOnly,\n    multiplier,\n    displayApr,\n    addLiquidityUrl\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const lpPrice = useLpTokenPrice(lpSymbol);\n  const tokenPrice = useBusdPriceFromPid(pid);\n  const {\n    tokenBalance,\n    stakedBalance\n  } = useFarmUser(pid);\n  const [onPresentApyModal] = useModal( /*#__PURE__*/_jsxDEV(ApyCalculatorModal, {\n    linkLabel: t('Get %symbol%', {\n      symbol: lpLabel\n    }),\n    stakingTokenPrice: isTokenOnly ? tokenPrice.toNumber() : lpPrice.toNumber(),\n    earningTokenPrice: cakePrice.toNumber(),\n    apr: apr,\n    multiplier: multiplier,\n    displayApr: displayApr,\n    linkHref: addLiquidityUrl,\n    isFarm: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this));\n\n  const handleClickButton = event => {\n    event.stopPropagation();\n    onPresentApyModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(IconButton, {\n    onClick: handleClickButton,\n    variant: \"text\",\n    scale: \"sm\",\n    ml: \"4px\",\n    children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n      width: \"18px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ApyButton, \"t54OOi+kFYacBpHY9zH+gKULlco=\", false, function () {\n  return [useTranslation, useLpTokenPrice, useBusdPriceFromPid, useFarmUser, useModal];\n});\n\n_c = ApyButton;\nexport default ApyButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApyButton\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/views/Farms/components/FarmCard/ApyButton.tsx"],"names":["React","IconButton","useModal","CalculateIcon","ApyCalculatorModal","useTranslation","useFarmUser","useLpTokenPrice","useBusdPriceFromPid","ApyButton","variant","pid","lpLabel","lpSymbol","cakePrice","apr","isTokenOnly","multiplier","displayApr","addLiquidityUrl","t","lpPrice","tokenPrice","tokenBalance","stakedBalance","onPresentApyModal","symbol","toNumber","handleClickButton","event","stopPropagation"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,aAA/B,QAAoD,mBAApD;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,mBAAvC,QAAkE,mBAAlE;;;AAYA,MAAMC,SAAmC,GAAG,QASnB;AAAA;;AAAA,MAToB;AAAEC,IAAAA,OAAF;AAC3CC,IAAAA,GAD2C;AAE3CC,IAAAA,OAF2C;AAG3CC,IAAAA,QAH2C;AAI3CC,IAAAA,SAJ2C;AAK3CC,IAAAA,GAL2C;AAM3CC,IAAAA,WAN2C;AAO3CC,IAAAA,UAP2C;AAQ3CC,IAAAA,UAR2C;AAS3CC,IAAAA;AAT2C,GASpB;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAQf,cAAc,EAA5B;AACA,QAAMgB,OAAO,GAAGd,eAAe,CAACM,QAAD,CAA/B;AACA,QAAMS,UAAU,GAAGd,mBAAmB,CAACG,GAAD,CAAtC;AACA,QAAM;AAAEY,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkClB,WAAW,CAACK,GAAD,CAAnD;AACA,QAAM,CAACc,iBAAD,IAAsBvB,QAAQ,eAClC,QAAC,kBAAD;AACC,IAAA,SAAS,EAAGkB,CAAC,CAAC,cAAD,EAAiB;AAAEM,MAAAA,MAAM,EAAEd;AAAV,KAAjB,CADd;AAEE,IAAA,iBAAiB,EAAKI,WAAW,GAAEM,UAAU,CAACK,QAAX,EAAF,GAA0BN,OAAO,CAACM,QAAR,EAF7D;AAGE,IAAA,iBAAiB,EAAKb,SAAS,CAACa,QAAV,EAHxB;AAIE,IAAA,GAAG,EAAKZ,GAJV;AAKE,IAAA,UAAU,EAAKE,UALjB;AAME,IAAA,UAAU,EAAKC,UANjB;AAOE,IAAA,QAAQ,EAAKC,eAPf;AAQE,IAAA,MAAM;AARR;AAAA;AAAA;AAAA;AAAA,UADkC,CAApC;;AAaA,QAAMS,iBAAiB,GAAIC,KAAD,IAAiB;AACzCA,IAAAA,KAAK,CAACC,eAAN;AACAL,IAAAA,iBAAiB;AAClB,GAHD;;AAKA,sBACE,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEG,iBAArB;AAAwC,IAAA,OAAO,EAAC,MAAhD;AAAuD,IAAA,KAAK,EAAC,IAA7D;AAAkE,IAAA,EAAE,EAAC,KAArE;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCD;;GAAMnB,S;UAUUJ,c,EACEE,e,EACGC,mB,EACqBF,W,EACZJ,Q;;;KAdxBO,S;AAuCN,eAAeA,SAAf","sourcesContent":["import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from 'components/_uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice, useBusdPriceFromPid } from 'state/farms/hooks'\r\n\r\nexport interface ApyButtonProps {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  isTokenOnly,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl, }) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const tokenPrice = useBusdPriceFromPid(pid)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n     linkLabel={ t('Get %symbol%', { symbol: lpLabel }) }\r\n      stakingTokenPrice = { isTokenOnly? tokenPrice.toNumber() : lpPrice.toNumber() }\r\n      earningTokenPrice = { cakePrice.toNumber() }\r\n      apr = { apr }\r\n      multiplier = { multiplier }\r\n      displayApr = { displayApr }\r\n      linkHref = { addLiquidityUrl }\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n"]},"metadata":{},"sourceType":"module"}