{"ast":null,"code":"var _jsxFileName = \"D:\\\\new\\\\1TronicSwap-Build\\\\src\\\\views\\\\Pools\\\\components\\\\PoolTabButtons.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, Flex, NotificationDot, useMatchBreakpoints } from 'components/_uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport ToggleView from './ToggleView/ToggleView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PoolTabButtons = _ref => {\n  _s();\n\n  let {\n    stakedOnly,\n    setStakedOnly,\n    hasStakeInFinishedPools,\n    viewMode,\n    setViewMode\n  } = _ref;\n  const {\n    url,\n    isExact\n  } = useRouteMatch();\n  const {\n    isXs,\n    isSm\n  } = useMatchBreakpoints();\n  const {\n    t\n  } = useTranslation();\n\n  const viewModeToggle = /*#__PURE__*/_jsxDEV(ToggleView, {\n    viewMode: viewMode,\n    onToggle: mode => setViewMode(mode)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 26\n  }, this);\n\n  const liveOrFinishedSwitch = /*#__PURE__*/_jsxDEV(ButtonMenu, {\n    activeIndex: isExact ? 0 : 1,\n    scale: \"sm\",\n    variant: \"primary_contrast\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n      as: Link,\n      to: `${url}`,\n      children: t('Live')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationDot, {\n      show: hasStakeInFinishedPools,\n      children: /*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n        as: Link,\n        to: `${url}/history`,\n        children: t('Finished')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n\n  const stakedOnlySwitch = /*#__PURE__*/_jsxDEV(Flex, {\n    mt: ['4px', null, 0, null],\n    ml: [0, null, '24px', null],\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Toggle, {\n      scale: \"sm\",\n      checked: stakedOnly,\n      onChange: () => setStakedOnly(prev => !prev)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      ml: ['4px', '4px', '8px'],\n      children: t('Staked only')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n\n  if (isXs || isSm) {\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        width: \"100%\",\n        justifyContent: \"space-between\",\n        children: [viewModeToggle, liveOrFinishedSwitch]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), stakedOnlySwitch]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: ['space-around', 'space-around', 'flex-start'],\n    mb: ['24px', '24px', '24px', '0px'],\n    children: [viewModeToggle, liveOrFinishedSwitch, stakedOnlySwitch]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoolTabButtons, \"4NplqEfPSF7r52lGWKra/9KZVC8=\", false, function () {\n  return [useRouteMatch, useMatchBreakpoints, useTranslation];\n});\n\n_c = PoolTabButtons;\nexport default PoolTabButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolTabButtons\");","map":{"version":3,"sources":["D:/new/1TronicSwap-Build/src/views/Pools/components/PoolTabButtons.tsx"],"names":["React","useRouteMatch","Link","ButtonMenu","ButtonMenuItem","Toggle","Text","Flex","NotificationDot","useMatchBreakpoints","useTranslation","ToggleView","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","url","isExact","isXs","isSm","t","viewModeToggle","mode","liveOrFinishedSwitch","stakedOnlySwitch","prev"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport {\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Toggle,\r\n  Text,\r\n  Flex,\r\n  NotificationDot,\r\n  useMatchBreakpoints,\r\n} from 'components/_uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\r\n\r\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n\r\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n\r\n  const liveOrFinishedSwitch = (\r\n    <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"primary_contrast\">\r\n      <ButtonMenuItem as={Link} to={`${url}`}>\r\n        {t('Live')}\r\n      </ButtonMenuItem>\r\n      <NotificationDot show={hasStakeInFinishedPools}>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {t('Finished')}\r\n        </ButtonMenuItem>\r\n      </NotificationDot>\r\n    </ButtonMenu>\r\n  )\r\n\r\n  const stakedOnlySwitch = (\r\n    <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\r\n      <Toggle scale=\"sm\" checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\r\n      <Text ml={['4px', '4px', '8px']}>{t('Staked only')}</Text>\r\n    </Flex>\r\n  )\r\n\r\n  if (isXs || isSm) {\r\n    return (\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\" mb=\"24px\">\r\n        <Flex width=\"100%\" justifyContent=\"space-between\">\r\n          {viewModeToggle}\r\n          {liveOrFinishedSwitch}\r\n        </Flex>\r\n        {stakedOnlySwitch}\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      justifyContent={['space-around', 'space-around', 'flex-start']}\r\n      mb={['24px', '24px', '24px', '0px']}\r\n    >\r\n      {viewModeToggle}\r\n      {liveOrFinishedSwitch}\r\n      {stakedOnlySwitch}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n"]},"metadata":{},"sourceType":"module"}